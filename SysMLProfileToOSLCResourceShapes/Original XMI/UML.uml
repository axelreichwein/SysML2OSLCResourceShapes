<?xml version="1.0" encoding="UTF-8"?>
<uml:Package xmi:version="20110701" xmlns:xmi="http://www.omg.org/spec/XMI/20110701" xmlns:uml="http://www.eclipse.org/uml2/4.0.0/UML" xmi:id="_0" name="UML" URI="http://www.omg.org/spec/UML/20110701">
  <packageImport xmi:id="_packageImport.0">
    <importedPackage href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0"/>
  </packageImport>
  <packagedElement xmi:type="uml:Association" xmi:id="A_action_actionExecutionSpecification" name="A_action_actionExecutionSpecification">
    <ownedEnd xmi:id="A_action_actionExecutionSpecification-actionExecutionSpecification" name="actionExecutionSpecification" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_action_actionExecutionSpecification-actionExecutionSpecification-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_action_actionExecutionSpecification-actionExecutionSpecification-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_action_interaction" name="A_action_interaction">
    <ownedEnd xmi:id="A_action_interaction-interaction" name="interaction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_action_interaction-interaction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_actualGate_interactionUse" name="A_actualGate_interactionUse">
    <ownedEnd xmi:id="A_actualGate_interactionUse-interactionUse" name="interactionUse" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_actualGate_interactionUse-interactionUse-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_actual_templateParameterSubstitution" name="A_actual_templateParameterSubstitution">
    <ownedEnd xmi:id="A_actual_templateParameterSubstitution-templateParameterSubstitution" name="templateParameterSubstitution" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_actual_templateParameterSubstitution-templateParameterSubstitution-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_actual_templateParameterSubstitution-templateParameterSubstitution-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_addition_include" name="A_addition_include">
    <ownedEnd xmi:id="A_addition_include-include" name="include" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_addition_include-include-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_addition_include-include-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_annotatedElement_comment" name="A_annotatedElement_comment">
    <ownedEnd xmi:id="A_annotatedElement_comment-comment" name="comment" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_annotatedElement_comment-comment-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_annotatedElement_comment-comment-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_appliedProfile_profileApplication" name="A_appliedProfile_profileApplication">
    <ownedEnd xmi:id="A_appliedProfile_profileApplication-profileApplication" name="profileApplication" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_appliedProfile_profileApplication-profileApplication-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_appliedProfile_profileApplication-profileApplication-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_argument_interactionUse" name="A_argument_interactionUse">
    <ownedEnd xmi:id="A_argument_interactionUse-interactionUse" name="interactionUse" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_argument_interactionUse-interactionUse-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_argument_invocationAction" name="A_argument_invocationAction">
    <ownedEnd xmi:id="A_argument_invocationAction-invocationAction" name="invocationAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_argument_invocationAction-invocationAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_argument_message" name="A_argument_message">
    <ownedEnd xmi:id="A_argument_message-message" name="message" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_argument_message-message-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_association_clearAssociationAction" name="A_association_clearAssociationAction">
    <ownedEnd xmi:id="A_association_clearAssociationAction-clearAssociationAction" name="clearAssociationAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_association_clearAssociationAction-clearAssociationAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_attribute_classifier" name="A_attribute_classifier" isDerived="true">
    <ownedEnd xmi:id="A_attribute_classifier-classifier" name="classifier" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_attribute_classifier-classifier-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_before_toAfter" name="A_before_toAfter"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_behavior_behaviorExecutionSpecification" name="A_behavior_behaviorExecutionSpecification">
    <ownedEnd xmi:id="A_behavior_behaviorExecutionSpecification-behaviorExecutionSpecification" name="behaviorExecutionSpecification" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_behavior_behaviorExecutionSpecification-behaviorExecutionSpecification-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_behavior_behaviorExecutionSpecification-behaviorExecutionSpecification-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_behavior_callBehaviorAction" name="A_behavior_callBehaviorAction">
    <ownedEnd xmi:id="A_behavior_callBehaviorAction-callBehaviorAction" name="callBehaviorAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_behavior_callBehaviorAction-callBehaviorAction-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_behavior_callBehaviorAction-callBehaviorAction-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_behavior_opaqueExpression" name="A_behavior_opaqueExpression">
    <ownedEnd xmi:id="A_behavior_opaqueExpression-opaqueExpression" name="opaqueExpression" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_behavior_opaqueExpression-opaqueExpression-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_behavior_opaqueExpression-opaqueExpression-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_bodyCondition_bodyContext" name="A_bodyCondition_bodyContext">
    <ownedEnd xmi:id="A_bodyCondition_bodyContext-bodyContext" name="bodyContext" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_bodyCondition_bodyContext-bodyContext-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_bodyOutput_clause" name="A_bodyOutput_clause">
    <ownedEnd xmi:id="A_bodyOutput_clause-clause" name="clause" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_bodyOutput_clause-clause-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_bodyOutput_clause-clause-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_bodyOutput_loopNode" name="A_bodyOutput_loopNode">
    <ownedEnd xmi:id="A_bodyOutput_loopNode-loopNode" name="loopNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_bodyOutput_loopNode-loopNode-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_bodyOutput_loopNode-loopNode-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_bodyPart_loopNode" name="A_bodyPart_loopNode">
    <ownedEnd xmi:id="A_bodyPart_loopNode-loopNode" name="loopNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_bodyPart_loopNode-loopNode-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_body_clause" name="A_body_clause">
    <ownedEnd xmi:id="A_body_clause-clause" name="clause" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_body_clause-clause-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_cfragmentGate_combinedFragment" name="A_cfragmentGate_combinedFragment">
    <ownedEnd xmi:id="A_cfragmentGate_combinedFragment-combinedFragment" name="combinedFragment" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_cfragmentGate_combinedFragment-combinedFragment-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_changeExpression_changeEvent" name="A_changeExpression_changeEvent">
    <ownedEnd xmi:id="A_changeExpression_changeEvent-changeEvent" name="changeEvent" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_changeExpression_changeEvent-changeEvent-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_classifierBehavior_behavioredClassifier" name="A_classifierBehavior_behavioredClassifier">
    <generalization xmi:id="A_classifierBehavior_behavioredClassifier-_generalization.0"/>
    <ownedEnd xmi:id="A_classifierBehavior_behavioredClassifier-behavioredClassifier" name="behavioredClassifier" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_classifierBehavior_behavioredClassifier-behavioredClassifier-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_classifier_createObjectAction" name="A_classifier_createObjectAction">
    <ownedEnd xmi:id="A_classifier_createObjectAction-createObjectAction" name="createObjectAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_classifier_createObjectAction-createObjectAction-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_classifier_createObjectAction-createObjectAction-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_classifier_enumerationLiteral" name="A_classifier_enumerationLiteral" isDerived="true">
    <generalization xmi:id="A_classifier_enumerationLiteral-_generalization.0"/>
    <ownedEnd xmi:id="A_classifier_enumerationLiteral-enumerationLiteral" name="enumerationLiteral" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_classifier_enumerationLiteral-enumerationLiteral-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_classifier_enumerationLiteral-enumerationLiteral-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_classifier_instanceSpecification" name="A_classifier_instanceSpecification">
    <ownedEnd xmi:id="A_classifier_instanceSpecification-instanceSpecification" name="instanceSpecification" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_classifier_instanceSpecification-instanceSpecification-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_classifier_instanceSpecification-instanceSpecification-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_classifier_readExtentAction" name="A_classifier_readExtentAction">
    <ownedEnd xmi:id="A_classifier_readExtentAction-readExtentAction" name="readExtentAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_classifier_readExtentAction-readExtentAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_classifier_readIsClassifiedObjectAction" name="A_classifier_readIsClassifiedObjectAction">
    <ownedEnd xmi:id="A_classifier_readIsClassifiedObjectAction-readIsClassifiedObjectAction" name="readIsClassifiedObjectAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_classifier_readIsClassifiedObjectAction-readIsClassifiedObjectAction-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_classifier_readIsClassifiedObjectAction-readIsClassifiedObjectAction-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_classifier_templateParameter_parameteredElement" name="A_classifier_templateParameter_parameteredElement"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_clause_conditionalNode" name="A_clause_conditionalNode">
    <ownedEnd xmi:id="A_clause_conditionalNode-conditionalNode" name="conditionalNode" visibility="public"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_clientDependency_client" name="A_clientDependency_client"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_collaborationRole_collaboration" name="A_collaborationRole_collaboration">
    <ownedEnd xmi:id="A_collaborationRole_collaboration-collaboration" name="collaboration" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_collaborationRole_collaboration-collaboration-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_collaborationRole_collaboration-collaboration-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_collaborationUse_classifier" name="A_collaborationUse_classifier">
    <ownedEnd xmi:id="A_collaborationUse_classifier-classifier" name="classifier" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_collaborationUse_classifier-classifier-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_collection_reduceAction" name="A_collection_reduceAction">
    <ownedEnd xmi:id="A_collection_reduceAction-reduceAction" name="reduceAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_collection_reduceAction-reduceAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_condition_extend" name="A_condition_extend">
    <ownedEnd xmi:id="A_condition_extend-extend" name="extend" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_condition_extend-extend-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_condition_parameterSet" name="A_condition_parameterSet">
    <ownedEnd xmi:id="A_condition_parameterSet-parameterSet" name="parameterSet" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_condition_parameterSet-parameterSet-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_configuration_deployment" name="A_configuration_deployment"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_conformance_specificMachine" name="A_conformance_specificMachine"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_connectableElement_templateParameter_parameteredElement" name="A_connectableElement_templateParameter_parameteredElement"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_connectionPoint_state" name="A_connectionPoint_state"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_connectionPoint_stateMachine" name="A_connectionPoint_stateMachine"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_connection_state" name="A_connection_state"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_connector_message" name="A_connector_message">
    <ownedEnd xmi:id="A_connector_message-message" name="message" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_connector_message-message-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_connector_message-message-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_constrainedElement_constraint" name="A_constrainedElement_constraint">
    <ownedEnd xmi:id="A_constrainedElement_constraint-constraint" name="constraint" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_constrainedElement_constraint-constraint-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_constrainedElement_constraint-constraint-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_constrainingClassifier_classifierTemplateParameter" name="A_constrainingClassifier_classifierTemplateParameter">
    <ownedEnd xmi:id="A_constrainingClassifier_classifierTemplateParameter-classifierTemplateParameter" name="classifierTemplateParameter" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_constrainingClassifier_classifierTemplateParameter-classifierTemplateParameter-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_constrainingClassifier_classifierTemplateParameter-classifierTemplateParameter-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_containedEdge_inGroup" name="A_containedEdge_inGroup" isDerived="true"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_containedNode_inGroup" name="A_containedNode_inGroup" isDerived="true"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_context_action" name="A_context_action" isDerived="true">
    <ownedEnd xmi:id="A_context_action-action" name="action" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_context_action-action-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_context_action-action-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_context_behavior" name="A_context_behavior" isDerived="true">
    <ownedEnd xmi:id="A_context_behavior-behavior" name="behavior" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_context_behavior-behavior-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_context_behavior-behavior-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_contract_connector" name="A_contract_connector">
    <ownedEnd xmi:id="A_contract_connector-connector" name="connector" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_contract_connector-connector-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_contract_connector-connector-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_contract_interfaceRealization" name="A_contract_interfaceRealization">
    <ownedEnd xmi:id="A_contract_interfaceRealization-interfaceRealization" name="interfaceRealization" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_contract_interfaceRealization-interfaceRealization-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_contract_interfaceRealization-interfaceRealization-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_contract_substitution" name="A_contract_substitution">
    <ownedEnd xmi:id="A_contract_substitution-substitution" name="substitution" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_contract_substitution-substitution-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_contract_substitution-substitution-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_conveyed_informationFlow" name="A_conveyed_informationFlow">
    <ownedEnd xmi:id="A_conveyed_informationFlow-informationFlow" name="informationFlow" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_conveyed_informationFlow-informationFlow-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_conveyed_informationFlow-informationFlow-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_covered_coveredBy" name="A_covered_coveredBy">
    <ownedComment xmi:id="A_covered_coveredBy-_ownedComment.0">
      <body>This association shows the lifelines that make up an interaction. A lifeline may be part of more than one interaction use.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_covered_events" name="A_covered_events">
    <ownedEnd xmi:id="A_covered_events-events" name="events" visibility="public" isOrdered="true">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_covered_events-events-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_covered_events-events-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_covered_stateInvariant" name="A_covered_stateInvariant">
    <ownedEnd xmi:id="A_covered_stateInvariant-stateInvariant" name="stateInvariant" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_covered_stateInvariant-stateInvariant-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_covered_stateInvariant-stateInvariant-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_decider_clause" name="A_decider_clause">
    <ownedEnd xmi:id="A_decider_clause-clause" name="clause" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_decider_clause-clause-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_decider_loopNode" name="A_decider_loopNode">
    <ownedEnd xmi:id="A_decider_loopNode-loopNode" name="loopNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_decider_loopNode-loopNode-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_decisionInputFlow_decisionNode" name="A_decisionInputFlow_decisionNode">
    <ownedEnd xmi:id="A_decisionInputFlow_decisionNode-decisionNode" name="decisionNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_decisionInputFlow_decisionNode-decisionNode-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_decisionInput_decisionNode" name="A_decisionInput_decisionNode">
    <ownedEnd xmi:id="A_decisionInput_decisionNode-decisionNode" name="decisionNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_decisionInput_decisionNode-decisionNode-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_decisionInput_decisionNode-decisionNode-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_decomposedAs_lifeline" name="A_decomposedAs_lifeline">
    <ownedEnd xmi:id="A_decomposedAs_lifeline-lifeline" name="lifeline" visibility="public"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_defaultValue_owningParameter" name="A_defaultValue_owningParameter">
    <ownedEnd xmi:id="A_defaultValue_owningParameter-owningParameter" name="owningParameter" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_defaultValue_owningParameter-owningParameter-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_defaultValue_owningProperty" name="A_defaultValue_owningProperty">
    <ownedEnd xmi:id="A_defaultValue_owningProperty-owningProperty" name="owningProperty" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_defaultValue_owningProperty-owningProperty-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_default_templateParameter" name="A_default_templateParameter">
    <ownedEnd xmi:id="A_default_templateParameter-templateParameter" name="templateParameter" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_default_templateParameter-templateParameter-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_default_templateParameter-templateParameter-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_deferrableTrigger_state" name="A_deferrableTrigger_state">
    <ownedEnd xmi:id="A_deferrableTrigger_state-state" name="state" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_deferrableTrigger_state-state-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_definingEnd_connectorEnd" name="A_definingEnd_connectorEnd" isDerived="true">
    <ownedEnd xmi:id="A_definingEnd_connectorEnd-connectorEnd" name="connectorEnd" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_definingEnd_connectorEnd-connectorEnd-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_definingEnd_connectorEnd-connectorEnd-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_definingFeature_slot" name="A_definingFeature_slot">
    <ownedEnd xmi:id="A_definingFeature_slot-slot" name="slot" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_definingFeature_slot-slot-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_definingFeature_slot-slot-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_deployedArtifact_deployment" name="A_deployedArtifact_deployment">
    <ownedEnd xmi:id="A_deployedArtifact_deployment-deployment" name="deployment" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_deployedArtifact_deployment-deployment-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_deployedArtifact_deployment-deployment-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_deployedElement_deploymentTarget" name="A_deployedElement_deploymentTarget" isDerived="true">
    <ownedEnd xmi:id="A_deployedElement_deploymentTarget-deploymentTarget" name="deploymentTarget" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_deployedElement_deploymentTarget-deploymentTarget-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_deployedElement_deploymentTarget-deploymentTarget-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_deployment_location" name="A_deployment_location"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_destroyAt_linkEndDestructionData" name="A_destroyAt_linkEndDestructionData">
    <ownedEnd xmi:id="A_destroyAt_linkEndDestructionData-linkEndDestructionData" name="linkEndDestructionData" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_destroyAt_linkEndDestructionData-linkEndDestructionData-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_doActivity_state" name="A_doActivity_state">
    <ownedEnd xmi:id="A_doActivity_state-state" name="state" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_doActivity_state-state-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_edge_activity" name="A_edge_activity"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_edge_inPartition" name="A_edge_inPartition"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_edge_inStructuredNode" name="A_edge_inStructuredNode"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_effect_transition" name="A_effect_transition">
    <ownedEnd xmi:id="A_effect_transition-transition" name="transition" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_effect_transition-transition-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_elementImport_importingNamespace" name="A_elementImport_importingNamespace"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_endData_createLinkAction" name="A_endData_createLinkAction">
    <generalization xmi:id="A_endData_createLinkAction-_generalization.0"/>
    <ownedEnd xmi:id="A_endData_createLinkAction-createLinkAction" name="createLinkAction" visibility="public"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_endData_destroyLinkAction" name="A_endData_destroyLinkAction">
    <generalization xmi:id="A_endData_destroyLinkAction-_generalization.0"/>
    <ownedEnd xmi:id="A_endData_destroyLinkAction-destroyLinkAction" name="destroyLinkAction" visibility="public"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_endData_linkAction" name="A_endData_linkAction">
    <ownedEnd xmi:id="A_endData_linkAction-linkAction" name="linkAction" visibility="public"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_endType_association" name="A_endType_association" isDerived="true">
    <ownedEnd xmi:id="A_endType_association-association" name="association" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_endType_association-association-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_endType_association-association-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_end_connector" name="A_end_connector">
    <ownedEnd xmi:id="A_end_connector-connector" name="connector" visibility="public"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_end_linkEndData" name="A_end_linkEndData">
    <ownedEnd xmi:id="A_end_linkEndData-linkEndData" name="linkEndData" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_end_linkEndData-linkEndData-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_end_linkEndData-linkEndData-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_end_readLinkObjectEndAction" name="A_end_readLinkObjectEndAction">
    <ownedEnd xmi:id="A_end_readLinkObjectEndAction-readLinkObjectEndAction" name="readLinkObjectEndAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_end_readLinkObjectEndAction-readLinkObjectEndAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_end_role" name="A_end_role"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_entry_connectionPointReference" name="A_entry_connectionPointReference">
    <ownedEnd xmi:id="A_entry_connectionPointReference-connectionPointReference" name="connectionPointReference" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_entry_connectionPointReference-connectionPointReference-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_entry_state" name="A_entry_state">
    <ownedEnd xmi:id="A_entry_state-state" name="state" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_entry_state-state-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_event_durationObservation" name="A_event_durationObservation">
    <ownedEnd xmi:id="A_event_durationObservation-durationObservation" name="durationObservation" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_event_durationObservation-durationObservation-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_event_durationObservation-durationObservation-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_event_timeObservation" name="A_event_timeObservation">
    <ownedEnd xmi:id="A_event_timeObservation-timeObservation" name="timeObservation" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_event_timeObservation-timeObservation-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_event_timeObservation-timeObservation-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_event_trigger" name="A_event_trigger">
    <ownedEnd xmi:id="A_event_trigger-trigger" name="trigger" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_event_trigger-trigger-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_event_trigger-trigger-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_exceptionInput_exceptionHandler" name="A_exceptionInput_exceptionHandler">
    <ownedEnd xmi:id="A_exceptionInput_exceptionHandler-exceptionHandler" name="exceptionHandler" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_exceptionInput_exceptionHandler-exceptionHandler-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_exceptionInput_exceptionHandler-exceptionHandler-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_exceptionType_exceptionHandler" name="A_exceptionType_exceptionHandler">
    <ownedEnd xmi:id="A_exceptionType_exceptionHandler-exceptionHandler" name="exceptionHandler" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_exceptionType_exceptionHandler-exceptionHandler-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_exceptionType_exceptionHandler-exceptionHandler-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_exception_raiseExceptionAction" name="A_exception_raiseExceptionAction">
    <ownedEnd xmi:id="A_exception_raiseExceptionAction-raiseExceptionAction" name="raiseExceptionAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_exception_raiseExceptionAction-raiseExceptionAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_executableNode_sequenceNode" name="A_executableNode_sequenceNode">
    <ownedEnd xmi:id="A_executableNode_sequenceNode-sequenceNode" name="sequenceNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_executableNode_sequenceNode-sequenceNode-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_execution_executionOccurrenceSpecification" name="A_execution_executionOccurrenceSpecification">
    <ownedEnd xmi:id="A_execution_executionOccurrenceSpecification-executionOccurrenceSpecification" name="executionOccurrenceSpecification" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_execution_executionOccurrenceSpecification-executionOccurrenceSpecification-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_execution_executionOccurrenceSpecification-executionOccurrenceSpecification-_upperValue" value="2"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_exit_connectionPointReference" name="A_exit_connectionPointReference">
    <ownedEnd xmi:id="A_exit_connectionPointReference-connectionPointReference" name="connectionPointReference" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_exit_connectionPointReference-connectionPointReference-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_exit_state" name="A_exit_state">
    <ownedEnd xmi:id="A_exit_state-state" name="state" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_exit_state-state-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_expr_duration" name="A_expr_duration">
    <ownedEnd xmi:id="A_expr_duration-duration" name="duration" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_expr_duration-duration-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_expr_timeExpression" name="A_expr_timeExpression">
    <ownedEnd xmi:id="A_expr_timeExpression-timeExpression" name="timeExpression" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_expr_timeExpression-timeExpression-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_extend_extension" name="A_extend_extension"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_extendedCase_extend" name="A_extendedCase_extend">
    <ownedEnd xmi:id="A_extendedCase_extend-extend" name="extend" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_extendedCase_extend-extend-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_extendedCase_extend-extend-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_extendedRegion_region" name="A_extendedRegion_region">
    <ownedEnd xmi:id="A_extendedRegion_region-region" name="region" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_extendedRegion_region-region-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_extendedSignature_redefinableTemplateSignature" name="A_extendedSignature_redefinableTemplateSignature">
    <ownedEnd xmi:id="A_extendedSignature_redefinableTemplateSignature-redefinableTemplateSignature" name="redefinableTemplateSignature" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_extendedSignature_redefinableTemplateSignature-redefinableTemplateSignature-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_extendedSignature_redefinableTemplateSignature-redefinableTemplateSignature-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_extendedStateMachine_stateMachine" name="A_extendedStateMachine_stateMachine">
    <ownedEnd xmi:id="A_extendedStateMachine_stateMachine-stateMachine" name="stateMachine" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_extendedStateMachine_stateMachine-stateMachine-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_extensionLocation_extension" name="A_extensionLocation_extension">
    <ownedEnd xmi:id="A_extensionLocation_extension-extension" name="extension" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_extensionLocation_extension-extension-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_extensionLocation_extension-extension-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_extensionPoint_useCase" name="A_extensionPoint_useCase"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_extension_metaclass" name="A_extension_metaclass" isDerived="true"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_feature_featuringClassifier" name="A_feature_featuringClassifier" isDerived="true"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_finish_executionSpecification" name="A_finish_executionSpecification">
    <ownedComment xmi:id="A_finish_executionSpecification-_ownedComment.0">
      <body>The event shows the time point at which the action completes execution.</body>
    </ownedComment>
    <ownedEnd xmi:id="A_finish_executionSpecification-executionSpecification" name="executionSpecification" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_finish_executionSpecification-executionSpecification-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_finish_executionSpecification-executionSpecification-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_first_testIdentityAction" name="A_first_testIdentityAction">
    <ownedEnd xmi:id="A_first_testIdentityAction-testIdentityAction" name="testIdentityAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_first_testIdentityAction-testIdentityAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_formalGate_interaction" name="A_formalGate_interaction">
    <ownedEnd xmi:id="A_formalGate_interaction-interaction" name="interaction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_formalGate_interaction-interaction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_formal_templateParameterSubstitution" name="A_formal_templateParameterSubstitution">
    <ownedEnd xmi:id="A_formal_templateParameterSubstitution-templateParameterSubstitution" name="templateParameterSubstitution" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_formal_templateParameterSubstitution-templateParameterSubstitution-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_formal_templateParameterSubstitution-templateParameterSubstitution-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_fragment_enclosingInteraction" name="A_fragment_enclosingInteraction"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_fragment_enclosingOperand" name="A_fragment_enclosingOperand"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_fromAction_actionInputPin" name="A_fromAction_actionInputPin">
    <ownedEnd xmi:id="A_fromAction_actionInputPin-actionInputPin" name="actionInputPin" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_fromAction_actionInputPin-actionInputPin-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_generalMachine_protocolConformance" name="A_generalMachine_protocolConformance">
    <ownedEnd xmi:id="A_generalMachine_protocolConformance-protocolConformance" name="protocolConformance" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_generalMachine_protocolConformance-protocolConformance-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_generalMachine_protocolConformance-protocolConformance-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_generalOrdering_interactionFragment" name="A_generalOrdering_interactionFragment">
    <ownedEnd xmi:id="A_generalOrdering_interactionFragment-interactionFragment" name="interactionFragment" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_generalOrdering_interactionFragment-interactionFragment-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_general_classifier" name="A_general_classifier" isDerived="true">
    <ownedEnd xmi:id="A_general_classifier-classifier" name="classifier" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_general_classifier-classifier-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_general_classifier-classifier-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_general_generalization" name="A_general_generalization">
    <ownedEnd xmi:id="A_general_generalization-generalization" name="generalization" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_general_generalization-generalization-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_general_generalization-generalization-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_generalizationSet_generalization" name="A_generalizationSet_generalization"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_generalization_specific" name="A_generalization_specific"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_group_inActivity" name="A_group_inActivity"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_guard_activityEdge" name="A_guard_activityEdge">
    <ownedEnd xmi:id="A_guard_activityEdge-activityEdge" name="activityEdge" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_guard_activityEdge-activityEdge-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_guard_interactionOperand" name="A_guard_interactionOperand">
    <ownedEnd xmi:id="A_guard_interactionOperand-interactionOperand" name="interactionOperand" visibility="public"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_guard_transition" name="A_guard_transition">
    <ownedEnd xmi:id="A_guard_transition-transition" name="transition" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_guard_transition-transition-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_handlerBody_exceptionHandler" name="A_handlerBody_exceptionHandler">
    <ownedEnd xmi:id="A_handlerBody_exceptionHandler-exceptionHandler" name="exceptionHandler" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_handlerBody_exceptionHandler-exceptionHandler-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_handlerBody_exceptionHandler-exceptionHandler-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_handler_protectedNode" name="A_handler_protectedNode"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_icon_stereotype" name="A_icon_stereotype">
    <ownedEnd xmi:id="A_icon_stereotype-stereotype" name="stereotype" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_icon_stereotype-stereotype-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_importedElement_elementImport" name="A_importedElement_elementImport">
    <ownedEnd xmi:id="A_importedElement_elementImport-elementImport" name="elementImport" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_importedElement_elementImport-elementImport-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_importedElement_elementImport-elementImport-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_importedMember_namespace" name="A_importedMember_namespace" isDerived="true">
    <ownedEnd xmi:id="A_importedMember_namespace-namespace" name="namespace" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_importedMember_namespace-namespace-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_importedMember_namespace-namespace-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_importedPackage_packageImport" name="A_importedPackage_packageImport">
    <ownedEnd xmi:id="A_importedPackage_packageImport-packageImport" name="packageImport" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_importedPackage_packageImport-packageImport-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_importedPackage_packageImport-packageImport-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_inInterruptibleRegion_node" name="A_inInterruptibleRegion_node"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_inPartition_node" name="A_inPartition_node"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_inState_objectNode" name="A_inState_objectNode">
    <ownedEnd xmi:id="A_inState_objectNode-objectNode" name="objectNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_inState_objectNode-objectNode-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_inState_objectNode-objectNode-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_include_includingCase" name="A_include_includingCase"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_incoming_target_node" name="A_incoming_target_node"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_incoming_target_vertex" name="A_incoming_target_vertex"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_informationSource_informationFlow" name="A_informationSource_informationFlow">
    <ownedEnd xmi:id="A_informationSource_informationFlow-informationFlow" name="informationFlow" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_informationSource_informationFlow-informationFlow-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_informationSource_informationFlow-informationFlow-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_informationTarget_informationFlow" name="A_informationTarget_informationFlow">
    <ownedEnd xmi:id="A_informationTarget_informationFlow-informationFlow" name="informationFlow" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_informationTarget_informationFlow-informationFlow-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_informationTarget_informationFlow-informationFlow-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_inheritedMember_classifier" name="A_inheritedMember_classifier" isDerived="true">
    <ownedEnd xmi:id="A_inheritedMember_classifier-classifier" name="classifier" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_inheritedMember_classifier-classifier-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_inheritedMember_classifier-classifier-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_inheritedParameter_redefinableTemplateSignature" name="A_inheritedParameter_redefinableTemplateSignature" isDerived="true">
    <ownedEnd xmi:id="A_inheritedParameter_redefinableTemplateSignature-redefinableTemplateSignature" name="redefinableTemplateSignature" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_inheritedParameter_redefinableTemplateSignature-redefinableTemplateSignature-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_inheritedParameter_redefinableTemplateSignature-redefinableTemplateSignature-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_inputElement_regionAsInput" name="A_inputElement_regionAsInput"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_inputValue_linkAction" name="A_inputValue_linkAction">
    <ownedEnd xmi:id="A_inputValue_linkAction-linkAction" name="linkAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_inputValue_linkAction-linkAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_inputValue_opaqueAction" name="A_inputValue_opaqueAction">
    <ownedEnd xmi:id="A_inputValue_opaqueAction-opaqueAction" name="opaqueAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_inputValue_opaqueAction-opaqueAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_input_action" name="A_input_action" isDerived="true">
    <ownedEnd xmi:id="A_input_action-action" name="action" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_input_action-action-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_insertAt_addStructuralFeatureValueAction" name="A_insertAt_addStructuralFeatureValueAction">
    <ownedEnd xmi:id="A_insertAt_addStructuralFeatureValueAction-addStructuralFeatureValueAction" name="addStructuralFeatureValueAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_insertAt_addStructuralFeatureValueAction-addStructuralFeatureValueAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_insertAt_addVariableValueAction" name="A_insertAt_addVariableValueAction">
    <ownedEnd xmi:id="A_insertAt_addVariableValueAction-addVariableValueAction" name="addVariableValueAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_insertAt_addVariableValueAction-addVariableValueAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_insertAt_linkEndCreationData" name="A_insertAt_linkEndCreationData">
    <ownedEnd xmi:id="A_insertAt_linkEndCreationData-linkEndCreationData" name="linkEndCreationData" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_insertAt_linkEndCreationData-linkEndCreationData-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_instance_instanceValue" name="A_instance_instanceValue">
    <ownedEnd xmi:id="A_instance_instanceValue-instanceValue" name="instanceValue" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_instance_instanceValue-instanceValue-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_instance_instanceValue-instanceValue-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_interfaceRealization_implementingClassifier" name="A_interfaceRealization_implementingClassifier"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_interruptingEdge_interrupts" name="A_interruptingEdge_interrupts"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_invariant_stateInvariant" name="A_invariant_stateInvariant">
    <ownedEnd xmi:id="A_invariant_stateInvariant-stateInvariant" name="stateInvariant" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_invariant_stateInvariant-stateInvariant-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_joinSpec_joinNode" name="A_joinSpec_joinNode">
    <ownedEnd xmi:id="A_joinSpec_joinNode-joinNode" name="joinNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_joinSpec_joinNode-joinNode-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_lifeline_interaction" name="A_lifeline_interaction"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_localPostcondition_action" name="A_localPostcondition_action">
    <ownedEnd xmi:id="A_localPostcondition_action-action" name="action" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_localPostcondition_action-action-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_localPrecondition_action" name="A_localPrecondition_action">
    <ownedEnd xmi:id="A_localPrecondition_action-action" name="action" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_localPrecondition_action-action-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_loopVariableInput_loopNode" name="A_loopVariableInput_loopNode">
    <ownedEnd xmi:id="A_loopVariableInput_loopNode-loopNode" name="loopNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_loopVariableInput_loopNode-loopNode-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_loopVariable_loopNode" name="A_loopVariable_loopNode">
    <ownedEnd xmi:id="A_loopVariable_loopNode-loopNode" name="loopNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_loopVariable_loopNode-loopNode-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_lowerValue_owningLower" name="A_lowerValue_owningLower">
    <ownedEnd xmi:id="A_lowerValue_owningLower-owningLower" name="owningLower" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_lowerValue_owningLower-owningLower-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_manifestation_artifact" name="A_manifestation_artifact">
    <ownedEnd xmi:id="A_manifestation_artifact-artifact" name="artifact" visibility="public"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_mapping_abstraction" name="A_mapping_abstraction">
    <ownedEnd xmi:id="A_mapping_abstraction-abstraction" name="abstraction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_mapping_abstraction-abstraction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_max_durationInterval" name="A_max_durationInterval">
    <generalization xmi:id="A_max_durationInterval-_generalization.0"/>
    <ownedEnd xmi:id="A_max_durationInterval-durationInterval" name="durationInterval" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_max_durationInterval-durationInterval-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_max_durationInterval-durationInterval-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_max_interval" name="A_max_interval">
    <ownedEnd xmi:id="A_max_interval-interval" name="interval" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_max_interval-interval-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_max_interval-interval-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_max_timeInterval" name="A_max_timeInterval">
    <generalization xmi:id="A_max_timeInterval-_generalization.0"/>
    <ownedEnd xmi:id="A_max_timeInterval-timeInterval" name="timeInterval" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_max_timeInterval-timeInterval-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_max_timeInterval-timeInterval-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_maxint_interactionConstraint" name="A_maxint_interactionConstraint">
    <ownedEnd xmi:id="A_maxint_interactionConstraint-interactionConstraint" name="interactionConstraint" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_maxint_interactionConstraint-interactionConstraint-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_memberEnd_association" name="A_memberEnd_association"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_member_memberNamespace" name="A_member_memberNamespace" isDerived="true">
    <ownedEnd xmi:id="A_member_memberNamespace-memberNamespace" name="memberNamespace" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_member_memberNamespace-memberNamespace-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_member_memberNamespace-memberNamespace-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_mergedPackage_packageMerge" name="A_mergedPackage_packageMerge">
    <ownedEnd xmi:id="A_mergedPackage_packageMerge-packageMerge" name="packageMerge" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_mergedPackage_packageMerge-packageMerge-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_mergedPackage_packageMerge-packageMerge-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_message_considerIgnoreFragment" name="A_message_considerIgnoreFragment">
    <ownedEnd xmi:id="A_message_considerIgnoreFragment-considerIgnoreFragment" name="considerIgnoreFragment" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_message_considerIgnoreFragment-considerIgnoreFragment-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_message_considerIgnoreFragment-considerIgnoreFragment-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_message_interaction" name="A_message_interaction"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_message_messageEnd" name="A_message_messageEnd">
    <ownedEnd xmi:id="A_message_messageEnd-messageEnd" name="messageEnd" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_message_messageEnd-messageEnd-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_message_messageEnd-messageEnd-_upperValue" value="2"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_metaclassReference_profile" name="A_metaclassReference_profile">
    <ownedEnd xmi:id="A_metaclassReference_profile-profile" name="profile" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_metaclassReference_profile-profile-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_metamodelReference_profile" name="A_metamodelReference_profile">
    <ownedEnd xmi:id="A_metamodelReference_profile-profile" name="profile" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_metamodelReference_profile-profile-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_method_specification" name="A_method_specification"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_min_durationInterval" name="A_min_durationInterval">
    <generalization xmi:id="A_min_durationInterval-_generalization.0"/>
    <ownedEnd xmi:id="A_min_durationInterval-durationInterval" name="durationInterval" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_min_durationInterval-durationInterval-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_min_durationInterval-durationInterval-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_min_interval" name="A_min_interval">
    <ownedEnd xmi:id="A_min_interval-interval" name="interval" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_min_interval-interval-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_min_interval-interval-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_min_timeInterval" name="A_min_timeInterval">
    <generalization xmi:id="A_min_timeInterval-_generalization.0"/>
    <ownedEnd xmi:id="A_min_timeInterval-timeInterval" name="timeInterval" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_min_timeInterval-timeInterval-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_min_timeInterval-timeInterval-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_minint_interactionConstraint" name="A_minint_interactionConstraint">
    <ownedEnd xmi:id="A_minint_interactionConstraint-interactionConstraint" name="interactionConstraint" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_minint_interactionConstraint-interactionConstraint-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_nameExpression_namedElement" name="A_nameExpression_namedElement">
    <ownedEnd xmi:id="A_nameExpression_namedElement-namedElement" name="namedElement" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_nameExpression_namedElement-namedElement-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_navigableOwnedEnd_association" name="A_navigableOwnedEnd_association">
    <ownedEnd xmi:id="A_navigableOwnedEnd_association-association" name="association" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_navigableOwnedEnd_association-association-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_nestedArtifact_artifact" name="A_nestedArtifact_artifact">
    <ownedEnd xmi:id="A_nestedArtifact_artifact-artifact" name="artifact" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_nestedArtifact_artifact-artifact-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_nestedClassifier_class" name="A_nestedClassifier_class">
    <ownedEnd xmi:id="A_nestedClassifier_class-class" name="class" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_nestedClassifier_class-class-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_nestedClassifier_interface" name="A_nestedClassifier_interface">
    <ownedEnd xmi:id="A_nestedClassifier_interface-interface" name="interface" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_nestedClassifier_interface-interface-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_nestedNode_node" name="A_nestedNode_node">
    <ownedEnd xmi:id="A_nestedNode_node-node" name="node" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_nestedNode_node-node-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_nestedPackage_nestingPackage" name="A_nestedPackage_nestingPackage"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_newClassifier_reclassifyObjectAction" name="A_newClassifier_reclassifyObjectAction">
    <ownedEnd xmi:id="A_newClassifier_reclassifyObjectAction-reclassifyObjectAction" name="reclassifyObjectAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_newClassifier_reclassifyObjectAction-reclassifyObjectAction-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_newClassifier_reclassifyObjectAction-reclassifyObjectAction-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_node_activity" name="A_node_activity"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_node_inStructuredNode" name="A_node_inStructuredNode"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_object_clearAssociationAction" name="A_object_clearAssociationAction">
    <ownedEnd xmi:id="A_object_clearAssociationAction-clearAssociationAction" name="clearAssociationAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_object_clearAssociationAction-clearAssociationAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_object_readIsClassifiedObjectAction" name="A_object_readIsClassifiedObjectAction">
    <ownedEnd xmi:id="A_object_readIsClassifiedObjectAction-readIsClassifiedObjectAction" name="readIsClassifiedObjectAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_object_readIsClassifiedObjectAction-readIsClassifiedObjectAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_object_readLinkObjectEndAction" name="A_object_readLinkObjectEndAction">
    <ownedEnd xmi:id="A_object_readLinkObjectEndAction-readLinkObjectEndAction" name="readLinkObjectEndAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_object_readLinkObjectEndAction-readLinkObjectEndAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_object_readLinkObjectEndQualifierAction" name="A_object_readLinkObjectEndQualifierAction">
    <ownedEnd xmi:id="A_object_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction" name="readLinkObjectEndQualifierAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_object_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_object_reclassifyObjectAction" name="A_object_reclassifyObjectAction">
    <ownedEnd xmi:id="A_object_reclassifyObjectAction-reclassifyObjectAction" name="reclassifyObjectAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_object_reclassifyObjectAction-reclassifyObjectAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_object_startClassifierBehaviorAction" name="A_object_startClassifierBehaviorAction">
    <ownedEnd xmi:id="A_object_startClassifierBehaviorAction-startClassifierBehaviorAction" name="startClassifierBehaviorAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_object_startClassifierBehaviorAction-startClassifierBehaviorAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_object_startObjectBehaviorAction" name="A_object_startObjectBehaviorAction">
    <ownedEnd xmi:id="A_object_startObjectBehaviorAction-startObjectBehaviorAction" name="startObjectBehaviorAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_object_startObjectBehaviorAction-startObjectBehaviorAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_object_structuralFeatureAction" name="A_object_structuralFeatureAction">
    <ownedEnd xmi:id="A_object_structuralFeatureAction-structuralFeatureAction" name="structuralFeatureAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_object_structuralFeatureAction-structuralFeatureAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_object_unmarshallAction" name="A_object_unmarshallAction">
    <ownedEnd xmi:id="A_object_unmarshallAction-unmarshallAction" name="unmarshallAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_object_unmarshallAction-unmarshallAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_observation_duration" name="A_observation_duration">
    <ownedEnd xmi:id="A_observation_duration-duration" name="duration" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_observation_duration-duration-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_observation_timeExpression" name="A_observation_timeExpression">
    <ownedEnd xmi:id="A_observation_timeExpression-timeExpression" name="timeExpression" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_observation_timeExpression-timeExpression-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_oldClassifier_reclassifyObjectAction" name="A_oldClassifier_reclassifyObjectAction">
    <ownedEnd xmi:id="A_oldClassifier_reclassifyObjectAction-reclassifyObjectAction" name="reclassifyObjectAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_oldClassifier_reclassifyObjectAction-reclassifyObjectAction-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_oldClassifier_reclassifyObjectAction-reclassifyObjectAction-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_onPort_invocationAction" name="A_onPort_invocationAction">
    <ownedEnd xmi:id="A_onPort_invocationAction-invocationAction" name="invocationAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_onPort_invocationAction-invocationAction-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_onPort_invocationAction-invocationAction-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_operand_combinedFragment" name="A_operand_combinedFragment">
    <ownedEnd xmi:id="A_operand_combinedFragment-combinedFragment" name="combinedFragment" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_operand_combinedFragment-combinedFragment-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_operand_expression" name="A_operand_expression">
    <ownedEnd xmi:id="A_operand_expression-expression" name="expression" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_operand_expression-expression-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_operation_callEvent" name="A_operation_callEvent">
    <ownedEnd xmi:id="A_operation_callEvent-callEvent" name="callEvent" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_operation_callEvent-callEvent-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_operation_callEvent-callEvent-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_operation_callOperationAction" name="A_operation_callOperationAction">
    <ownedEnd xmi:id="A_operation_callOperationAction-callOperationAction" name="callOperationAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_operation_callOperationAction-callOperationAction-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_operation_callOperationAction-callOperationAction-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_operation_templateParameter_parameteredElement" name="A_operation_templateParameter_parameteredElement"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_opposite_property" name="A_opposite_property" isDerived="true">
    <ownedEnd xmi:id="A_opposite_property-property" name="property" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_opposite_property-property-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_outgoing_source_node" name="A_outgoing_source_node"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_outgoing_source_vertex" name="A_outgoing_source_vertex"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_outputElement_regionAsOutput" name="A_outputElement_regionAsOutput"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_outputValue_opaqueAction" name="A_outputValue_opaqueAction">
    <ownedEnd xmi:id="A_outputValue_opaqueAction-opaqueAction" name="opaqueAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_outputValue_opaqueAction-opaqueAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_output_action" name="A_output_action" isDerived="true">
    <ownedEnd xmi:id="A_output_action-action" name="action" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_output_action-action-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedActual_templateParameterSubstitution" name="A_ownedActual_templateParameterSubstitution">
    <generalization xmi:id="A_ownedActual_templateParameterSubstitution-_generalization.0"/>
    <ownedEnd xmi:id="A_ownedActual_templateParameterSubstitution-templateParameterSubstitution" name="templateParameterSubstitution" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedActual_templateParameterSubstitution-templateParameterSubstitution-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedAttribute_artifact" name="A_ownedAttribute_artifact">
    <ownedEnd xmi:id="A_ownedAttribute_artifact-artifact" name="artifact" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedAttribute_artifact-artifact-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedAttribute_class" name="A_ownedAttribute_class"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedAttribute_datatype" name="A_ownedAttribute_datatype"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedAttribute_interface" name="A_ownedAttribute_interface"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedAttribute_owningSignal" name="A_ownedAttribute_owningSignal">
    <ownedEnd xmi:id="A_ownedAttribute_owningSignal-owningSignal" name="owningSignal" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedAttribute_owningSignal-owningSignal-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedAttribute_structuredClassifier" name="A_ownedAttribute_structuredClassifier">
    <generalization xmi:id="A_ownedAttribute_structuredClassifier-_generalization.0"/>
    <ownedEnd xmi:id="A_ownedAttribute_structuredClassifier-structuredClassifier" name="structuredClassifier" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedAttribute_structuredClassifier-structuredClassifier-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedBehavior_behavioredClassifier" name="A_ownedBehavior_behavioredClassifier">
    <ownedEnd xmi:id="A_ownedBehavior_behavioredClassifier-behavioredClassifier" name="behavioredClassifier" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedBehavior_behavioredClassifier-behavioredClassifier-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedComment_owningElement" name="A_ownedComment_owningElement">
    <ownedEnd xmi:id="A_ownedComment_owningElement-owningElement" name="owningElement" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedComment_owningElement-owningElement-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedConnector_structuredClassifier" name="A_ownedConnector_structuredClassifier">
    <ownedEnd xmi:id="A_ownedConnector_structuredClassifier-structuredClassifier" name="structuredClassifier" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedConnector_structuredClassifier-structuredClassifier-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedDefault_templateParameter" name="A_ownedDefault_templateParameter">
    <generalization xmi:id="A_ownedDefault_templateParameter-_generalization.0"/>
    <ownedEnd xmi:id="A_ownedDefault_templateParameter-templateParameter" name="templateParameter" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedDefault_templateParameter-templateParameter-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedElement_owner" name="A_ownedElement_owner" isDerived="true"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedEnd_extension" name="A_ownedEnd_extension">
    <ownedEnd xmi:id="A_ownedEnd_extension-extension" name="extension" visibility="public"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedEnd_owningAssociation" name="A_ownedEnd_owningAssociation"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedLiteral_enumeration" name="A_ownedLiteral_enumeration"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedMember_namespace" name="A_ownedMember_namespace" isDerived="true"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedOperation_artifact" name="A_ownedOperation_artifact">
    <ownedEnd xmi:id="A_ownedOperation_artifact-artifact" name="artifact" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedOperation_artifact-artifact-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedOperation_class" name="A_ownedOperation_class"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedOperation_datatype" name="A_ownedOperation_datatype"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedOperation_interface" name="A_ownedOperation_interface"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedParameterSet_behavior" name="A_ownedParameterSet_behavior">
    <ownedEnd xmi:id="A_ownedParameterSet_behavior-behavior" name="behavior" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedParameterSet_behavior-behavior-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedParameterSet_behavioralFeature" name="A_ownedParameterSet_behavioralFeature">
    <ownedEnd xmi:id="A_ownedParameterSet_behavioralFeature-behavioralFeature" name="behavioralFeature" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedParameterSet_behavioralFeature-behavioralFeature-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedParameter_behavior" name="A_ownedParameter_behavior">
    <ownedEnd xmi:id="A_ownedParameter_behavior-behavior" name="behavior" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedParameter_behavior-behavior-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedParameter_operation" name="A_ownedParameter_operation"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedParameter_ownerFormalParam" name="A_ownedParameter_ownerFormalParam">
    <ownedEnd xmi:id="A_ownedParameter_ownerFormalParam-ownerFormalParam" name="ownerFormalParam" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedParameter_ownerFormalParam-ownerFormalParam-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedParameter_signature" name="A_ownedParameter_signature"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedParameteredElement_owningTemplateParameter" name="A_ownedParameteredElement_owningTemplateParameter"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedPort_encapsulatedClassifier" name="A_ownedPort_encapsulatedClassifier" isDerived="true">
    <ownedEnd xmi:id="A_ownedPort_encapsulatedClassifier-encapsulatedClassifier" name="encapsulatedClassifier" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedPort_encapsulatedClassifier-encapsulatedClassifier-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedReception_class" name="A_ownedReception_class">
    <ownedEnd xmi:id="A_ownedReception_class-class" name="class" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedReception_class-class-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedReception_interface" name="A_ownedReception_interface">
    <ownedEnd xmi:id="A_ownedReception_interface-interface" name="interface" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedReception_interface-interface-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedRule_context" name="A_ownedRule_context"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedStereotype_owningPackage" name="A_ownedStereotype_owningPackage" isDerived="true">
    <generalization xmi:id="A_ownedStereotype_owningPackage-_generalization.0"/>
    <ownedEnd xmi:id="A_ownedStereotype_owningPackage-owningPackage" name="owningPackage" visibility="public"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedTemplateSignature_classifier" name="A_ownedTemplateSignature_classifier"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedTemplateSignature_template" name="A_ownedTemplateSignature_template"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedType_package" name="A_ownedType_package"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_ownedUseCase_classifier" name="A_ownedUseCase_classifier">
    <ownedEnd xmi:id="A_ownedUseCase_classifier-classifier" name="classifier" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedUseCase_classifier-classifier-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_packageImport_importingNamespace" name="A_packageImport_importingNamespace"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_packageMerge_receivingPackage" name="A_packageMerge_receivingPackage"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_packagedElement_component" name="A_packagedElement_component">
    <ownedEnd xmi:id="A_packagedElement_component-component" name="component" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_packagedElement_component-component-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_packagedElement_owningPackage" name="A_packagedElement_owningPackage">
    <ownedEnd xmi:id="A_packagedElement_owningPackage-owningPackage" name="owningPackage" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_packagedElement_owningPackage-owningPackage-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_parameterSet_parameter" name="A_parameterSet_parameter"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_parameterSubstitution_templateBinding" name="A_parameterSubstitution_templateBinding"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_parameter_activityParameterNode" name="A_parameter_activityParameterNode">
    <ownedEnd xmi:id="A_parameter_activityParameterNode-activityParameterNode" name="activityParameterNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_parameter_activityParameterNode-activityParameterNode-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_parameter_activityParameterNode-activityParameterNode-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_parameter_templateSignature" name="A_parameter_templateSignature">
    <ownedEnd xmi:id="A_parameter_templateSignature-templateSignature" name="templateSignature" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_parameter_templateSignature-templateSignature-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_parameter_templateSignature-templateSignature-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_parameteredElement_templateParameter" name="A_parameteredElement_templateParameter"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_partWithPort_connectorEnd" name="A_partWithPort_connectorEnd">
    <ownedEnd xmi:id="A_partWithPort_connectorEnd-connectorEnd" name="connectorEnd" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_partWithPort_connectorEnd-connectorEnd-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_partWithPort_connectorEnd-connectorEnd-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_part_structuredClassifier" name="A_part_structuredClassifier" isDerived="true">
    <ownedEnd xmi:id="A_part_structuredClassifier-structuredClassifier" name="structuredClassifier" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_part_structuredClassifier-structuredClassifier-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_partition_activity" name="A_partition_activity">
    <ownedEnd xmi:id="A_partition_activity-activity" name="activity" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_partition_activity-activity-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_port_trigger" name="A_port_trigger">
    <ownedEnd xmi:id="A_port_trigger-trigger" name="trigger" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_port_trigger-trigger-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_port_trigger-trigger-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_postCondition_owningTransition" name="A_postCondition_owningTransition">
    <ownedEnd xmi:id="A_postCondition_owningTransition-owningTransition" name="owningTransition" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_postCondition_owningTransition-owningTransition-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_postcondition_behavior" name="A_postcondition_behavior">
    <ownedEnd xmi:id="A_postcondition_behavior-behavior" name="behavior" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_postcondition_behavior-behavior-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_postcondition_postContext" name="A_postcondition_postContext">
    <ownedEnd xmi:id="A_postcondition_postContext-postContext" name="postContext" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_postcondition_postContext-postContext-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_powertypeExtent_powertype" name="A_powertypeExtent_powertype"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_preCondition_protocolTransition" name="A_preCondition_protocolTransition">
    <generalization xmi:id="A_preCondition_protocolTransition-_generalization.0"/>
    <ownedEnd xmi:id="A_preCondition_protocolTransition-protocolTransition" name="protocolTransition" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_preCondition_protocolTransition-protocolTransition-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_precondition_behavior" name="A_precondition_behavior">
    <ownedEnd xmi:id="A_precondition_behavior-behavior" name="behavior" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_precondition_behavior-behavior-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_precondition_preContext" name="A_precondition_preContext">
    <ownedEnd xmi:id="A_precondition_preContext-preContext" name="preContext" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_precondition_preContext-preContext-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_predecessorClause_successorClause" name="A_predecessorClause_successorClause"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_profileApplication_applyingPackage" name="A_profileApplication_applyingPackage"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_profile_stereotype" name="A_profile_stereotype" isDerived="true">
    <ownedEnd xmi:id="A_profile_stereotype-stereotype" name="stereotype" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_profile_stereotype-stereotype-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_profile_stereotype-stereotype-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_protocol_interface" name="A_protocol_interface">
    <ownedEnd xmi:id="A_protocol_interface-interface" name="interface" visibility="public">
      <ownedComment xmi:id="A_protocol_interface-interface-_ownedComment.0">
        <body>Specifies the namespace in which the protocol state machine is defined.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_protocol_interface-interface-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_protocol_port" name="A_protocol_port">
    <ownedEnd xmi:id="A_protocol_port-port" name="port" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_protocol_port-port-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_protocol_port-port-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_provided_component" name="A_provided_component" isDerived="true">
    <ownedEnd xmi:id="A_provided_component-component" name="component" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_provided_component-component-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_provided_component-component-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_provided_port" name="A_provided_port" isDerived="true">
    <ownedEnd xmi:id="A_provided_port-port" name="port" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_provided_port-port-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_provided_port-port-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_qualifier_associationEnd" name="A_qualifier_associationEnd"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_qualifier_linkEndData" name="A_qualifier_linkEndData">
    <ownedEnd xmi:id="A_qualifier_linkEndData-linkEndData" name="linkEndData" visibility="public"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_qualifier_qualifierValue" name="A_qualifier_qualifierValue">
    <ownedEnd xmi:id="A_qualifier_qualifierValue-qualifierValue" name="qualifierValue" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_qualifier_qualifierValue-qualifierValue-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_qualifier_qualifierValue-qualifierValue-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_qualifier_readLinkObjectEndQualifierAction" name="A_qualifier_readLinkObjectEndQualifierAction">
    <ownedEnd xmi:id="A_qualifier_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction" name="readLinkObjectEndQualifierAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_qualifier_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_raisedException_behavioralFeature" name="A_raisedException_behavioralFeature">
    <ownedEnd xmi:id="A_raisedException_behavioralFeature-behavioralFeature" name="behavioralFeature" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_raisedException_behavioralFeature-behavioralFeature-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_raisedException_behavioralFeature-behavioralFeature-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_raisedException_operation" name="A_raisedException_operation">
    <ownedEnd xmi:id="A_raisedException_operation-operation" name="operation" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_raisedException_operation-operation-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_raisedException_operation-operation-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_realization_abstraction_component" name="A_realization_abstraction_component"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_realization_abstraction_flow" name="A_realization_abstraction_flow">
    <ownedEnd xmi:id="A_realization_abstraction_flow-abstraction" name="abstraction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_realization_abstraction_flow-abstraction-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_realization_abstraction_flow-abstraction-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_realizingActivityEdge_informationFlow" name="A_realizingActivityEdge_informationFlow">
    <ownedEnd xmi:id="A_realizingActivityEdge_informationFlow-informationFlow" name="informationFlow" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_realizingActivityEdge_informationFlow-informationFlow-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_realizingActivityEdge_informationFlow-informationFlow-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_realizingClassifier_componentRealization" name="A_realizingClassifier_componentRealization">
    <ownedEnd xmi:id="A_realizingClassifier_componentRealization-componentRealization" name="componentRealization" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_realizingClassifier_componentRealization-componentRealization-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_realizingClassifier_componentRealization-componentRealization-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_realizingConnector_informationFlow" name="A_realizingConnector_informationFlow">
    <ownedEnd xmi:id="A_realizingConnector_informationFlow-informationFlow" name="informationFlow" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_realizingConnector_informationFlow-informationFlow-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_realizingConnector_informationFlow-informationFlow-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_realizingMessage_informationFlow" name="A_realizingMessage_informationFlow">
    <ownedEnd xmi:id="A_realizingMessage_informationFlow-informationFlow" name="informationFlow" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_realizingMessage_informationFlow-informationFlow-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_realizingMessage_informationFlow-informationFlow-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_receiveEvent_endMessage" name="A_receiveEvent_endMessage">
    <ownedEnd xmi:id="A_receiveEvent_endMessage-endMessage" name="endMessage" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_receiveEvent_endMessage-endMessage-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinedBehavior_behavior" name="A_redefinedBehavior_behavior">
    <ownedEnd xmi:id="A_redefinedBehavior_behavior-behavior" name="behavior" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinedBehavior_behavior-behavior-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_redefinedBehavior_behavior-behavior-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinedClassifier_classifier" name="A_redefinedClassifier_classifier">
    <ownedEnd xmi:id="A_redefinedClassifier_classifier-classifier" name="classifier" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinedClassifier_classifier-classifier-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_redefinedClassifier_classifier-classifier-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinedConnector_connector" name="A_redefinedConnector_connector">
    <ownedEnd xmi:id="A_redefinedConnector_connector-connector" name="connector" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinedConnector_connector-connector-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_redefinedConnector_connector-connector-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinedEdge_activityEdge" name="A_redefinedEdge_activityEdge">
    <ownedEnd xmi:id="A_redefinedEdge_activityEdge-activityEdge" name="activityEdge" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinedEdge_activityEdge-activityEdge-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_redefinedEdge_activityEdge-activityEdge-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinedElement_redefinableElement" name="A_redefinedElement_redefinableElement" isDerived="true">
    <ownedEnd xmi:id="A_redefinedElement_redefinableElement-redefinableElement" name="redefinableElement" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinedElement_redefinableElement-redefinableElement-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_redefinedElement_redefinableElement-redefinableElement-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinedInterface_interface" name="A_redefinedInterface_interface">
    <ownedEnd xmi:id="A_redefinedInterface_interface-interface" name="interface" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinedInterface_interface-interface-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_redefinedInterface_interface-interface-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinedNode_activityNode" name="A_redefinedNode_activityNode">
    <ownedEnd xmi:id="A_redefinedNode_activityNode-activityNode" name="activityNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinedNode_activityNode-activityNode-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_redefinedNode_activityNode-activityNode-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinedOperation_operation" name="A_redefinedOperation_operation">
    <ownedEnd xmi:id="A_redefinedOperation_operation-operation" name="operation" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinedOperation_operation-operation-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_redefinedOperation_operation-operation-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinedPort_port" name="A_redefinedPort_port">
    <ownedEnd xmi:id="A_redefinedPort_port-port" name="port" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinedPort_port-port-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_redefinedPort_port-port-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinedProperty_property" name="A_redefinedProperty_property">
    <ownedEnd xmi:id="A_redefinedProperty_property-property" name="property" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinedProperty_property-property-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_redefinedProperty_property-property-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinedState_state" name="A_redefinedState_state">
    <ownedEnd xmi:id="A_redefinedState_state-state" name="state" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinedState_state-state-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinedTransition_transition" name="A_redefinedTransition_transition">
    <ownedEnd xmi:id="A_redefinedTransition_transition-transition" name="transition" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinedTransition_transition-transition-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinitionContext_redefinableElement" name="A_redefinitionContext_redefinableElement" isDerived="true">
    <ownedEnd xmi:id="A_redefinitionContext_redefinableElement-redefinableElement" name="redefinableElement" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinitionContext_redefinableElement-redefinableElement-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_redefinitionContext_redefinableElement-redefinableElement-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinitionContext_region" name="A_redefinitionContext_region" isDerived="true">
    <generalization xmi:id="A_redefinitionContext_region-_generalization.0"/>
    <ownedEnd xmi:id="A_redefinitionContext_region-region" name="region" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinitionContext_region-region-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_redefinitionContext_region-region-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinitionContext_state" name="A_redefinitionContext_state" isDerived="true">
    <generalization xmi:id="A_redefinitionContext_state-_generalization.0"/>
    <ownedEnd xmi:id="A_redefinitionContext_state-state" name="state" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinitionContext_state-state-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_redefinitionContext_state-state-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_redefinitionContext_transition" name="A_redefinitionContext_transition" isDerived="true">
    <generalization xmi:id="A_redefinitionContext_transition-_generalization.0"/>
    <ownedEnd xmi:id="A_redefinitionContext_transition-transition" name="transition" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_redefinitionContext_transition-transition-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_redefinitionContext_transition-transition-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_reducer_reduceAction" name="A_reducer_reduceAction">
    <ownedEnd xmi:id="A_reducer_reduceAction-reduceAction" name="reduceAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_reducer_reduceAction-reduceAction-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_reducer_reduceAction-reduceAction-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_referred_protocolTransition" name="A_referred_protocolTransition" isDerived="true">
    <ownedEnd xmi:id="A_referred_protocolTransition-protocolTransition" name="protocolTransition" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_referred_protocolTransition-protocolTransition-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_referred_protocolTransition-protocolTransition-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_refersTo_interactionUse" name="A_refersTo_interactionUse">
    <ownedEnd xmi:id="A_refersTo_interactionUse-interactionUse" name="interactionUse" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_refersTo_interactionUse-interactionUse-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_refersTo_interactionUse-interactionUse-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_region_state" name="A_region_state"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_region_stateMachine" name="A_region_stateMachine"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_relatedElement_relationship" name="A_relatedElement_relationship" isDerived="true">
    <ownedEnd xmi:id="A_relatedElement_relationship-relationship" name="relationship" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_relatedElement_relationship-relationship-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_relatedElement_relationship-relationship-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_removeAt_removeStructuralFeatureValueAction" name="A_removeAt_removeStructuralFeatureValueAction">
    <ownedEnd xmi:id="A_removeAt_removeStructuralFeatureValueAction-removeStructuralFeatureValueAction" name="removeStructuralFeatureValueAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_removeAt_removeStructuralFeatureValueAction-removeStructuralFeatureValueAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_removeAt_removeVariableValueAction" name="A_removeAt_removeVariableValueAction">
    <ownedEnd xmi:id="A_removeAt_removeVariableValueAction-removeVariableValueAction" name="removeVariableValueAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_removeAt_removeVariableValueAction-removeVariableValueAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_replyToCall_replyAction" name="A_replyToCall_replyAction">
    <ownedEnd xmi:id="A_replyToCall_replyAction-replyAction" name="replyAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_replyToCall_replyAction-replyAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_replyValue_replyAction" name="A_replyValue_replyAction">
    <ownedEnd xmi:id="A_replyValue_replyAction-replyAction" name="replyAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_replyValue_replyAction-replyAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_representation_classifier" name="A_representation_classifier">
    <generalization xmi:id="A_representation_classifier-_generalization.0"/>
    <ownedEnd xmi:id="A_representation_classifier-classifier" name="classifier" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_representation_classifier-classifier-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_represented_representation" name="A_represented_representation">
    <ownedEnd xmi:id="A_represented_representation-representation" name="representation" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_represented_representation-representation-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_represented_representation-representation-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_represents_activityPartition" name="A_represents_activityPartition">
    <ownedEnd xmi:id="A_represents_activityPartition-activityPartition" name="activityPartition" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_represents_activityPartition-activityPartition-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_represents_activityPartition-activityPartition-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_represents_lifeline" name="A_represents_lifeline">
    <ownedComment xmi:id="A_represents_lifeline-_ownedComment.0">
      <body>If a Part has multiplicity, multiple lifelines might be used to show it.</body>
    </ownedComment>
    <ownedEnd xmi:id="A_represents_lifeline-lifeline" name="lifeline" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_represents_lifeline-lifeline-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_represents_lifeline-lifeline-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_request_sendObjectAction" name="A_request_sendObjectAction">
    <generalization xmi:id="A_request_sendObjectAction-_generalization.0"/>
    <ownedEnd xmi:id="A_request_sendObjectAction-sendObjectAction" name="sendObjectAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_request_sendObjectAction-sendObjectAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_required_component" name="A_required_component" isDerived="true">
    <ownedEnd xmi:id="A_required_component-component" name="component" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_required_component-component-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_required_component-component-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_required_port" name="A_required_port" isDerived="true">
    <ownedEnd xmi:id="A_required_port-port" name="port" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_required_port-port-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_required_port-port-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_acceptEventAction" name="A_result_acceptEventAction">
    <ownedEnd xmi:id="A_result_acceptEventAction-acceptEventAction" name="acceptEventAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_acceptEventAction-acceptEventAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_callAction" name="A_result_callAction">
    <ownedEnd xmi:id="A_result_callAction-callAction" name="callAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_callAction-callAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_clearStructuralFeatureAction" name="A_result_clearStructuralFeatureAction">
    <ownedEnd xmi:id="A_result_clearStructuralFeatureAction-clearStructuralFeatureAction" name="clearStructuralFeatureAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_clearStructuralFeatureAction-clearStructuralFeatureAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_conditionalNode" name="A_result_conditionalNode">
    <ownedEnd xmi:id="A_result_conditionalNode-conditionalNode" name="conditionalNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_conditionalNode-conditionalNode-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_createLinkObjectAction" name="A_result_createLinkObjectAction">
    <ownedEnd xmi:id="A_result_createLinkObjectAction-createLinkObjectAction" name="createLinkObjectAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_createLinkObjectAction-createLinkObjectAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_createObjectAction" name="A_result_createObjectAction">
    <ownedEnd xmi:id="A_result_createObjectAction-createObjectAction" name="createObjectAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_createObjectAction-createObjectAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_loopNode" name="A_result_loopNode">
    <ownedEnd xmi:id="A_result_loopNode-loopNode" name="loopNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_loopNode-loopNode-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_opaqueExpression" name="A_result_opaqueExpression" isDerived="true">
    <ownedEnd xmi:id="A_result_opaqueExpression-opaqueExpression" name="opaqueExpression" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_opaqueExpression-opaqueExpression-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_result_opaqueExpression-opaqueExpression-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_readExtentAction" name="A_result_readExtentAction">
    <ownedEnd xmi:id="A_result_readExtentAction-readExtentAction" name="readExtentAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_readExtentAction-readExtentAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_readIsClassifiedObjectAction" name="A_result_readIsClassifiedObjectAction">
    <ownedEnd xmi:id="A_result_readIsClassifiedObjectAction-readIsClassifiedObjectAction" name="readIsClassifiedObjectAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_readIsClassifiedObjectAction-readIsClassifiedObjectAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_readLinkAction" name="A_result_readLinkAction">
    <ownedEnd xmi:id="A_result_readLinkAction-readLinkAction" name="readLinkAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_readLinkAction-readLinkAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_readLinkObjectEndAction" name="A_result_readLinkObjectEndAction">
    <ownedEnd xmi:id="A_result_readLinkObjectEndAction-readLinkObjectEndAction" name="readLinkObjectEndAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_readLinkObjectEndAction-readLinkObjectEndAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_readLinkObjectEndQualifierAction" name="A_result_readLinkObjectEndQualifierAction">
    <ownedEnd xmi:id="A_result_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction" name="readLinkObjectEndQualifierAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_readSelfAction" name="A_result_readSelfAction">
    <ownedEnd xmi:id="A_result_readSelfAction-readSelfAction" name="readSelfAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_readSelfAction-readSelfAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_readStructuralFeatureAction" name="A_result_readStructuralFeatureAction">
    <ownedEnd xmi:id="A_result_readStructuralFeatureAction-readStructuralFeatureAction" name="readStructuralFeatureAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_readStructuralFeatureAction-readStructuralFeatureAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_readVariableAction" name="A_result_readVariableAction">
    <ownedEnd xmi:id="A_result_readVariableAction-readVariableAction" name="readVariableAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_readVariableAction-readVariableAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_reduceAction" name="A_result_reduceAction">
    <ownedEnd xmi:id="A_result_reduceAction-reduceAction" name="reduceAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_reduceAction-reduceAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_testIdentityAction" name="A_result_testIdentityAction">
    <ownedEnd xmi:id="A_result_testIdentityAction-testIdentityAction" name="testIdentityAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_testIdentityAction-testIdentityAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_unmarshallAction" name="A_result_unmarshallAction">
    <ownedEnd xmi:id="A_result_unmarshallAction-unmarshallAction" name="unmarshallAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_unmarshallAction-unmarshallAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_valueSpecificationAction" name="A_result_valueSpecificationAction">
    <ownedEnd xmi:id="A_result_valueSpecificationAction-valueSpecificationAction" name="valueSpecificationAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_valueSpecificationAction-valueSpecificationAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_result_writeStructuralFeatureAction" name="A_result_writeStructuralFeatureAction">
    <ownedEnd xmi:id="A_result_writeStructuralFeatureAction-writeStructuralFeatureAction" name="writeStructuralFeatureAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_result_writeStructuralFeatureAction-writeStructuralFeatureAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_returnInformation_acceptCallAction" name="A_returnInformation_acceptCallAction">
    <ownedEnd xmi:id="A_returnInformation_acceptCallAction-acceptCallAction" name="acceptCallAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_returnInformation_acceptCallAction-acceptCallAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_returnInformation_replyAction" name="A_returnInformation_replyAction">
    <ownedEnd xmi:id="A_returnInformation_replyAction-replyAction" name="replyAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_returnInformation_replyAction-replyAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_returnValueRecipient_interactionUse" name="A_returnValueRecipient_interactionUse">
    <ownedEnd xmi:id="A_returnValueRecipient_interactionUse-interactionUse" name="interactionUse" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_returnValueRecipient_interactionUse-interactionUse-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_returnValueRecipient_interactionUse-interactionUse-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_returnValue_interactionUse" name="A_returnValue_interactionUse">
    <ownedEnd xmi:id="A_returnValue_interactionUse-interactionUse" name="interactionUse" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_returnValue_interactionUse-interactionUse-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_roleBinding_collaborationUse" name="A_roleBinding_collaborationUse">
    <ownedEnd xmi:id="A_roleBinding_collaborationUse-collaborationUse" name="collaborationUse" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_roleBinding_collaborationUse-collaborationUse-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_role_structuredClassifier" name="A_role_structuredClassifier" isDerived="true">
    <ownedEnd xmi:id="A_role_structuredClassifier-structuredClassifier" name="structuredClassifier" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_role_structuredClassifier-structuredClassifier-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_role_structuredClassifier-structuredClassifier-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_second_testIdentityAction" name="A_second_testIdentityAction">
    <ownedEnd xmi:id="A_second_testIdentityAction-testIdentityAction" name="testIdentityAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_second_testIdentityAction-testIdentityAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_selection_objectFlow" name="A_selection_objectFlow">
    <ownedEnd xmi:id="A_selection_objectFlow-objectFlow" name="objectFlow" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_selection_objectFlow-objectFlow-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_selection_objectFlow-objectFlow-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_selection_objectNode" name="A_selection_objectNode">
    <ownedEnd xmi:id="A_selection_objectNode-objectNode" name="objectNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_selection_objectNode-objectNode-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_selection_objectNode-objectNode-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_selector_lifeline" name="A_selector_lifeline">
    <ownedEnd xmi:id="A_selector_lifeline-lifeline" name="lifeline" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_selector_lifeline-lifeline-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_sendEvent_endMessage" name="A_sendEvent_endMessage">
    <ownedEnd xmi:id="A_sendEvent_endMessage-endMessage" name="endMessage" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_sendEvent_endMessage-endMessage-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_setupPart_loopNode" name="A_setupPart_loopNode">
    <ownedEnd xmi:id="A_setupPart_loopNode-loopNode" name="loopNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_setupPart_loopNode-loopNode-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_signal_broadcastSignalAction" name="A_signal_broadcastSignalAction">
    <ownedEnd xmi:id="A_signal_broadcastSignalAction-broadcastSignalAction" name="broadcastSignalAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_signal_broadcastSignalAction-broadcastSignalAction-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_signal_broadcastSignalAction-broadcastSignalAction-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_signal_reception" name="A_signal_reception">
    <ownedEnd xmi:id="A_signal_reception-reception" name="reception" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_signal_reception-reception-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_signal_reception-reception-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_signal_sendSignalAction" name="A_signal_sendSignalAction">
    <ownedEnd xmi:id="A_signal_sendSignalAction-sendSignalAction" name="sendSignalAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_signal_sendSignalAction-sendSignalAction-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_signal_sendSignalAction-sendSignalAction-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_signal_signalEvent" name="A_signal_signalEvent">
    <ownedEnd xmi:id="A_signal_signalEvent-signalEvent" name="signalEvent" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_signal_signalEvent-signalEvent-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_signal_signalEvent-signalEvent-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_signature_message" name="A_signature_message">
    <ownedEnd xmi:id="A_signature_message-message" name="message" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_signature_message-message-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_signature_message-message-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_signature_templateBinding" name="A_signature_templateBinding">
    <ownedEnd xmi:id="A_signature_templateBinding-templateBinding" name="templateBinding" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_signature_templateBinding-templateBinding-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_signature_templateBinding-templateBinding-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_slot_owningInstance" name="A_slot_owningInstance"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_source_directedRelationship" name="A_source_directedRelationship" isDerived="true">
    <ownedEnd xmi:id="A_source_directedRelationship-directedRelationship" name="directedRelationship" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_source_directedRelationship-directedRelationship-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_source_directedRelationship-directedRelationship-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_specification_durationConstraint" name="A_specification_durationConstraint">
    <generalization xmi:id="A_specification_durationConstraint-_generalization.0"/>
    <ownedEnd xmi:id="A_specification_durationConstraint-durationConstraint" name="durationConstraint" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_specification_durationConstraint-durationConstraint-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_specification_intervalConstraint" name="A_specification_intervalConstraint">
    <generalization xmi:id="A_specification_intervalConstraint-_generalization.0"/>
    <ownedEnd xmi:id="A_specification_intervalConstraint-intervalConstraint" name="intervalConstraint" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_specification_intervalConstraint-intervalConstraint-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_specification_owningConstraint" name="A_specification_owningConstraint">
    <ownedEnd xmi:id="A_specification_owningConstraint-owningConstraint" name="owningConstraint" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_specification_owningConstraint-owningConstraint-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_specification_owningInstanceSpec" name="A_specification_owningInstanceSpec">
    <ownedEnd xmi:id="A_specification_owningInstanceSpec-owningInstanceSpec" name="owningInstanceSpec" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_specification_owningInstanceSpec-owningInstanceSpec-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_specification_timeConstraint" name="A_specification_timeConstraint">
    <generalization xmi:id="A_specification_timeConstraint-_generalization.0"/>
    <ownedEnd xmi:id="A_specification_timeConstraint-timeConstraint" name="timeConstraint" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_specification_timeConstraint-timeConstraint-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_start_executionSpecification" name="A_start_executionSpecification">
    <ownedComment xmi:id="A_start_executionSpecification-_ownedComment.0">
      <body>The event shows the time point at which the action begins execution.</body>
    </ownedComment>
    <ownedEnd xmi:id="A_start_executionSpecification-executionSpecification" name="executionSpecification" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_start_executionSpecification-executionSpecification-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_start_executionSpecification-executionSpecification-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_stateInvariant_owningState" name="A_stateInvariant_owningState">
    <ownedEnd xmi:id="A_stateInvariant_owningState-owningState" name="owningState" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_stateInvariant_owningState-owningState-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_structuralFeature_structuralFeatureAction" name="A_structuralFeature_structuralFeatureAction">
    <ownedEnd xmi:id="A_structuralFeature_structuralFeatureAction-structuralFeatureAction" name="structuralFeatureAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_structuralFeature_structuralFeatureAction-structuralFeatureAction-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_structuralFeature_structuralFeatureAction-structuralFeatureAction-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_structuredNodeInput_structuredActivityNode" name="A_structuredNodeInput_structuredActivityNode">
    <ownedEnd xmi:id="A_structuredNodeInput_structuredActivityNode-structuredActivityNode" name="structuredActivityNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_structuredNodeInput_structuredActivityNode-structuredActivityNode-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_structuredNodeOutput_structuredActivityNode" name="A_structuredNodeOutput_structuredActivityNode">
    <ownedEnd xmi:id="A_structuredNodeOutput_structuredActivityNode-structuredActivityNode" name="structuredActivityNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_structuredNodeOutput_structuredActivityNode-structuredActivityNode-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_structuredNode_activity" name="A_structuredNode_activity"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_subExpression_owningExpression" name="A_subExpression_owningExpression"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_subgroup_superGroup" name="A_subgroup_superGroup" isDerived="true"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_subject_useCase" name="A_subject_useCase"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_submachineState_submachine" name="A_submachineState_submachine"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_subpartition_superPartition" name="A_subpartition_superPartition"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_subsettedProperty_property" name="A_subsettedProperty_property">
    <ownedEnd xmi:id="A_subsettedProperty_property-property" name="property" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_subsettedProperty_property-property-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_subsettedProperty_property-property-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_substitution_substitutingClassifier" name="A_substitution_substitutingClassifier"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_subvertex_container" name="A_subvertex_container"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_superClass_class" name="A_superClass_class" isDerived="true">
    <ownedEnd xmi:id="A_superClass_class-class" name="class" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_superClass_class-class-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_superClass_class-class-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_supplier_supplierDependency" name="A_supplier_supplierDependency">
    <ownedEnd xmi:id="A_supplier_supplierDependency-supplierDependency" name="supplierDependency" visibility="public">
      <ownedComment xmi:id="A_supplier_supplierDependency-supplierDependency-_ownedComment.0">
        <body>Indicates the dependencies that reference the supplier.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_supplier_supplierDependency-supplierDependency-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_supplier_supplierDependency-supplierDependency-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_target_callOperationAction" name="A_target_callOperationAction">
    <ownedEnd xmi:id="A_target_callOperationAction-callOperationAction" name="callOperationAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_target_callOperationAction-callOperationAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_target_destroyObjectAction" name="A_target_destroyObjectAction">
    <ownedEnd xmi:id="A_target_destroyObjectAction-destroyObjectAction" name="destroyObjectAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_target_destroyObjectAction-destroyObjectAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_target_directedRelationship" name="A_target_directedRelationship" isDerived="true">
    <ownedEnd xmi:id="A_target_directedRelationship-directedRelationship" name="directedRelationship" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_target_directedRelationship-directedRelationship-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_target_directedRelationship-directedRelationship-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_target_sendObjectAction" name="A_target_sendObjectAction">
    <ownedEnd xmi:id="A_target_sendObjectAction-sendObjectAction" name="sendObjectAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_target_sendObjectAction-sendObjectAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_target_sendSignalAction" name="A_target_sendSignalAction">
    <ownedEnd xmi:id="A_target_sendSignalAction-sendSignalAction" name="sendSignalAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_target_sendSignalAction-sendSignalAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_templateBinding_boundElement" name="A_templateBinding_boundElement"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_test_clause" name="A_test_clause">
    <ownedEnd xmi:id="A_test_clause-clause" name="clause" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_test_clause-clause-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_test_loopNode" name="A_test_loopNode">
    <ownedEnd xmi:id="A_test_loopNode-loopNode" name="loopNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_test_loopNode-loopNode-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_toBefore_after" name="A_toBefore_after"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_transformation_objectFlow" name="A_transformation_objectFlow">
    <ownedEnd xmi:id="A_transformation_objectFlow-objectFlow" name="objectFlow" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_transformation_objectFlow-objectFlow-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_transformation_objectFlow-objectFlow-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_transition_container" name="A_transition_container"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_trigger_acceptEventAction" name="A_trigger_acceptEventAction">
    <ownedEnd xmi:id="A_trigger_acceptEventAction-acceptEventAction" name="acceptEventAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_trigger_acceptEventAction-acceptEventAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_trigger_transition" name="A_trigger_transition">
    <ownedEnd xmi:id="A_trigger_transition-transition" name="transition" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_trigger_transition-transition-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_type_collaborationUse" name="A_type_collaborationUse">
    <ownedEnd xmi:id="A_type_collaborationUse-collaborationUse" name="collaborationUse" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_type_collaborationUse-collaborationUse-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_type_collaborationUse-collaborationUse-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_type_connector" name="A_type_connector">
    <ownedEnd xmi:id="A_type_connector-connector" name="connector" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_type_connector-connector-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_type_connector-connector-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_type_extensionEnd" name="A_type_extensionEnd">
    <ownedEnd xmi:id="A_type_extensionEnd-extensionEnd" name="extensionEnd" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_type_extensionEnd-extensionEnd-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_type_extensionEnd-extensionEnd-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_type_operation" name="A_type_operation" isDerived="true">
    <ownedEnd xmi:id="A_type_operation-operation" name="operation" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_type_operation-operation-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_type_operation-operation-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_type_typedElement" name="A_type_typedElement">
    <ownedEnd xmi:id="A_type_typedElement-typedElement" name="typedElement" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_type_typedElement-typedElement-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_type_typedElement-typedElement-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_unmarshallType_unmarshallAction" name="A_unmarshallType_unmarshallAction">
    <ownedEnd xmi:id="A_unmarshallType_unmarshallAction-unmarshallAction" name="unmarshallAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_unmarshallType_unmarshallAction-unmarshallAction-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_unmarshallType_unmarshallAction-unmarshallAction-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_upperBound_objectNode" name="A_upperBound_objectNode">
    <ownedEnd xmi:id="A_upperBound_objectNode-objectNode" name="objectNode" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_upperBound_objectNode-objectNode-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_upperValue_owningUpper" name="A_upperValue_owningUpper">
    <ownedEnd xmi:id="A_upperValue_owningUpper-owningUpper" name="owningUpper" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_upperValue_owningUpper-owningUpper-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_utilizedElement_manifestation" name="A_utilizedElement_manifestation">
    <ownedEnd xmi:id="A_utilizedElement_manifestation-manifestation" name="manifestation" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_utilizedElement_manifestation-manifestation-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_utilizedElement_manifestation-manifestation-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_value_linkEndData" name="A_value_linkEndData">
    <ownedEnd xmi:id="A_value_linkEndData-linkEndData" name="linkEndData" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_value_linkEndData-linkEndData-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_value_owningSlot" name="A_value_owningSlot">
    <ownedEnd xmi:id="A_value_owningSlot-owningSlot" name="owningSlot" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_value_owningSlot-owningSlot-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_value_qualifierValue" name="A_value_qualifierValue">
    <ownedEnd xmi:id="A_value_qualifierValue-qualifierValue" name="qualifierValue" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_value_qualifierValue-qualifierValue-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_value_valuePin" name="A_value_valuePin">
    <ownedEnd xmi:id="A_value_valuePin-valuePin" name="valuePin" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_value_valuePin-valuePin-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_value_valueSpecificationAction" name="A_value_valueSpecificationAction">
    <ownedEnd xmi:id="A_value_valueSpecificationAction-valueSpecificationAction" name="valueSpecificationAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_value_valueSpecificationAction-valueSpecificationAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_value_writeStructuralFeatureAction" name="A_value_writeStructuralFeatureAction">
    <ownedEnd xmi:id="A_value_writeStructuralFeatureAction-writeStructuralFeatureAction" name="writeStructuralFeatureAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_value_writeStructuralFeatureAction-writeStructuralFeatureAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_value_writeVariableAction" name="A_value_writeVariableAction">
    <ownedEnd xmi:id="A_value_writeVariableAction-writeVariableAction" name="writeVariableAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_value_writeVariableAction-writeVariableAction-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_variable_activityScope" name="A_variable_activityScope"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_variable_scope" name="A_variable_scope"/>
  <packagedElement xmi:type="uml:Association" xmi:id="A_variable_variableAction" name="A_variable_variableAction">
    <ownedEnd xmi:id="A_variable_variableAction-variableAction" name="variableAction" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_variable_variableAction-variableAction-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_variable_variableAction-variableAction-_upperValue" value="*"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_weight_activityEdge" name="A_weight_activityEdge">
    <ownedEnd xmi:id="A_weight_activityEdge-activityEdge" name="activityEdge" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_weight_activityEdge-activityEdge-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Association" xmi:id="A_when_timeEvent" name="A_when_timeEvent">
    <ownedEnd xmi:id="A_when_timeEvent-timeEvent" name="timeEvent" visibility="public">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_when_timeEvent-timeEvent-_lowerValue"/>
    </ownedEnd>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Abstraction" name="Abstraction">
    <ownedComment xmi:id="Abstraction-_ownedComment.0">
      <body>An abstraction is a relationship that relates two elements or sets of elements that represent the same concept at different levels of abstraction or from different viewpoints.</body>
    </ownedComment>
    <generalization xmi:id="Abstraction-_generalization.0"/>
    <ownedAttribute xmi:id="Abstraction-mapping" name="mapping" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Abstraction-mapping-_ownedComment.0">
        <body>An composition of an Expression that states the abstraction relationship between the supplier and the client. In some cases, such as Derivation, it is usually formal and unidirectional; in other cases, such as Trace, it is usually informal and bidirectional. The mapping expression is optional and may be omitted if the precise relationship between the elements is not specified.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Abstraction-mapping-_lowerValue"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="AcceptCallAction" name="AcceptCallAction">
    <ownedComment xmi:id="AcceptCallAction-_ownedComment.0">
      <body>An accept call action is an accept event action representing the receipt of a synchronous call request. In addition to the normal operation parameters, the action produces an output that is needed later to supply the information to the reply action necessary to return control to the caller. This action is for synchronous calls. If it is used to handle an asynchronous call, execution of the subsequent reply action will complete immediately with no effects.</body>
    </ownedComment>
    <ownedRule xmi:id="AcceptCallAction-trigger_call_event" name="trigger_call_event">
      <ownedComment xmi:id="AcceptCallAction-trigger_call_event-_ownedComment.0">
        <body>The trigger event must be a CallEvent.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="AcceptCallAction-trigger_call_event-_specification">
        <language>OCL</language>
        <body>trigger.event.oclIsKindOf(CallEvent)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="AcceptCallAction-unmarshall" name="unmarshall">
      <ownedComment xmi:id="AcceptCallAction-unmarshall-_ownedComment.0">
        <body>isUnmrashall must be true for an AcceptCallAction.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="AcceptCallAction-unmarshall-_specification">
        <language>OCL</language>
        <body>isUnmarshall = true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="AcceptCallAction-result_pins" name="result_pins">
      <ownedComment xmi:id="AcceptCallAction-result_pins-_ownedComment.0">
        <body>The result pins must match the in and inout parameters of the operation specified by the trigger event in number, type, and order.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="AcceptCallAction-result_pins-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="AcceptCallAction-_generalization.0"/>
    <ownedAttribute xmi:id="AcceptCallAction-returnInformation" name="returnInformation" visibility="public" aggregation="composite">
      <ownedComment xmi:id="AcceptCallAction-returnInformation-_ownedComment.0">
        <body>Pin where a value is placed containing sufficient information to perform a subsequent reply and return control to the caller. The contents of this value are opaque. It can be passed and copied but it cannot be manipulated by the model.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="AcceptEventAction" name="AcceptEventAction">
    <ownedComment xmi:id="AcceptEventAction-_ownedComment.0">
      <body>A accept event action is an action that waits for the occurrence of an event meeting specified conditions.</body>
    </ownedComment>
    <ownedRule xmi:id="AcceptEventAction-no_input_pins" name="no_input_pins">
      <ownedComment xmi:id="AcceptEventAction-no_input_pins-_ownedComment.0">
        <body>AcceptEventActions may have no input pins.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="AcceptEventAction-no_input_pins-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="AcceptEventAction-trigger_events" name="trigger_events">
      <ownedComment xmi:id="AcceptEventAction-trigger_events-_ownedComment.0">
        <body>If the trigger events are all TimeEvents, there is exactly one output pin.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="AcceptEventAction-trigger_events-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="AcceptEventAction-unmarshall_signal_events" name="unmarshall_signal_events">
      <ownedComment xmi:id="AcceptEventAction-unmarshall_signal_events-_ownedComment.0">
        <body>If isUnmarshall is true, there must be exactly one trigger for events of type SignalEvent. The number of result output pins must be the same as the number of attributes of the signal. The type and ordering of each result output pin must be the same as the corresponding attribute of the signal. The multiplicity of each result output pin must be compatible with the multiplicity of the corresponding attribute.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="AcceptEventAction-unmarshall_signal_events-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="AcceptEventAction-no_output_pins" name="no_output_pins">
      <ownedComment xmi:id="AcceptEventAction-no_output_pins-_ownedComment.0">
        <body>There are no output pins if the trigger events are only ChangeEvents, or if they are only CallEvents when this action is an instance of AcceptEventAction and not an instance of a descendant of AcceptEventAction (such as AcceptCallAction).</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="AcceptEventAction-no_output_pins-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="AcceptEventAction-_generalization.0"/>
    <ownedAttribute xmi:id="AcceptEventAction-isUnmarshall" name="isUnmarshall" visibility="public">
      <ownedComment xmi:id="AcceptEventAction-isUnmarshall-_ownedComment.0">
        <body>Indicates whether there is a single output pin for the event, or multiple output pins for attributes of the event.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="AcceptEventAction-isUnmarshall-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="AcceptEventAction-result" name="result" visibility="public" aggregation="composite">
      <ownedComment xmi:id="AcceptEventAction-result-_ownedComment.0">
        <body>Pins holding the received event objects or their attributes. Event objects may be copied in transmission, so identity might not be preserved.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="AcceptEventAction-result-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="AcceptEventAction-result-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="AcceptEventAction-trigger" name="trigger" visibility="public" aggregation="composite">
      <ownedComment xmi:id="AcceptEventAction-trigger-_ownedComment.0">
        <body>The type of events accepted by the action, as specified by triggers. For triggers with signal events, a signal of the specified type or any subtype of the specified signal type is accepted.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="AcceptEventAction-trigger-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Action" name="Action" isAbstract="true">
    <ownedComment xmi:id="Action-_ownedComment.0">
      <body>An action has pre- and post-conditions.</body>
    </ownedComment>
    <ownedComment xmi:id="Action-_ownedComment.1">
      <body>An action represents a single step within an activity, that is, one that is not further decomposed within the activity.</body>
    </ownedComment>
    <ownedComment xmi:id="Action-_ownedComment.2">
      <body>An action is a named element that is the fundamental unit of executable functionality. The execution of an action represents some transformation or processing in the modeled system, be it a computer system or otherwise.</body>
    </ownedComment>
    <generalization xmi:id="Action-_generalization.0"/>
    <ownedAttribute xmi:id="Action-context" name="context" visibility="public" isReadOnly="true" isDerived="true">
      <ownedComment xmi:id="Action-context-_ownedComment.0">
        <body>The classifier that owns the behavior of which this action is a part.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Action-context-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Action-input" name="input" visibility="public" isOrdered="true" isReadOnly="true" aggregation="composite" isDerived="true" isDerivedUnion="true">
      <ownedComment xmi:id="Action-input-_ownedComment.0">
        <body>The ordered set of input pins connected to the Action. These are among the total set of inputs.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Action-input-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Action-input-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Action-isLocallyReentrant" name="isLocallyReentrant" visibility="public">
      <ownedComment xmi:id="Action-isLocallyReentrant-_ownedComment.0">
        <body>If true, the action can begin a new, concurrent execution, even if there is already another execution of the action ongoing. If false, the action cannot begin a new execution until any previous execution has completed.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="Action-isLocallyReentrant-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Action-localPostcondition" name="localPostcondition" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Action-localPostcondition-_ownedComment.0">
        <body>Constraint that must be satisfied when executed is completed.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Action-localPostcondition-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Action-localPostcondition-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Action-localPrecondition" name="localPrecondition" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Action-localPrecondition-_ownedComment.0">
        <body>Constraint that must be satisfied when execution is started.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Action-localPrecondition-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Action-localPrecondition-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Action-output" name="output" visibility="public" isOrdered="true" isReadOnly="true" aggregation="composite" isDerived="true" isDerivedUnion="true">
      <ownedComment xmi:id="Action-output-_ownedComment.0">
        <body>The ordered set of output pins connected to the Action. The action places its results onto pins in this set.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Action-output-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Action-output-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedOperation xmi:id="Action-context.1" name="context" visibility="public" isQuery="true">
      <ownedComment xmi:id="Action-context.1-_ownedComment.0">
        <body>Missing derivation for Action::/context : Classifier</body>
      </ownedComment>
      <ownedRule xmi:id="Action-context.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Action-context.1-spec-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Action-context.1-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Action-context.1-result-_lowerValue"/>
      </ownedParameter>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ActionExecutionSpecification" name="ActionExecutionSpecification">
    <ownedComment xmi:id="ActionExecutionSpecification-_ownedComment.0">
      <body>An action execution specification is a kind of execution specification representing the execution of an action.</body>
    </ownedComment>
    <ownedRule xmi:id="ActionExecutionSpecification-action_referenced" name="action_referenced">
      <ownedComment xmi:id="ActionExecutionSpecification-action_referenced-_ownedComment.0">
        <body>The Action referenced by the ActionExecutionSpecification, if any, must be owned by the Interaction owning the ActionExecutionOccurrence.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActionExecutionSpecification-action_referenced-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ActionExecutionSpecification-_generalization.0"/>
    <ownedAttribute xmi:id="ActionExecutionSpecification-action" name="action" visibility="public">
      <ownedComment xmi:id="ActionExecutionSpecification-action-_ownedComment.0">
        <body>Action whose execution is occurring.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ActionInputPin" name="ActionInputPin">
    <ownedComment xmi:id="ActionInputPin-_ownedComment.0">
      <body>An action input pin is a kind of pin that executes an action to determine the values to input to another.</body>
    </ownedComment>
    <ownedRule xmi:id="ActionInputPin-input_pin" name="input_pin">
      <ownedComment xmi:id="ActionInputPin-input_pin-_ownedComment.0">
        <body>The fromAction of an action input pin must only have action input pins as input pins.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActionInputPin-input_pin-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActionInputPin-no_control_or_data_flow" name="no_control_or_data_flow">
      <ownedComment xmi:id="ActionInputPin-no_control_or_data_flow-_ownedComment.0">
        <body>The fromAction of an action input pin cannot have control or data flows coming into or out of it or its pins.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActionInputPin-no_control_or_data_flow-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActionInputPin-one_output_pin" name="one_output_pin">
      <ownedComment xmi:id="ActionInputPin-one_output_pin-_ownedComment.0">
        <body>The fromAction of an action input pin must have exactly one output pin.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActionInputPin-one_output_pin-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ActionInputPin-_generalization.0"/>
    <ownedAttribute xmi:id="ActionInputPin-fromAction" name="fromAction" visibility="public" aggregation="composite">
      <ownedComment xmi:id="ActionInputPin-fromAction-_ownedComment.0">
        <body>The action used to provide values.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Activity" name="Activity">
    <ownedComment xmi:id="Activity-_ownedComment.0">
      <body>An activity is the specification of parameterized behavior as the coordinated sequencing of subordinate units whose individual elements are actions.</body>
    </ownedComment>
    <ownedRule xmi:id="Activity-activity_parameter_node" name="activity_parameter_node">
      <ownedComment xmi:id="Activity-activity_parameter_node-_ownedComment.0">
        <body>The nodes of the activity must include one ActivityParameterNode for each parameter.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Activity-activity_parameter_node-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Activity-autonomous" name="autonomous">
      <ownedComment xmi:id="Activity-autonomous-_ownedComment.0">
        <body>An activity cannot be autonomous and have a classifier or behavioral feature context at the same time.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Activity-autonomous-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Activity-no_supergroups" name="no_supergroups">
      <ownedComment xmi:id="Activity-no_supergroups-_ownedComment.0">
        <body>The groups of an activity have no supergroups.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Activity-no_supergroups-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="Activity-_generalization.0"/>
    <ownedAttribute xmi:id="Activity-edge" name="edge" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Activity-edge-_ownedComment.0">
        <body>Edges expressing flow between nodes of the activity.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Activity-edge-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Activity-edge-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Activity-group" name="group" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Activity-group-_ownedComment.0">
        <body>Top-level groups in the activity.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Activity-group-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Activity-group-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Activity-isReadOnly" name="isReadOnly" visibility="public">
      <ownedComment xmi:id="Activity-isReadOnly-_ownedComment.0">
        <body>If true, this activity must not make any changes to variables outside the activity or to objects. (This is an assertion, not an executable property. It may be used by an execution engine to optimize model execution. If the assertion is violated by the action, then the model is ill-formed.) The default is false (an activity may make nonlocal changes).</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="Activity-isReadOnly-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Activity-isSingleExecution" name="isSingleExecution" visibility="public">
      <ownedComment xmi:id="Activity-isSingleExecution-_ownedComment.0">
        <body>If true, all invocations of the activity are handled by the same execution.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="Activity-isSingleExecution-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Activity-node" name="node" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Activity-node-_ownedComment.0">
        <body>Nodes coordinated by the activity.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Activity-node-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Activity-node-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Activity-partition" name="partition" visibility="public">
      <ownedComment xmi:id="Activity-partition-_ownedComment.0">
        <body>Top-level partitions in the activity.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Activity-partition-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Activity-partition-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Activity-structuredNode" name="structuredNode" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Activity-structuredNode-_ownedComment.0">
        <body>Top-level structured nodes in the activity.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Activity-structuredNode-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Activity-structuredNode-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Activity-variable" name="variable" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Activity-variable-_ownedComment.0">
        <body>Top-level variables in the activity.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Activity-variable-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Activity-variable-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ActivityEdge" name="ActivityEdge" isAbstract="true">
    <ownedComment xmi:id="ActivityEdge-_ownedComment.0">
      <body>Activity edges can be contained in interruptible regions.</body>
    </ownedComment>
    <ownedComment xmi:id="ActivityEdge-_ownedComment.1">
      <body>An activity edge is an abstract class for directed connections between two activity nodes.</body>
    </ownedComment>
    <ownedRule xmi:id="ActivityEdge-owned" name="owned">
      <ownedComment xmi:id="ActivityEdge-owned-_ownedComment.0">
        <body>Activity edges may be owned only by activities or groups.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityEdge-owned-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActivityEdge-source_and_target" name="source_and_target">
      <ownedComment xmi:id="ActivityEdge-source_and_target-_ownedComment.0">
        <body>The source and target of an edge must be in the same activity as the edge.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityEdge-source_and_target-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActivityEdge-structured_node" name="structured_node">
      <ownedComment xmi:id="ActivityEdge-structured_node-_ownedComment.0">
        <body>Activity edges may be owned by at most one structured node.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityEdge-structured_node-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ActivityEdge-_generalization.0"/>
    <ownedAttribute xmi:id="ActivityEdge-activity" name="activity" visibility="public">
      <ownedComment xmi:id="ActivityEdge-activity-_ownedComment.0">
        <body>Activity containing the edge.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityEdge-activity-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityEdge-guard" name="guard" visibility="public" aggregation="composite">
      <ownedComment xmi:id="ActivityEdge-guard-_ownedComment.0">
        <body>Specification evaluated at runtime to determine if the edge can be traversed.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityEdge-inGroup" name="inGroup" visibility="public" isReadOnly="true" isDerived="true" isDerivedUnion="true">
      <ownedComment xmi:id="ActivityEdge-inGroup-_ownedComment.0">
        <body>Groups containing the edge.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityEdge-inGroup-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityEdge-inGroup-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityEdge-inPartition" name="inPartition" visibility="public">
      <ownedComment xmi:id="ActivityEdge-inPartition-_ownedComment.0">
        <body>Partitions containing the edge.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityEdge-inPartition-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityEdge-inPartition-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityEdge-inStructuredNode" name="inStructuredNode" visibility="public">
      <ownedComment xmi:id="ActivityEdge-inStructuredNode-_ownedComment.0">
        <body>Structured activity node containing the edge.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityEdge-inStructuredNode-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityEdge-interrupts" name="interrupts" visibility="public">
      <ownedComment xmi:id="ActivityEdge-interrupts-_ownedComment.0">
        <body>Region that the edge can interrupt.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityEdge-interrupts-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityEdge-redefinedEdge" name="redefinedEdge" visibility="public">
      <ownedComment xmi:id="ActivityEdge-redefinedEdge-_ownedComment.0">
        <body>Inherited edges replaced by this edge in a specialization of the activity.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityEdge-redefinedEdge-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityEdge-redefinedEdge-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityEdge-source" name="source" visibility="public">
      <ownedComment xmi:id="ActivityEdge-source-_ownedComment.0">
        <body>Node from which tokens are taken when they traverse the edge.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityEdge-target" name="target" visibility="public">
      <ownedComment xmi:id="ActivityEdge-target-_ownedComment.0">
        <body>Node to which tokens are put when they traverse the edge.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityEdge-weight" name="weight" visibility="public" aggregation="composite">
      <ownedComment xmi:id="ActivityEdge-weight-_ownedComment.0">
        <body>The minimum number of tokens that must traverse the edge at the same time.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ActivityFinalNode" name="ActivityFinalNode">
    <ownedComment xmi:id="ActivityFinalNode-_ownedComment.0">
      <body>An activity final node is a final node that stops all flows in an activity.</body>
    </ownedComment>
    <generalization xmi:id="ActivityFinalNode-_generalization.0"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ActivityGroup" name="ActivityGroup" isAbstract="true">
    <ownedComment xmi:id="ActivityGroup-_ownedComment.0">
      <body>ActivityGroup is an abstract class for defining sets of nodes and edges in an activity.</body>
    </ownedComment>
    <ownedRule xmi:id="ActivityGroup-group_owned" name="group_owned">
      <ownedComment xmi:id="ActivityGroup-group_owned-_ownedComment.0">
        <body>Groups may only be owned by activities or groups.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityGroup-group_owned-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActivityGroup-not_contained" name="not_contained">
      <ownedComment xmi:id="ActivityGroup-not_contained-_ownedComment.0">
        <body>No node or edge in a group may be contained by its subgroups or its containing groups, transitively.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityGroup-not_contained-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActivityGroup-nodes_and_edges" name="nodes_and_edges">
      <ownedComment xmi:id="ActivityGroup-nodes_and_edges-_ownedComment.0">
        <body>All nodes and edges of the group must be in the same activity as the group.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityGroup-nodes_and_edges-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ActivityGroup-_generalization.0"/>
    <ownedAttribute xmi:id="ActivityGroup-containedEdge" name="containedEdge" visibility="public" isReadOnly="true" isDerived="true" isDerivedUnion="true">
      <ownedComment xmi:id="ActivityGroup-containedEdge-_ownedComment.0">
        <body>Edges immediately contained in the group.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityGroup-containedEdge-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityGroup-containedEdge-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityGroup-containedNode" name="containedNode" visibility="public" isReadOnly="true" isDerived="true" isDerivedUnion="true">
      <ownedComment xmi:id="ActivityGroup-containedNode-_ownedComment.0">
        <body>Nodes immediately contained in the group.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityGroup-containedNode-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityGroup-containedNode-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityGroup-inActivity" name="inActivity" visibility="public">
      <ownedComment xmi:id="ActivityGroup-inActivity-_ownedComment.0">
        <body>Activity containing the group.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityGroup-inActivity-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityGroup-subgroup" name="subgroup" visibility="public" isReadOnly="true" aggregation="composite" isDerived="true" isDerivedUnion="true">
      <ownedComment xmi:id="ActivityGroup-subgroup-_ownedComment.0">
        <body>Groups immediately contained in the group.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityGroup-subgroup-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityGroup-subgroup-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityGroup-superGroup" name="superGroup" visibility="public" isReadOnly="true" isDerived="true" isDerivedUnion="true">
      <ownedComment xmi:id="ActivityGroup-superGroup-_ownedComment.0">
        <body>Group immediately containing the group.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityGroup-superGroup-_lowerValue"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ActivityNode" name="ActivityNode" isAbstract="true">
    <ownedComment xmi:id="ActivityNode-_ownedComment.0">
      <body>ActivityNode is an abstract class for points in the flow of an activity connected by edges.</body>
    </ownedComment>
    <ownedRule xmi:id="ActivityNode-owned" name="owned">
      <ownedComment xmi:id="ActivityNode-owned-_ownedComment.0">
        <body>Activity nodes can only be owned by activities or groups.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityNode-owned-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActivityNode-owned_structured_node" name="owned_structured_node">
      <ownedComment xmi:id="ActivityNode-owned_structured_node-_ownedComment.0">
        <body>Activity nodes may be owned by at most one structured node.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityNode-owned_structured_node-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ActivityNode-_generalization.0"/>
    <ownedAttribute xmi:id="ActivityNode-activity" name="activity" visibility="public">
      <ownedComment xmi:id="ActivityNode-activity-_ownedComment.0">
        <body>Activity containing the node.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityNode-activity-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityNode-inGroup" name="inGroup" visibility="public" isReadOnly="true" isDerived="true" isDerivedUnion="true">
      <ownedComment xmi:id="ActivityNode-inGroup-_ownedComment.0">
        <body>Groups containing the node.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityNode-inGroup-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityNode-inGroup-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityNode-inInterruptibleRegion" name="inInterruptibleRegion" visibility="public">
      <ownedComment xmi:id="ActivityNode-inInterruptibleRegion-_ownedComment.0">
        <body>Interruptible regions containing the node.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityNode-inInterruptibleRegion-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityNode-inInterruptibleRegion-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityNode-inPartition" name="inPartition" visibility="public">
      <ownedComment xmi:id="ActivityNode-inPartition-_ownedComment.0">
        <body>Partitions containing the node.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityNode-inPartition-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityNode-inPartition-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityNode-inStructuredNode" name="inStructuredNode" visibility="public">
      <ownedComment xmi:id="ActivityNode-inStructuredNode-_ownedComment.0">
        <body>Structured activity node containing the node.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityNode-inStructuredNode-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityNode-incoming" name="incoming" visibility="public">
      <ownedComment xmi:id="ActivityNode-incoming-_ownedComment.0">
        <body>Edges that have the node as target.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityNode-incoming-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityNode-incoming-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityNode-outgoing" name="outgoing" visibility="public">
      <ownedComment xmi:id="ActivityNode-outgoing-_ownedComment.0">
        <body>Edges that have the node as source.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityNode-outgoing-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityNode-outgoing-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityNode-redefinedNode" name="redefinedNode" visibility="public">
      <ownedComment xmi:id="ActivityNode-redefinedNode-_ownedComment.0">
        <body>Inherited nodes replaced by this node in a specialization of the activity.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityNode-redefinedNode-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityNode-redefinedNode-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ActivityParameterNode" name="ActivityParameterNode">
    <ownedComment xmi:id="ActivityParameterNode-_ownedComment.0">
      <body>An activity parameter node is an object node for inputs and outputs to activities.</body>
    </ownedComment>
    <ownedRule xmi:id="ActivityParameterNode-maximum_one_parameter_node" name="maximum_one_parameter_node">
      <ownedComment xmi:id="ActivityParameterNode-maximum_one_parameter_node-_ownedComment.0">
        <body>A parameter with direction other than inout must have at most one activity parameter node in an activity.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityParameterNode-maximum_one_parameter_node-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActivityParameterNode-maximum_two_parameter_nodes" name="maximum_two_parameter_nodes">
      <ownedComment xmi:id="ActivityParameterNode-maximum_two_parameter_nodes-_ownedComment.0">
        <body>A parameter with direction inout must have at most two activity parameter nodes in an activity, one with incoming flows and one with outgoing flows.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityParameterNode-maximum_two_parameter_nodes-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActivityParameterNode-no_edges" name="no_edges">
      <ownedComment xmi:id="ActivityParameterNode-no_edges-_ownedComment.0">
        <body>An activity parameter node may have all incoming edges or all outgoing edges, but it must not have both incoming and outgoing edges.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityParameterNode-no_edges-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActivityParameterNode-no_incoming_edges" name="no_incoming_edges">
      <ownedComment xmi:id="ActivityParameterNode-no_incoming_edges-_ownedComment.0">
        <body>Activity parameter object nodes with no incoming edges and one or more outgoing edges must have a parameter with in or inout direction.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityParameterNode-no_incoming_edges-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActivityParameterNode-no_outgoing_edges" name="no_outgoing_edges">
      <ownedComment xmi:id="ActivityParameterNode-no_outgoing_edges-_ownedComment.0">
        <body>Activity parameter object nodes with no outgoing edges and one or more incoming edges must have a parameter with out, inout, or return direction.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityParameterNode-no_outgoing_edges-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActivityParameterNode-same_type" name="same_type">
      <ownedComment xmi:id="ActivityParameterNode-same_type-_ownedComment.0">
        <body>The type of an activity parameter node is the same as the type of its parameter.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityParameterNode-same_type-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActivityParameterNode-has_parameters" name="has_parameters">
      <ownedComment xmi:id="ActivityParameterNode-has_parameters-_ownedComment.0">
        <body>Activity parameter nodes must have parameters from the containing activity.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityParameterNode-has_parameters-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ActivityParameterNode-_generalization.0"/>
    <ownedAttribute xmi:id="ActivityParameterNode-parameter" name="parameter" visibility="public">
      <ownedComment xmi:id="ActivityParameterNode-parameter-_ownedComment.0">
        <body>The parameter the object node will be accepting or providing values for.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ActivityPartition" name="ActivityPartition">
    <ownedComment xmi:id="ActivityPartition-_ownedComment.0">
      <body>An activity partition is a kind of activity group for identifying actions that have some characteristic in common.</body>
    </ownedComment>
    <ownedRule xmi:id="ActivityPartition-represents_part" name="represents_part">
      <ownedComment xmi:id="ActivityPartition-represents_part-_ownedComment.0">
        <body>If a partition represents a part, then all the non-external partitions in the same dimension and at the same level of nesting in that dimension must represent parts directly contained in the internal structure of the same classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityPartition-represents_part-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActivityPartition-represents_classifier" name="represents_classifier">
      <ownedComment xmi:id="ActivityPartition-represents_classifier-_ownedComment.0">
        <body>If a non-external partition represents a classifier and is contained in another partition, then the containing partition must represent a classifier, and the classifier of the subpartition must be nested in the classifier represented by the containing partition, or be at the contained end of a strong composition association with the classifier represented by the containing partition.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityPartition-represents_classifier-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActivityPartition-represents_part_and_is_contained" name="represents_part_and_is_contained">
      <ownedComment xmi:id="ActivityPartition-represents_part_and_is_contained-_ownedComment.0">
        <body>If a partition represents a part and is contained by another partition, then the part must be of a classifier represented by the containing partition, or of a classifier that is the type of a part representing the containing partition.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityPartition-represents_part_and_is_contained-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ActivityPartition-dimension_not_contained" name="dimension_not_contained">
      <ownedComment xmi:id="ActivityPartition-dimension_not_contained-_ownedComment.0">
        <body>A partition with isDimension = true may not be contained by another partition.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ActivityPartition-dimension_not_contained-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ActivityPartition-_generalization.0"/>
    <ownedAttribute xmi:id="ActivityPartition-edge" name="edge" visibility="public">
      <ownedComment xmi:id="ActivityPartition-edge-_ownedComment.0">
        <body>Edges immediately contained in the group.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityPartition-edge-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityPartition-edge-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityPartition-isDimension" name="isDimension" visibility="public">
      <ownedComment xmi:id="ActivityPartition-isDimension-_ownedComment.0">
        <body>Tells whether the partition groups other partitions along a dimension.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="ActivityPartition-isDimension-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityPartition-isExternal" name="isExternal" visibility="public">
      <ownedComment xmi:id="ActivityPartition-isExternal-_ownedComment.0">
        <body>Tells whether the partition represents an entity to which the partitioning structure does not apply.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="ActivityPartition-isExternal-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityPartition-node" name="node" visibility="public">
      <ownedComment xmi:id="ActivityPartition-node-_ownedComment.0">
        <body>Nodes immediately contained in the group.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityPartition-node-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityPartition-node-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityPartition-represents" name="represents" visibility="public">
      <ownedComment xmi:id="ActivityPartition-represents-_ownedComment.0">
        <body>An element constraining behaviors invoked by nodes in the partition.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityPartition-represents-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityPartition-subpartition" name="subpartition" visibility="public" aggregation="composite">
      <ownedComment xmi:id="ActivityPartition-subpartition-_ownedComment.0">
        <body>Partitions immediately contained in the partition.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityPartition-subpartition-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ActivityPartition-subpartition-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ActivityPartition-superPartition" name="superPartition" visibility="public">
      <ownedComment xmi:id="ActivityPartition-superPartition-_ownedComment.0">
        <body>Partition immediately containing the partition.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ActivityPartition-superPartition-_lowerValue"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Actor" name="Actor">
    <ownedComment xmi:id="Actor-_ownedComment.0">
      <body>An actor specifies a role played by a user or any other system that interacts with the subject.</body>
    </ownedComment>
    <ownedRule xmi:id="Actor-associations" name="associations">
      <ownedComment xmi:id="Actor-associations-_ownedComment.0">
        <body>An actor can only have associations to use cases, components and classes. Furthermore these associations must be binary.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Actor-associations-_specification">
        <language>OCL</language>
        <body>self.ownedAttribute->forAll ( a |
(a.association->notEmpty()) implies
((a.association.memberEnd.size() = 2) and
(a.opposite.class.oclIsKindOf(UseCase) or
(a.opposite.class.oclIsKindOf(Class) and not a.opposite.class.oclIsKindOf(Behavior))))
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Actor-must_have_name" name="must_have_name">
      <ownedComment xmi:id="Actor-must_have_name-_ownedComment.0">
        <body>An actor must have a name.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Actor-must_have_name-_specification">
        <language>OCL</language>
        <body>name->notEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="Actor-_generalization.0"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="AddStructuralFeatureValueAction" name="AddStructuralFeatureValueAction">
    <ownedComment xmi:id="AddStructuralFeatureValueAction-_ownedComment.0">
      <body>An add structural feature value action is a write structural feature action for adding values to a structural feature.</body>
    </ownedComment>
    <ownedRule xmi:id="AddStructuralFeatureValueAction-unlimited_natural_and_multiplicity" name="unlimited_natural_and_multiplicity">
      <ownedComment xmi:id="AddStructuralFeatureValueAction-unlimited_natural_and_multiplicity-_ownedComment.0">
        <body>Actions adding a value to ordered structural features must have a single input pin for the insertion point with type UnlimitedNatural and multiplicity of 1..1, otherwise the action has no input pin for the insertion point.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="AddStructuralFeatureValueAction-unlimited_natural_and_multiplicity-_specification">
        <language>OCL</language>
        <body>let insertAtPins : Collection = self.insertAt in
if self.structuralFeature.isOrdered = #false
then insertAtPins->size() = 0
else let insertAtPin : InputPin= insertAt->asSequence()->first() in
insertAtPins->size() = 1
and insertAtPin.type = UnlimitedNatural
and insertAtPin.multiplicity.is(1,1))
endif
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="AddStructuralFeatureValueAction-required_value" name="required_value">
      <ownedComment xmi:id="AddStructuralFeatureValueAction-required_value-_ownedComment.0">
        <body>A value input pin is required.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="AddStructuralFeatureValueAction-required_value-_specification">
        <language>OCL</language>
        <body>self.value -> notEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="AddStructuralFeatureValueAction-_generalization.0"/>
    <ownedAttribute xmi:id="AddStructuralFeatureValueAction-insertAt" name="insertAt" visibility="public" aggregation="composite">
      <ownedComment xmi:id="AddStructuralFeatureValueAction-insertAt-_ownedComment.0">
        <body>Gives the position at which to insert a new value or move an existing value in ordered structural features. The type of the pin is UnlimitedNatural, but the value cannot be zero. This pin is omitted for unordered structural features.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="AddStructuralFeatureValueAction-insertAt-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="AddStructuralFeatureValueAction-isReplaceAll" name="isReplaceAll" visibility="public">
      <ownedComment xmi:id="AddStructuralFeatureValueAction-isReplaceAll-_ownedComment.0">
        <body>Specifies whether existing values of the structural feature of the object should be removed before adding the new value.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="AddStructuralFeatureValueAction-isReplaceAll-_defaultValue"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="AddVariableValueAction" name="AddVariableValueAction">
    <ownedComment xmi:id="AddVariableValueAction-_ownedComment.0">
      <body>An add variable value action is a write variable action for adding values to a variable.</body>
    </ownedComment>
    <ownedRule xmi:id="AddVariableValueAction-required_value" name="required_value">
      <ownedComment xmi:id="AddVariableValueAction-required_value-_ownedComment.0">
        <body>A value input pin is required.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="AddVariableValueAction-required_value-_specification">
        <language>OCL</language>
        <body>self.value -> notEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="AddVariableValueAction-single_input_pin" name="single_input_pin">
      <ownedComment xmi:id="AddVariableValueAction-single_input_pin-_ownedComment.0">
        <body>Actions adding values to ordered variables must have a single input pin for the insertion point with type UnlimtedNatural and multiplicity of 1..1, otherwise the action has no input pin for the insertion point.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="AddVariableValueAction-single_input_pin-_specification">
        <language>OCL</language>
        <body>let insertAtPins : Collection = self.insertAt in
if self.variable.ordering = #unordered
then insertAtPins->size() = 0
else let insertAtPin : InputPin = insertAt->asSequence()->first() in
insertAtPins->size() = 1
and insertAtPin.type = UnlimitedNatural
and insertAtPin.multiplicity.is(1,1))
endif
</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="AddVariableValueAction-_generalization.0"/>
    <ownedAttribute xmi:id="AddVariableValueAction-insertAt" name="insertAt" visibility="public" aggregation="composite">
      <ownedComment xmi:id="AddVariableValueAction-insertAt-_ownedComment.0">
        <body>Gives the position at which to insert a new value or move an existing value in ordered variables. The types is UnlimitedINatural, but the value cannot be zero. This pin is omitted for unordered variables.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="AddVariableValueAction-insertAt-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="AddVariableValueAction-isReplaceAll" name="isReplaceAll" visibility="public">
      <ownedComment xmi:id="AddVariableValueAction-isReplaceAll-_ownedComment.0">
        <body>Specifies whether existing values of the variable should be removed before adding the new value.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="AddVariableValueAction-isReplaceAll-_defaultValue"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="AnyReceiveEvent" name="AnyReceiveEvent">
    <ownedComment xmi:id="AnyReceiveEvent-_ownedComment.0">
      <body>A trigger for an AnyReceiveEvent is triggered by the receipt of any message that is not explicitly handled by any related trigger.</body>
    </ownedComment>
    <generalization xmi:id="AnyReceiveEvent-_generalization.0"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Artifact" name="Artifact">
    <ownedComment xmi:id="Artifact-_ownedComment.0">
      <body>An artifact is the source of a deployment to a node.</body>
    </ownedComment>
    <ownedComment xmi:id="Artifact-_ownedComment.1">
      <body>An artifact is the specification of a physical piece of information that is used or produced by a software development process, or by deployment and operation of a system. Examples of artifacts include model files, source files, scripts, and binary executable files, a table in a database system, a development deliverable, or a word-processing document, a mail message.</body>
    </ownedComment>
    <generalization xmi:id="Artifact-_generalization.0"/>
    <generalization xmi:id="Artifact-_generalization.1"/>
    <ownedAttribute xmi:id="Artifact-fileName" name="fileName" visibility="public">
      <ownedComment xmi:id="Artifact-fileName-_ownedComment.0">
        <body>A concrete name that is used to refer to the Artifact in a physical context. Example: file system name, universal resource locator.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Artifact-fileName-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Artifact-manifestation" name="manifestation" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Artifact-manifestation-_ownedComment.0">
        <body>The set of model elements that are manifested in the Artifact. That is, these model elements are utilized in the construction (or generation) of the artifact.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Artifact-manifestation-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Artifact-manifestation-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Artifact-nestedArtifact" name="nestedArtifact" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Artifact-nestedArtifact-_ownedComment.0">
        <body>The Artifacts that are defined (nested) within the Artifact. The association is a specialization of the ownedMember association from Namespace to NamedElement.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Artifact-nestedArtifact-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Artifact-nestedArtifact-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Artifact-ownedAttribute" name="ownedAttribute" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="Artifact-ownedAttribute-_ownedComment.0">
        <body>The attributes or association ends defined for the Artifact. The association is a specialization of the ownedMember association.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Artifact-ownedAttribute-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Artifact-ownedAttribute-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Artifact-ownedOperation" name="ownedOperation" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="Artifact-ownedOperation-_ownedComment.0">
        <body>The Operations defined for the Artifact. The association is a specialization of the ownedMember association.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Artifact-ownedOperation-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Artifact-ownedOperation-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Association" name="Association">
    <ownedComment xmi:id="Association-_ownedComment.0">
      <body>An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link.A link is a tuple with one value for each end of the association, where each value is an instance of the type of the end.</body>
    </ownedComment>
    <ownedComment xmi:id="Association-_ownedComment.1">
      <body>An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link. A link is a tuple with one value for each end of the association, where each value is an instance of the type of the end.</body>
    </ownedComment>
    <ownedRule xmi:id="Association-specialized_end_number" name="specialized_end_number">
      <ownedComment xmi:id="Association-specialized_end_number-_ownedComment.0">
        <body>An association specializing another association has the same number of ends as the other association.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Association-specialized_end_number-_specification">
        <language>OCL</language>
        <body>parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Association-association_ends" name="association_ends">
      <ownedComment xmi:id="Association-association_ends-_ownedComment.0">
        <body>Association ends of associations with more than two ends must be owned by the association.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Association-association_ends-_specification">
        <language>OCL</language>
        <body>if memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Association-binary_associations" name="binary_associations">
      <ownedComment xmi:id="Association-binary_associations-_ownedComment.0">
        <body>Only binary associations can be aggregations.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Association-binary_associations-_specification">
        <language>OCL</language>
        <body>self.memberEnd->exists(aggregation &lt;> Aggregation::none) implies self.memberEnd->size() = 2</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Association-specialized_end_types" name="specialized_end_types">
      <ownedComment xmi:id="Association-specialized_end_types-_ownedComment.0">
        <body>When an association specializes another association, every end of the specific association corresponds to an end of the general association, and the specific end reaches the same type or a subtype of the more general end.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Association-specialized_end_types-_specification">
        <language>OCL</language>
        <body>Sequence{1..self.memberEnd->size()}->
	forAll(i | self.general->select(oclIsKindOf(Association)).oclAsType(Association)->
		forAll(ga |self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="Association-_generalization.0"/>
    <generalization xmi:id="Association-_generalization.1"/>
    <ownedAttribute xmi:id="Association-endType" name="endType" visibility="public" isOrdered="true" isReadOnly="true" isDerived="true">
      <ownedComment xmi:id="Association-endType-_ownedComment.0">
        <body>References the classifiers that are used as types of the ends of the association.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Association-endType-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Association-isDerived" name="isDerived" visibility="public">
      <ownedComment xmi:id="Association-isDerived-_ownedComment.0">
        <body>Specifies whether the association is derived from other model elements such as other associations or constraints.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="Association-isDerived-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Association-memberEnd" name="memberEnd" visibility="public" isOrdered="true">
      <ownedComment xmi:id="Association-memberEnd-_ownedComment.0">
        <body>Each end represents participation of instances of the classifier connected to the end in links of the association.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Association-memberEnd-_lowerValue" value="2"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Association-memberEnd-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Association-navigableOwnedEnd" name="navigableOwnedEnd" visibility="public">
      <ownedComment xmi:id="Association-navigableOwnedEnd-_ownedComment.0">
        <body>The navigable ends that are owned by the association itself.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Association-navigableOwnedEnd-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Association-navigableOwnedEnd-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Association-ownedEnd" name="ownedEnd" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="Association-ownedEnd-_ownedComment.0">
        <body>The ends that are owned by the association itself.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Association-ownedEnd-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Association-ownedEnd-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedOperation xmi:id="Association-endType.1" name="endType" visibility="public" isQuery="true">
      <ownedComment xmi:id="Association-endType.1-_ownedComment.0">
        <body>endType is derived from the types of the member ends.</body>
      </ownedComment>
      <ownedRule xmi:id="Association-endType.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Association-endType.1-spec-_specification">
          <language>OCL</language>
          <body>result = self.memberEnd->collect(e | e.type)</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Association-endType.1-result" name="result" visibility="public" isOrdered="true" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Association-endType.1-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Association-endType.1-result-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="AssociationClass" name="AssociationClass">
    <ownedComment xmi:id="AssociationClass-_ownedComment.0">
      <body>A model element that has both association and class properties. An AssociationClass can be seen as an association that also has class properties, or as a class that also has association properties. It not only connects a set of classifiers but also defines a set of features that belong to the relationship itself and not to any of the classifiers.</body>
    </ownedComment>
    <ownedRule xmi:id="AssociationClass-disjoint_attributes_ends" name="disjoint_attributes_ends">
      <ownedComment xmi:id="AssociationClass-disjoint_attributes_ends-_ownedComment.0">
        <body>The owned attributes and owned ends of an AssociationClass are disjoint</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="AssociationClass-disjoint_attributes_ends-_specification">
        <language>OCL</language>
        <body>ownedAttribute->intersection(ownedEnd)->isEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="AssociationClass-cannot_be_defined" name="cannot_be_defined">
      <ownedComment xmi:id="AssociationClass-cannot_be_defined-_ownedComment.0">
        <body>An AssociationClass cannot be defined between itself and something else.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="AssociationClass-cannot_be_defined-_specification">
        <language>OCL</language>
        <body>self.endType->excludes(self) and self.endType>collect(et|et.allparents()->excludes(self))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="AssociationClass-_generalization.0"/>
    <generalization xmi:id="AssociationClass-_generalization.1"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Behavior" name="Behavior" isAbstract="true">
    <ownedComment xmi:id="Behavior-_ownedComment.0">
      <body>Behavior is a specification of how its context classifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution.</body>
    </ownedComment>
    <ownedComment xmi:id="Behavior-_ownedComment.1">
      <body>A behavior owns zero or more parameter sets.</body>
    </ownedComment>
    <ownedRule xmi:id="Behavior-parameters_match" name="parameters_match">
      <ownedComment xmi:id="Behavior-parameters_match-_ownedComment.0">
        <body>The parameters of the behavior must match the parameters of the implemented behavioral feature.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Behavior-parameters_match-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Behavior-feature_of_context_classifier" name="feature_of_context_classifier">
      <ownedComment xmi:id="Behavior-feature_of_context_classifier-_ownedComment.0">
        <body>The implemented behavioral feature must be a feature (possibly inherited) of the context classifier of the behavior.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Behavior-feature_of_context_classifier-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Behavior-must_realize" name="must_realize">
      <ownedComment xmi:id="Behavior-must_realize-_ownedComment.0">
        <body>If the implemented behavioral feature has been redefined in the ancestors of the owner of the behavior, then the behavior must realize the latest redefining behavioral feature.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Behavior-must_realize-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Behavior-most_one_behaviour" name="most_one_behaviour">
      <ownedComment xmi:id="Behavior-most_one_behaviour-_ownedComment.0">
        <body>There may be at most one behavior for a given pairing of classifier (as owner of the behavior) and behavioral feature (as specification of the behavior).</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Behavior-most_one_behaviour-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="Behavior-_generalization.0"/>
    <ownedAttribute xmi:id="Behavior-context" name="context" visibility="public" isReadOnly="true" isDerived="true">
      <ownedComment xmi:id="Behavior-context-_ownedComment.0">
        <body>The classifier that is the context for the execution of the behavior. If the behavior is owned by a BehavioredClassifier, that classifier is the context. Otherwise, the context is the first BehavioredClassifier reached by following the chain of owner relationships. For example, following this algorithm, the context of an entry action in a state machine is the classifier that owns the state machine. The features of the context classifier as well as the elements visible to the context classifier are visible to the behavior.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Behavior-context-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Behavior-isReentrant" name="isReentrant" visibility="public">
      <ownedComment xmi:id="Behavior-isReentrant-_ownedComment.0">
        <body>Tells whether the behavior can be invoked while it is still executing from a previous invocation.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="Behavior-isReentrant-_defaultValue" value="true"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Behavior-ownedParameter" name="ownedParameter" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="Behavior-ownedParameter-_ownedComment.0">
        <body>References a list of parameters to the behavior which describes the order and type of arguments that can be given when the behavior is invoked and of the values which will be returned when the behavior completes its execution.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Behavior-ownedParameter-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Behavior-ownedParameter-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Behavior-ownedParameterSet" name="ownedParameterSet" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Behavior-ownedParameterSet-_ownedComment.0">
        <body>The ParameterSets owned by this Behavior.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Behavior-ownedParameterSet-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Behavior-ownedParameterSet-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Behavior-postcondition" name="postcondition" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Behavior-postcondition-_ownedComment.0">
        <body>An optional set of Constraints specifying what is fulfilled after the execution of the behavior is completed, if its precondition was fulfilled before its invocation.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Behavior-postcondition-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Behavior-postcondition-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Behavior-precondition" name="precondition" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Behavior-precondition-_ownedComment.0">
        <body>An optional set of Constraints specifying what must be fulfilled when the behavior is invoked.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Behavior-precondition-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Behavior-precondition-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Behavior-redefinedBehavior" name="redefinedBehavior" visibility="public">
      <ownedComment xmi:id="Behavior-redefinedBehavior-_ownedComment.0">
        <body>References a behavior that this behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the behavior implements a behavioral feature, it replaces the redefined behavior. If the behavior is a classifier behavior, it extends the redefined behavior.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Behavior-redefinedBehavior-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Behavior-redefinedBehavior-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Behavior-specification" name="specification" visibility="public">
      <ownedComment xmi:id="Behavior-specification-_ownedComment.0">
        <body>Designates a behavioral feature that the behavior implements. The behavioral feature must be owned by the classifier that owns the behavior or be inherited by it. The parameters of the behavioral feature and the implementing behavior must match. A behavior does not need to have a specification, in which case it either is the classifer behavior of a BehavioredClassifier or it can only be invoked by another behavior of the classifier.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Behavior-specification-_lowerValue"/>
    </ownedAttribute>
    <ownedOperation xmi:id="Behavior-context.1" name="context" visibility="public" isQuery="true">
      <ownedComment xmi:id="Behavior-context.1-_ownedComment.0">
        <body>Missing derivation for Behavior::/context : BehavioredClassifier</body>
      </ownedComment>
      <ownedRule xmi:id="Behavior-context.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Behavior-context.1-spec-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Behavior-context.1-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Behavior-context.1-result-_lowerValue"/>
      </ownedParameter>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="BehaviorExecutionSpecification" name="BehaviorExecutionSpecification">
    <ownedComment xmi:id="BehaviorExecutionSpecification-_ownedComment.0">
      <body>A behavior execution specification is a kind of execution specification representing the execution of a behavior.</body>
    </ownedComment>
    <generalization xmi:id="BehaviorExecutionSpecification-_generalization.0"/>
    <ownedAttribute xmi:id="BehaviorExecutionSpecification-behavior" name="behavior" visibility="public">
      <ownedComment xmi:id="BehaviorExecutionSpecification-behavior-_ownedComment.0">
        <body>Behavior whose execution is occurring.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="BehaviorExecutionSpecification-behavior-_lowerValue"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="BehavioralFeature" name="BehavioralFeature" isAbstract="true">
    <ownedComment xmi:id="BehavioralFeature-_ownedComment.0">
      <body>A behavioral feature is a feature of a classifier that specifies an aspect of the behavior of its instances.</body>
    </ownedComment>
    <ownedComment xmi:id="BehavioralFeature-_ownedComment.1">
      <body>A behavioral feature is implemented (realized) by a behavior. A behavioral feature specifies that a classifier will respond to a designated request by invoking its implementing method.</body>
    </ownedComment>
    <ownedComment xmi:id="BehavioralFeature-_ownedComment.2">
      <body>A behavioral feature owns zero or more parameter sets.</body>
    </ownedComment>
    <generalization xmi:id="BehavioralFeature-_generalization.0"/>
    <generalization xmi:id="BehavioralFeature-_generalization.1"/>
    <ownedAttribute xmi:id="BehavioralFeature-concurrency" name="concurrency" visibility="public">
      <ownedComment xmi:id="BehavioralFeature-concurrency-_ownedComment.0">
        <body>Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a class with isActive being false). Active instances control access to their own behavioral features.</body>
      </ownedComment>
      <defaultValue xmi:type="uml:InstanceValue" xmi:id="BehavioralFeature-concurrency-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="BehavioralFeature-isAbstract" name="isAbstract" visibility="public">
      <ownedComment xmi:id="BehavioralFeature-isAbstract-_ownedComment.0">
        <body>If true, then the behavioral feature does not have an implementation, and one must be supplied by a more specific element. If false, the behavioral feature must have an implementation in the classifier or one must be inherited from a more general element.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="BehavioralFeature-isAbstract-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="BehavioralFeature-method" name="method" visibility="public">
      <ownedComment xmi:id="BehavioralFeature-method-_ownedComment.0">
        <body>A behavioral description that implements the behavioral feature. There may be at most one behavior for a particular pairing of a classifier (as owner of the behavior) and a behavioral feature (as specification of the behavior).</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="BehavioralFeature-method-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="BehavioralFeature-method-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="BehavioralFeature-ownedParameter" name="ownedParameter" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="BehavioralFeature-ownedParameter-_ownedComment.0">
        <body>Specifies the ordered set of formal parameters of this BehavioralFeature.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="BehavioralFeature-ownedParameter-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="BehavioralFeature-ownedParameter-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="BehavioralFeature-ownedParameterSet" name="ownedParameterSet" visibility="public" aggregation="composite">
      <ownedComment xmi:id="BehavioralFeature-ownedParameterSet-_ownedComment.0">
        <body>The ParameterSets owned by this BehavioralFeature.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="BehavioralFeature-ownedParameterSet-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="BehavioralFeature-ownedParameterSet-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="BehavioralFeature-raisedException" name="raisedException" visibility="public">
      <ownedComment xmi:id="BehavioralFeature-raisedException-_ownedComment.0">
        <body>References the Types representing exceptions that may be raised during an invocation of this feature.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="BehavioralFeature-raisedException-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="BehavioralFeature-raisedException-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedOperation xmi:id="BehavioralFeature-isDistinguishableFrom" name="isDistinguishableFrom" visibility="public" isQuery="true">
      <ownedComment xmi:id="BehavioralFeature-isDistinguishableFrom-_ownedComment.0">
        <body>The query isDistinguishableFrom() determines whether two BehavioralFeatures may coexist in the same Namespace. It specifies that they have to have different signatures.</body>
      </ownedComment>
      <ownedRule xmi:id="BehavioralFeature-isDistinguishableFrom-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="BehavioralFeature-isDistinguishableFrom-spec-_specification">
          <language>OCL</language>
          <body>result = if n.oclIsKindOf(BehavioralFeature)
then
  if ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->notEmpty()
  then Set{}->including(self)->including(n)->isUnique(bf | bf.ownedParameter->collect(type))
  else true
  endif
else true
endif</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="BehavioralFeature-isDistinguishableFrom-result" name="result" visibility="public" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedParameter>
      <ownedParameter xmi:id="BehavioralFeature-isDistinguishableFrom-n" name="n" visibility="public"/>
      <ownedParameter xmi:id="BehavioralFeature-isDistinguishableFrom-ns" name="ns" visibility="public"/>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="BehavioredClassifier" name="BehavioredClassifier" isAbstract="true">
    <ownedComment xmi:id="BehavioredClassifier-_ownedComment.0">
      <body>A behaviored classifier may have an interface realization.</body>
    </ownedComment>
    <ownedComment xmi:id="BehavioredClassifier-_ownedComment.1">
      <body>A classifier can have behavior specifications defined in its namespace. One of these may specify the behavior of the classifier itself.</body>
    </ownedComment>
    <ownedRule xmi:id="BehavioredClassifier-class_behavior" name="class_behavior">
      <ownedComment xmi:id="BehavioredClassifier-class_behavior-_ownedComment.0">
        <body>If a behavior is classifier behavior, it does not have a specification.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="BehavioredClassifier-class_behavior-_specification">
        <language>OCL</language>
        <body>self.classifierBehavior->notEmpty() implies self.classifierBehavior.specification->isEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="BehavioredClassifier-_generalization.0"/>
    <ownedAttribute xmi:id="BehavioredClassifier-classifierBehavior" name="classifierBehavior" visibility="public">
      <ownedComment xmi:id="BehavioredClassifier-classifierBehavior-_ownedComment.0">
        <body>A behavior specification that specifies the behavior of the classifier itself.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="BehavioredClassifier-classifierBehavior-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="BehavioredClassifier-interfaceRealization" name="interfaceRealization" visibility="public" aggregation="composite">
      <ownedComment xmi:id="BehavioredClassifier-interfaceRealization-_ownedComment.0">
        <body>The set of InterfaceRealizations owned by the BehavioredClassifier. Interface realizations reference the Interfaces of which the BehavioredClassifier is an implementation.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="BehavioredClassifier-interfaceRealization-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="BehavioredClassifier-interfaceRealization-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="BehavioredClassifier-ownedBehavior" name="ownedBehavior" visibility="public" aggregation="composite">
      <ownedComment xmi:id="BehavioredClassifier-ownedBehavior-_ownedComment.0">
        <body>References behavior specifications owned by a classifier.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="BehavioredClassifier-ownedBehavior-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="BehavioredClassifier-ownedBehavior-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="BroadcastSignalAction" name="BroadcastSignalAction">
    <ownedComment xmi:id="BroadcastSignalAction-_ownedComment.0">
      <body>A broadcast signal action is an action that transmits a signal instance to all the potential target objects in the system, which may cause the firing of a state machine transitions or the execution of associated activities of a target object. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately after the signals are sent out. It does not wait for receipt. Any reply messages are ignored and are not transmitted to the requestor.</body>
    </ownedComment>
    <ownedRule xmi:id="BroadcastSignalAction-type_ordering_multiplicity" name="type_ordering_multiplicity">
      <ownedComment xmi:id="BroadcastSignalAction-type_ordering_multiplicity-_ownedComment.0">
        <body>The type, ordering, and multiplicity of an argument pin must be the same as the corresponding attribute of the signal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="BroadcastSignalAction-type_ordering_multiplicity-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="BroadcastSignalAction-number_and_order" name="number_and_order">
      <ownedComment xmi:id="BroadcastSignalAction-number_and_order-_ownedComment.0">
        <body>The number and order of argument pins must be the same as the number and order of attributes in the signal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="BroadcastSignalAction-number_and_order-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="BroadcastSignalAction-_generalization.0"/>
    <ownedAttribute xmi:id="BroadcastSignalAction-signal" name="signal" visibility="public">
      <ownedComment xmi:id="BroadcastSignalAction-signal-_ownedComment.0">
        <body>The specification of signal object transmitted to the target objects.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="CallAction" name="CallAction" isAbstract="true">
    <ownedComment xmi:id="CallAction-_ownedComment.0">
      <body>CallAction is an abstract class for actions that invoke behavior and receive return values.</body>
    </ownedComment>
    <ownedRule xmi:id="CallAction-synchronous_call" name="synchronous_call">
      <ownedComment xmi:id="CallAction-synchronous_call-_ownedComment.0">
        <body>Only synchronous call actions can have result pins.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CallAction-synchronous_call-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CallAction-number_and_order" name="number_and_order">
      <ownedComment xmi:id="CallAction-number_and_order-_ownedComment.0">
        <body>The number and order of argument pins must be the same as the number and order of parameters of the invoked behavior or behavioral feature. Pins are matched to parameters by order.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CallAction-number_and_order-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CallAction-type_ordering_multiplicity" name="type_ordering_multiplicity">
      <ownedComment xmi:id="CallAction-type_ordering_multiplicity-_ownedComment.0">
        <body>The type, ordering, and multiplicity of an argument pin must be the same as the corresponding parameter of the behavior or behavioral feature.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CallAction-type_ordering_multiplicity-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="CallAction-_generalization.0"/>
    <ownedAttribute xmi:id="CallAction-isSynchronous" name="isSynchronous" visibility="public">
      <ownedComment xmi:id="CallAction-isSynchronous-_ownedComment.0">
        <body>If true, the call is synchronous and the caller waits for completion of the invoked behavior. If false, the call is asynchronous and the caller proceeds immediately and does not expect a return values.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="CallAction-isSynchronous-_defaultValue" value="true"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="CallAction-result" name="result" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="CallAction-result-_ownedComment.0">
        <body>A list of output pins where the results of performing the invocation are placed.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="CallAction-result-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="CallAction-result-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="CallBehaviorAction" name="CallBehaviorAction">
    <ownedComment xmi:id="CallBehaviorAction-_ownedComment.0">
      <body>A call behavior action is a call action that invokes a behavior directly rather than invoking a behavioral feature that, in turn, results in the invocation of that behavior. The argument values of the action are available to the execution of the invoked behavior. For synchronous calls the execution of the call behavior action waits until the execution of the invoked behavior completes and a result is returned on its output pin. The action completes immediately without a result, if the call is asynchronous. In particular, the invoked behavior may be an activity.</body>
    </ownedComment>
    <ownedRule xmi:id="CallBehaviorAction-result_pin_equal_parameter" name="result_pin_equal_parameter">
      <ownedComment xmi:id="CallBehaviorAction-result_pin_equal_parameter-_ownedComment.0">
        <body>The number of result pins and the number of parameters of the behavior of type return, out, and in-out must be equal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CallBehaviorAction-result_pin_equal_parameter-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CallBehaviorAction-type_ordering_multiplicity" name="type_ordering_multiplicity">
      <ownedComment xmi:id="CallBehaviorAction-type_ordering_multiplicity-_ownedComment.0">
        <body>The type, ordering, and multiplicity of an argument or result pin is derived from the corresponding parameter of the behavior.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CallBehaviorAction-type_ordering_multiplicity-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CallBehaviorAction-argument_pin_equal_parameter" name="argument_pin_equal_parameter">
      <ownedComment xmi:id="CallBehaviorAction-argument_pin_equal_parameter-_ownedComment.0">
        <body>The number of argument pins and the number of parameters of the behavior of type in and in-out must be equal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CallBehaviorAction-argument_pin_equal_parameter-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="CallBehaviorAction-_generalization.0"/>
    <ownedAttribute xmi:id="CallBehaviorAction-behavior" name="behavior" visibility="public">
      <ownedComment xmi:id="CallBehaviorAction-behavior-_ownedComment.0">
        <body>The invoked behavior. It must be capable of accepting and returning control.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="CallEvent" name="CallEvent">
    <ownedComment xmi:id="CallEvent-_ownedComment.0">
      <body>A call event models the receipt by an object of a message invoking a call of an operation.</body>
    </ownedComment>
    <generalization xmi:id="CallEvent-_generalization.0"/>
    <ownedAttribute xmi:id="CallEvent-operation" name="operation" visibility="public">
      <ownedComment xmi:id="CallEvent-operation-_ownedComment.0">
        <body>Designates the operation whose invocation raised the call event.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="CallOperationAction" name="CallOperationAction">
    <ownedComment xmi:id="CallOperationAction-_ownedComment.0">
      <body>A call operation action is an action that transmits an operation call request to the target object, where it may cause the invocation of associated behavior. The argument values of the action are available to the execution of the invoked behavior. If the action is marked synchronous, the execution of the call operation action waits until the execution of the invoked behavior completes and a reply transmission is returned to the caller; otherwise execution of the action is complete when the invocation of the operation is established and the execution of the invoked operation proceeds concurrently with the execution of the calling behavior. Any values returned as part of the reply transmission are put on the result output pins of the call operation action. Upon receipt of the reply transmission, execution of the call operation action is complete.</body>
    </ownedComment>
    <ownedRule xmi:id="CallOperationAction-argument_pin_equal_parameter" name="argument_pin_equal_parameter">
      <ownedComment xmi:id="CallOperationAction-argument_pin_equal_parameter-_ownedComment.0">
        <body>The number of argument pins and the number of owned parameters of the operation of type in and in-out must be equal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CallOperationAction-argument_pin_equal_parameter-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CallOperationAction-result_pin_equal_parameter" name="result_pin_equal_parameter">
      <ownedComment xmi:id="CallOperationAction-result_pin_equal_parameter-_ownedComment.0">
        <body>The number of result pins and the number of owned parameters of the operation of type return, out, and in-out must be equal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CallOperationAction-result_pin_equal_parameter-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CallOperationAction-type_target_pin" name="type_target_pin">
      <ownedComment xmi:id="CallOperationAction-type_target_pin-_ownedComment.0">
        <body>The type of the target pin must be the same as the type that owns the operation.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CallOperationAction-type_target_pin-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CallOperationAction-type_ordering_multiplicity" name="type_ordering_multiplicity">
      <ownedComment xmi:id="CallOperationAction-type_ordering_multiplicity-_ownedComment.0">
        <body>The type, ordering, and multiplicity of an argument or result pin is derived from the corresponding owned parameter of the operation.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CallOperationAction-type_ordering_multiplicity-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="CallOperationAction-_generalization.0"/>
    <ownedAttribute xmi:id="CallOperationAction-operation" name="operation" visibility="public">
      <ownedComment xmi:id="CallOperationAction-operation-_ownedComment.0">
        <body>The operation to be invoked by the action execution.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="CallOperationAction-target" name="target" visibility="public" aggregation="composite">
      <ownedComment xmi:id="CallOperationAction-target-_ownedComment.0">
        <body>The target object to which the request is sent. The classifier of the target object is used to dynamically determine a behavior to invoke. This object constitutes the context of the execution of the operation.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="CentralBufferNode" name="CentralBufferNode">
    <ownedComment xmi:id="CentralBufferNode-_ownedComment.0">
      <body>A central buffer node is an object node for managing flows from multiple sources and destinations.</body>
    </ownedComment>
    <generalization xmi:id="CentralBufferNode-_generalization.0"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ChangeEvent" name="ChangeEvent">
    <ownedComment xmi:id="ChangeEvent-_ownedComment.0">
      <body>A change event models a change in the system configuration that makes a condition true.</body>
    </ownedComment>
    <generalization xmi:id="ChangeEvent-_generalization.0"/>
    <ownedAttribute xmi:id="ChangeEvent-changeExpression" name="changeExpression" visibility="public" aggregation="composite">
      <ownedComment xmi:id="ChangeEvent-changeExpression-_ownedComment.0">
        <body>A Boolean-valued expression that will result in a change event whenever its value changes from false to true.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Class" name="Class">
    <ownedComment xmi:id="Class-_ownedComment.0">
      <body>A class may be designated as active (i.e., each of its instances having its own thread of control) or passive (i.e., each of its instances executing within the context of some other object). A class may also specify which signals the instances of this class handle.</body>
    </ownedComment>
    <ownedComment xmi:id="Class-_ownedComment.1">
      <body>A class describes a set of objects that share the same specifications of features, constraints, and semantics.</body>
    </ownedComment>
    <ownedComment xmi:id="Class-_ownedComment.2">
      <body>A class has the capability to have an internal structure and ports.</body>
    </ownedComment>
    <ownedComment xmi:id="Class-_ownedComment.3">
      <body>Class has derived association that indicates how it may be extended through one or more stereotypes. Stereotype is the only kind of metaclass that cannot be extended by stereotypes.</body>
    </ownedComment>
    <ownedRule xmi:id="Class-passive_class" name="passive_class">
      <ownedComment xmi:id="Class-passive_class-_ownedComment.0">
        <body>A passive class may not own receptions.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Class-passive_class-_specification">
        <language>OCL</language>
        <body>not self.isActive implies self.ownedReception.isEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="Class-_generalization.0"/>
    <generalization xmi:id="Class-_generalization.1"/>
    <ownedAttribute xmi:id="Class-extension" name="extension" visibility="public" isReadOnly="true" isDerived="true">
      <ownedComment xmi:id="Class-extension-_ownedComment.0">
        <body>References the Extensions that specify additional properties of the metaclass. The property is derived from the extensions whose memberEnds are typed by the Class.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Class-extension-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Class-extension-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Class-isAbstract" name="isAbstract" visibility="public">
      <ownedComment xmi:id="Class-isAbstract-_ownedComment.0">
        <body>If true, the Classifier does not provide a complete declaration and can typically not be instantiated. An abstract classifier is intended to be used by other classifiers e.g. as the target of general metarelationships or generalization relationships.</body>
      </ownedComment>
      <ownedComment xmi:id="Class-isAbstract-_ownedComment.1">
        <body>True when a class is abstract.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="Class-isAbstract-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Class-isActive" name="isActive" visibility="public">
      <ownedComment xmi:id="Class-isActive-_ownedComment.0">
        <body>Determines whether an object specified by this class is active or not. If true, then the owning class is referred to as an active class. If false, then such a class is referred to as a passive class.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="Class-isActive-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Class-nestedClassifier" name="nestedClassifier" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="Class-nestedClassifier-_ownedComment.0">
        <body>References all the Classifiers that are defined (nested) within the Class.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Class-nestedClassifier-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Class-nestedClassifier-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Class-ownedAttribute" name="ownedAttribute" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="Class-ownedAttribute-_ownedComment.0">
        <body>The attributes (i.e. the properties) owned by the class.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Class-ownedAttribute-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Class-ownedAttribute-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Class-ownedOperation" name="ownedOperation" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="Class-ownedOperation-_ownedComment.0">
        <body>The operations owned by the class.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Class-ownedOperation-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Class-ownedOperation-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Class-ownedReception" name="ownedReception" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Class-ownedReception-_ownedComment.0">
        <body>Receptions that objects of this class are willing to accept.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Class-ownedReception-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Class-ownedReception-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Class-superClass" name="superClass" visibility="public" isDerived="true">
      <ownedComment xmi:id="Class-superClass-_ownedComment.0">
        <body>This gives the superclasses of a class.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Class-superClass-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Class-superClass-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedOperation xmi:id="Class-extension.1" name="extension" visibility="public" isQuery="true">
      <ownedComment xmi:id="Class-extension.1-_ownedComment.0">
        <body>Missing derivation for Class::/extension : Extension</body>
      </ownedComment>
      <ownedRule xmi:id="Class-extension.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Class-extension.1-spec-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Class-extension.1-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Class-extension.1-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Class-extension.1-result-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="Class-inherit" name="inherit" visibility="public" isQuery="true">
      <ownedComment xmi:id="Class-inherit-_ownedComment.0">
        <body>The inherit operation is overridden to exclude redefined properties.</body>
      </ownedComment>
      <ownedRule xmi:id="Class-inherit-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Class-inherit-spec-_specification">
          <language>OCL</language>
          <body>result = inhs->excluding(inh | ownedMember->select(oclIsKindOf(RedefinableElement))->select(redefinedElement->includes(inh)))</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Class-inherit-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Class-inherit-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Class-inherit-result-_upperValue" value="*"/>
      </ownedParameter>
      <ownedParameter xmi:id="Class-inherit-inhs" name="inhs" visibility="public">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Class-inherit-inhs-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Class-inherit-inhs-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="Class-superClass.1" name="superClass" visibility="public" isQuery="true">
      <ownedComment xmi:id="Class-superClass.1-_ownedComment.0">
        <body>Missing derivation for Class::/superClass : Class</body>
      </ownedComment>
      <ownedRule xmi:id="Class-superClass.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Class-superClass.1-spec-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Class-superClass.1-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Class-superClass.1-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Class-superClass.1-result-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Classifier" name="Classifier" isAbstract="true">
    <ownedComment xmi:id="Classifier-_ownedComment.0">
      <body>A classifier is a classification of instances - it describes a set of instances that have features in common. A classifier can specify a generalization hierarchy by referencing its general classifiers.</body>
    </ownedComment>
    <ownedComment xmi:id="Classifier-_ownedComment.1">
      <body>A classifier has the capability to own use cases. Although the owning classifier typically represents the subject to which the owned use cases apply, this is not necessarily the case. In principle, the same use case can be applied to multiple subjects, as identified by the subject association role of a use case.</body>
    </ownedComment>
    <ownedComment xmi:id="Classifier-_ownedComment.2">
      <body>Classifier is defined to be a kind of templateable element so that a classifier can be parameterized. It is also defined to be a kind of parameterable element so that a classifier can be a formal template parameter.</body>
    </ownedComment>
    <ownedComment xmi:id="Classifier-_ownedComment.3">
      <body>A classifier has the capability to own collaboration uses. These collaboration uses link a collaboration with the classifier to give a description of the workings of the classifier.</body>
    </ownedComment>
    <ownedRule xmi:id="Classifier-non_final_parents" name="non_final_parents">
      <ownedComment xmi:id="Classifier-non_final_parents-_ownedComment.0">
        <body>The parents of a classifier must be non-final.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-non_final_parents-_specification">
        <language>OCL</language>
        <body>self.parents()->forAll(not isFinalSpecialization)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Classifier-no_cycles_in_generalization" name="no_cycles_in_generalization">
      <ownedComment xmi:id="Classifier-no_cycles_in_generalization-_ownedComment.0">
        <body>Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-no_cycles_in_generalization-_specification">
        <language>OCL</language>
        <body>not self.allParents()->includes(self)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Classifier-specialize_type" name="specialize_type">
      <ownedComment xmi:id="Classifier-specialize_type-_ownedComment.0">
        <body>A classifier may only specialize classifiers of a valid type.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-specialize_type-_specification">
        <language>OCL</language>
        <body>self.parents()->forAll(c | self.maySpecializeType(c))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Classifier-maps_to_generalization_set" name="maps_to_generalization_set">
      <ownedComment xmi:id="Classifier-maps_to_generalization_set-_ownedComment.0">
        <body>The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances also be its subclasses.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-maps_to_generalization_set-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="Classifier-_generalization.0"/>
    <generalization xmi:id="Classifier-_generalization.1"/>
    <generalization xmi:id="Classifier-_generalization.2"/>
    <generalization xmi:id="Classifier-_generalization.3"/>
    <ownedAttribute xmi:id="Classifier-attribute" name="attribute" visibility="public" isReadOnly="true" isDerived="true" isDerivedUnion="true">
      <ownedComment xmi:id="Classifier-attribute-_ownedComment.0">
        <body>Refers to all of the Properties that are direct (i.e. not inherited or imported) attributes of the classifier.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-attribute-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-attribute-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-collaborationUse" name="collaborationUse" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Classifier-collaborationUse-_ownedComment.0">
        <body>References the collaboration uses owned by the classifier.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-collaborationUse-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-collaborationUse-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-feature" name="feature" visibility="public" isReadOnly="true" isDerived="true" isDerivedUnion="true">
      <ownedComment xmi:id="Classifier-feature-_ownedComment.0">
        <body>Specifies each feature defined in the classifier.</body>
      </ownedComment>
      <ownedComment xmi:id="Classifier-feature-_ownedComment.1">
        <body>Note that there may be members of the Classifier that are of the type Feature but are not included in this association, e.g. inherited features.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-feature-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-feature-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-general" name="general" visibility="public" isDerived="true">
      <ownedComment xmi:id="Classifier-general-_ownedComment.0">
        <body>Specifies the general Classifiers for this Classifier.</body>
      </ownedComment>
      <ownedComment xmi:id="Classifier-general-_ownedComment.1">
        <body>References the general classifier in the Generalization relationship.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-general-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-general-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-generalization" name="generalization" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Classifier-generalization-_ownedComment.0">
        <body>Specifies the Generalization relationships for this Classifier. These Generalizations navigaten to more general classifiers in the generalization hierarchy.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-generalization-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-generalization-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-inheritedMember" name="inheritedMember" visibility="public" isReadOnly="true" isDerived="true">
      <ownedComment xmi:id="Classifier-inheritedMember-_ownedComment.0">
        <body>Specifies all elements inherited by this classifier from the general classifiers.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-inheritedMember-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-inheritedMember-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-isAbstract" name="isAbstract" visibility="public">
      <ownedComment xmi:id="Classifier-isAbstract-_ownedComment.0">
        <body>If true, the Classifier does not provide a complete declaration and can typically not be instantiated. An abstract classifier is intended to be used by other classifiers e.g. as the target of general metarelationships or generalization relationships.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="Classifier-isAbstract-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-isFinalSpecialization" name="isFinalSpecialization" visibility="public">
      <ownedComment xmi:id="Classifier-isFinalSpecialization-_ownedComment.0">
        <body>If true, the Classifier cannot be specialized by generalization. Note that this property is preserved through package merge operations; that is, the capability to specialize a Classifier (i.e., isFinalSpecialization =false) must be preserved in the resulting Classifier of a package merge operation where a Classifier with isFinalSpecialization =false is merged with a matching Classifier with isFinalSpecialization =true: the resulting Classifier will have isFinalSpecialization =false.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="Classifier-isFinalSpecialization-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-ownedTemplateSignature" name="ownedTemplateSignature" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Classifier-ownedTemplateSignature-_ownedComment.0">
        <body>The optional template signature specifying the formal template parameters.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-ownedTemplateSignature-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-ownedUseCase" name="ownedUseCase" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Classifier-ownedUseCase-_ownedComment.0">
        <body>References the use cases owned by this classifier.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-ownedUseCase-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-ownedUseCase-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-powertypeExtent" name="powertypeExtent" visibility="public">
      <ownedComment xmi:id="Classifier-powertypeExtent-_ownedComment.0">
        <body>Designates the GeneralizationSet of which the associated Classifier is a power type.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-powertypeExtent-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-powertypeExtent-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-redefinedClassifier" name="redefinedClassifier" visibility="public">
      <ownedComment xmi:id="Classifier-redefinedClassifier-_ownedComment.0">
        <body>References the Classifiers that are redefined by this Classifier.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-redefinedClassifier-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-redefinedClassifier-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-representation" name="representation" visibility="public">
      <ownedComment xmi:id="Classifier-representation-_ownedComment.0">
        <body>References a collaboration use which indicates the collaboration that represents this classifier.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-representation-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-substitution" name="substitution" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Classifier-substitution-_ownedComment.0">
        <body>References the substitutions that are owned by this Classifier.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-substitution-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-substitution-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-templateParameter" name="templateParameter" visibility="public">
      <ownedComment xmi:id="Classifier-templateParameter-_ownedComment.0">
        <body>The template parameter that exposes this element as a formal parameter.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-templateParameter-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Classifier-useCase" name="useCase" visibility="public">
      <ownedComment xmi:id="Classifier-useCase-_ownedComment.0">
        <body>The set of use cases for which this Classifier is the subject.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-useCase-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-useCase-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedOperation xmi:id="Classifier-allFeatures" name="allFeatures" visibility="public" isQuery="true">
      <ownedComment xmi:id="Classifier-allFeatures-_ownedComment.0">
        <body>The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.</body>
      </ownedComment>
      <ownedRule xmi:id="Classifier-allFeatures-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-allFeatures-spec-_specification">
          <language>OCL</language>
          <body>result = member->select(oclIsKindOf(Feature))</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Classifier-allFeatures-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-allFeatures-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-allFeatures-result-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="Classifier-allParents" name="allParents" visibility="public" isQuery="true">
      <ownedComment xmi:id="Classifier-allParents-_ownedComment.0">
        <body>The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.</body>
      </ownedComment>
      <ownedRule xmi:id="Classifier-allParents-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-allParents-spec-_specification">
          <language>OCL</language>
          <body>result = self.parents()->union(self.parents()->collect(p | p.allParents())</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Classifier-allParents-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-allParents-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-allParents-result-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="Classifier-conformsTo" name="conformsTo" visibility="public" isQuery="true">
      <ownedComment xmi:id="Classifier-conformsTo-_ownedComment.0">
        <body>The query conformsTo() gives true for a classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations.</body>
      </ownedComment>
      <ownedRule xmi:id="Classifier-conformsTo-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-conformsTo-spec-_specification">
          <language>OCL</language>
          <body>result = (self=other) or (self.allParents()->includes(other))</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Classifier-conformsTo-result" name="result" visibility="public" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedParameter>
      <ownedParameter xmi:id="Classifier-conformsTo-other" name="other" visibility="public"/>
    </ownedOperation>
    <ownedOperation xmi:id="Classifier-general.1" name="general" visibility="public" isQuery="true">
      <ownedComment xmi:id="Classifier-general.1-_ownedComment.0">
        <body>The general classifiers are the classifiers referenced by the generalization relationships.</body>
      </ownedComment>
      <ownedRule xmi:id="Classifier-general.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-general.1-spec-_specification">
          <language>OCL</language>
          <body>result = self.parents()</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Classifier-general.1-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-general.1-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-general.1-result-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="Classifier-hasVisibilityOf" name="hasVisibilityOf" visibility="public" isQuery="true">
      <ownedComment xmi:id="Classifier-hasVisibilityOf-_ownedComment.0">
        <body>The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.</body>
      </ownedComment>
      <ownedRule xmi:id="Classifier-hasVisibilityOf-pre" name="pre">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-hasVisibilityOf-pre-_specification">
          <language>OCL</language>
          <body>self.allParents()->including(self)->collect(c | c.member)->includes(n)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="Classifier-hasVisibilityOf-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-hasVisibilityOf-spec-_specification">
          <language>OCL</language>
          <body>result = (n.visibility &lt;> VisibilityKind::private)</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Classifier-hasVisibilityOf-result" name="result" visibility="public" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedParameter>
      <ownedParameter xmi:id="Classifier-hasVisibilityOf-n" name="n" visibility="public"/>
    </ownedOperation>
    <ownedOperation xmi:id="Classifier-inherit" name="inherit" visibility="public" isQuery="true">
      <ownedComment xmi:id="Classifier-inherit-_ownedComment.0">
        <body>The inherit operation is overridden to exclude redefined properties.</body>
      </ownedComment>
      <ownedComment xmi:id="Classifier-inherit-_ownedComment.1">
        <body>The query inherit() defines how to inherit a set of elements. Here the operation is defined to inherit them all. It is intended to be redefined in circumstances where inheritance is affected by redefinition.</body>
      </ownedComment>
      <ownedRule xmi:id="Classifier-inherit-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-inherit-spec-_specification">
          <language>OCL</language>
          <body>result = inhs</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Classifier-inherit-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-inherit-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-inherit-result-_upperValue" value="*"/>
      </ownedParameter>
      <ownedParameter xmi:id="Classifier-inherit-inhs" name="inhs" visibility="public">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-inherit-inhs-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-inherit-inhs-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="Classifier-inheritableMembers" name="inheritableMembers" visibility="public" isQuery="true">
      <ownedComment xmi:id="Classifier-inheritableMembers-_ownedComment.0">
        <body>The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.</body>
      </ownedComment>
      <ownedRule xmi:id="Classifier-inheritableMembers-pre" name="pre">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-inheritableMembers-pre-_specification">
          <language>OCL</language>
          <body>c.allParents()->includes(self)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="Classifier-inheritableMembers-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-inheritableMembers-spec-_specification">
          <language>OCL</language>
          <body>result = member->select(m | c.hasVisibilityOf(m))</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Classifier-inheritableMembers-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-inheritableMembers-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-inheritableMembers-result-_upperValue" value="*"/>
      </ownedParameter>
      <ownedParameter xmi:id="Classifier-inheritableMembers-c" name="c" visibility="public"/>
    </ownedOperation>
    <ownedOperation xmi:id="Classifier-inheritedMember.1" name="inheritedMember" visibility="public" isQuery="true">
      <ownedComment xmi:id="Classifier-inheritedMember.1-_ownedComment.0">
        <body>The inheritedMember association is derived by inheriting the inheritable members of the parents.</body>
      </ownedComment>
      <ownedComment xmi:id="Classifier-inheritedMember.1-_ownedComment.1">
        <body>The inheritedMember association is derived by inheriting the inheritable members of the parents.</body>
      </ownedComment>
      <ownedRule xmi:id="Classifier-inheritedMember.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-inheritedMember.1-spec-_specification">
          <language>OCL</language>
          <body>result = self.inherit(self.parents()->collect(p|p.inheritableMembers(self))->asSet())</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Classifier-inheritedMember.1-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-inheritedMember.1-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-inheritedMember.1-result-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="Classifier-isTemplate" name="isTemplate" visibility="public" isQuery="true">
      <ownedComment xmi:id="Classifier-isTemplate-_ownedComment.0">
        <body>The query isTemplate() returns whether this templateable element is actually a template.</body>
      </ownedComment>
      <ownedRule xmi:id="Classifier-isTemplate-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-isTemplate-spec-_specification">
          <language>OCL</language>
          <body>result = oclAsType(TemplatableElement).isTemplate() or general->exists(g | g.isTemplate())</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Classifier-isTemplate-result" name="result" visibility="public" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="Classifier-maySpecializeType" name="maySpecializeType" visibility="public" isQuery="true">
      <ownedComment xmi:id="Classifier-maySpecializeType-_ownedComment.0">
        <body>The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.</body>
      </ownedComment>
      <ownedRule xmi:id="Classifier-maySpecializeType-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-maySpecializeType-spec-_specification">
          <language>OCL</language>
          <body>result = self.oclIsKindOf(c.oclType)</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Classifier-maySpecializeType-result" name="result" visibility="public" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedParameter>
      <ownedParameter xmi:id="Classifier-maySpecializeType-c" name="c" visibility="public"/>
    </ownedOperation>
    <ownedOperation xmi:id="Classifier-parents" name="parents" visibility="public" isQuery="true">
      <ownedComment xmi:id="Classifier-parents-_ownedComment.0">
        <body>The query parents() gives all of the immediate ancestors of a generalized Classifier.</body>
      </ownedComment>
      <ownedRule xmi:id="Classifier-parents-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-parents-spec-_specification">
          <language>OCL</language>
          <body>result = generalization.general</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Classifier-parents-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-parents-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-parents-result-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ClassifierTemplateParameter" name="ClassifierTemplateParameter">
    <ownedComment xmi:id="ClassifierTemplateParameter-_ownedComment.0">
      <body>A classifier template parameter exposes a classifier as a formal template parameter.</body>
    </ownedComment>
    <ownedRule xmi:id="ClassifierTemplateParameter-has_constraining_classifier" name="has_constraining_classifier">
      <ownedComment xmi:id="ClassifierTemplateParameter-has_constraining_classifier-_ownedComment.0">
        <body>If &quot;allowSubstitutable&quot; is true, then there must be a constrainingClassifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ClassifierTemplateParameter-has_constraining_classifier-_specification">
        <language>OCL</language>
        <body>allowSubstitutable implies constrainingClassifier->notEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ClassifierTemplateParameter-_generalization.0"/>
    <ownedAttribute xmi:id="ClassifierTemplateParameter-allowSubstitutable" name="allowSubstitutable" visibility="public">
      <ownedComment xmi:id="ClassifierTemplateParameter-allowSubstitutable-_ownedComment.0">
        <body>Constrains the required relationship between an actual parameter and the parameteredElement for this formal parameter.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="ClassifierTemplateParameter-allowSubstitutable-_defaultValue" value="true"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ClassifierTemplateParameter-constrainingClassifier" name="constrainingClassifier" visibility="public">
      <ownedComment xmi:id="ClassifierTemplateParameter-constrainingClassifier-_ownedComment.0">
        <body>The classifiers that constrain the argument that can be used for the parameter. If the allowSubstitutable attribute is true, then any classifier that is compatible with this constraining classifier can be substituted; otherwise, it must be either this classifier or one of its subclasses. If this property is empty, there are no constraints on the classifier that can be used as an argument.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ClassifierTemplateParameter-constrainingClassifier-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ClassifierTemplateParameter-constrainingClassifier-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ClassifierTemplateParameter-parameteredElement" name="parameteredElement" visibility="public">
      <ownedComment xmi:id="ClassifierTemplateParameter-parameteredElement-_ownedComment.0">
        <body>The parameterable classifier for this template parameter.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Clause" name="Clause">
    <ownedComment xmi:id="Clause-_ownedComment.0">
      <body>A clause is an element that represents a single branch of a conditional construct, including a test and a body section. The body section is executed only if (but not necessarily if) the test section evaluates true.</body>
    </ownedComment>
    <ownedRule xmi:id="Clause-test_and_body" name="test_and_body">
      <ownedComment xmi:id="Clause-test_and_body-_ownedComment.0">
        <body>The test and body parts must be disjoint.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Clause-test_and_body-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Clause-body_output_pins" name="body_output_pins">
      <ownedComment xmi:id="Clause-body_output_pins-_ownedComment.0">
        <body>The bodyOutput pins are output pins on actions in the body of the clause.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Clause-body_output_pins-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Clause-decider_output" name="decider_output">
      <ownedComment xmi:id="Clause-decider_output-_ownedComment.0">
        <body>The decider output pin must be for the test body or a node contained by the test body as a structured node.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Clause-decider_output-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="Clause-_generalization.0"/>
    <ownedAttribute xmi:id="Clause-body" name="body" visibility="public">
      <ownedComment xmi:id="Clause-body-_ownedComment.0">
        <body>A nested activity fragment that is executed if the test evaluates to true and the clause is chosen over any concurrent clauses that also evaluate to true.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Clause-body-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Clause-body-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Clause-bodyOutput" name="bodyOutput" visibility="public" isOrdered="true">
      <ownedComment xmi:id="Clause-bodyOutput-_ownedComment.0">
        <body>A list of output pins within the body fragment whose values are moved to the result pins of the containing conditional node after execution of the clause body.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Clause-bodyOutput-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Clause-bodyOutput-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Clause-decider" name="decider" visibility="public">
      <ownedComment xmi:id="Clause-decider-_ownedComment.0">
        <body>An output pin within the test fragment the value of which is examined after execution of the test to determine whether the body should be executed.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="Clause-predecessorClause" name="predecessorClause" visibility="public">
      <ownedComment xmi:id="Clause-predecessorClause-_ownedComment.0">
        <body>A set of clauses whose tests must all evaluate false before the current clause can be tested.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Clause-predecessorClause-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Clause-predecessorClause-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Clause-successorClause" name="successorClause" visibility="public">
      <ownedComment xmi:id="Clause-successorClause-_ownedComment.0">
        <body>A set of clauses which may not be tested unless the current clause tests false.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Clause-successorClause-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Clause-successorClause-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Clause-test" name="test" visibility="public">
      <ownedComment xmi:id="Clause-test-_ownedComment.0">
        <body>A nested activity fragment with a designated output pin that specifies the result of the test.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Clause-test-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ClearAssociationAction" name="ClearAssociationAction">
    <ownedComment xmi:id="ClearAssociationAction-_ownedComment.0">
      <body>A clear association action is an action that destroys all links of an association in which a particular object participates.</body>
    </ownedComment>
    <ownedRule xmi:id="ClearAssociationAction-multiplicity" name="multiplicity">
      <ownedComment xmi:id="ClearAssociationAction-multiplicity-_ownedComment.0">
        <body>The multiplicity of the input pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ClearAssociationAction-multiplicity-_specification">
        <language>OCL</language>
        <body>self.object.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ClearAssociationAction-same_type" name="same_type">
      <ownedComment xmi:id="ClearAssociationAction-same_type-_ownedComment.0">
        <body>The type of the input pin must be the same as the type of at least one of the association ends of the association.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ClearAssociationAction-same_type-_specification">
        <language>OCL</language>
        <body>self.association->exists(end.type = self.object.type)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ClearAssociationAction-_generalization.0"/>
    <ownedAttribute xmi:id="ClearAssociationAction-association" name="association" visibility="public">
      <ownedComment xmi:id="ClearAssociationAction-association-_ownedComment.0">
        <body>Association to be cleared.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="ClearAssociationAction-object" name="object" visibility="public" aggregation="composite">
      <ownedComment xmi:id="ClearAssociationAction-object-_ownedComment.0">
        <body>Gives the input pin from which is obtained the object whose participation in the association is to be cleared.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ClearStructuralFeatureAction" name="ClearStructuralFeatureAction">
    <ownedComment xmi:id="ClearStructuralFeatureAction-_ownedComment.0">
      <body>A clear structural feature action is a structural feature action that removes all values of a structural feature.</body>
    </ownedComment>
    <ownedRule xmi:id="ClearStructuralFeatureAction-multiplicity_of_result" name="multiplicity_of_result">
      <ownedComment xmi:id="ClearStructuralFeatureAction-multiplicity_of_result-_ownedComment.0">
        <body>The multiplicity of the result output pin must be 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ClearStructuralFeatureAction-multiplicity_of_result-_specification">
        <language>OCL</language>
        <body>result->notEmpty() implies self.result.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ClearStructuralFeatureAction-type_of_result" name="type_of_result">
      <ownedComment xmi:id="ClearStructuralFeatureAction-type_of_result-_ownedComment.0">
        <body>The type of the result output pin is the same as the type of the inherited object input pin.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ClearStructuralFeatureAction-type_of_result-_specification">
        <language>OCL</language>
        <body>result->notEmpty() implies self.result.type = self.object.type</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ClearStructuralFeatureAction-_generalization.0"/>
    <ownedAttribute xmi:id="ClearStructuralFeatureAction-result" name="result" visibility="public" aggregation="composite">
      <ownedComment xmi:id="ClearStructuralFeatureAction-result-_ownedComment.0">
        <body>Gives the output pin on which the result is put.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ClearStructuralFeatureAction-result-_lowerValue"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ClearVariableAction" name="ClearVariableAction">
    <ownedComment xmi:id="ClearVariableAction-_ownedComment.0">
      <body>A clear variable action is a variable action that removes all values of a variable.</body>
    </ownedComment>
    <generalization xmi:id="ClearVariableAction-_generalization.0"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Collaboration" name="Collaboration">
    <ownedComment xmi:id="Collaboration-_ownedComment.0">
      <body>A collaboration use represents the application of the pattern described by a collaboration to a specific situation involving specific classes or instances playing the roles of the collaboration.</body>
    </ownedComment>
    <generalization xmi:id="Collaboration-_generalization.0"/>
    <generalization xmi:id="Collaboration-_generalization.1"/>
    <ownedAttribute xmi:id="Collaboration-collaborationRole" name="collaborationRole" visibility="public">
      <ownedComment xmi:id="Collaboration-collaborationRole-_ownedComment.0">
        <body>References connectable elements (possibly owned by other classifiers) which represent roles that instances may play in this collaboration.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Collaboration-collaborationRole-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Collaboration-collaborationRole-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="CollaborationUse" name="CollaborationUse">
    <ownedComment xmi:id="CollaborationUse-_ownedComment.0">
      <body>A collaboration use represents one particular use of a collaboration to explain the relationships between the properties of a classifier. A collaboration use shows how the pattern described by a collaboration is applied in a given context, by binding specific entities from that context to the roles of the collaboration. Depending on the context, these entities could be structural features of a classifier, instance specifications, or even roles in some containing collaboration. There may be multiple occurrences of a given collaboration within a classifier, each involving a different set of roles and connectors. A given role or connector may be involved in multiple occurrences of the same or different collaborations. Associated dependencies map features of the collaboration type to features in the classifier. These dependencies indicate which role in the classifier plays which role in the collaboration.</body>
    </ownedComment>
    <ownedRule xmi:id="CollaborationUse-connectors" name="connectors">
      <ownedComment xmi:id="CollaborationUse-connectors-_ownedComment.0">
        <body>The connectors in the classifier connect according to the connectors in the collaboration</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CollaborationUse-connectors-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CollaborationUse-every_role" name="every_role">
      <ownedComment xmi:id="CollaborationUse-every_role-_ownedComment.0">
        <body>Every role in the collaboration is bound within the collaboration use to a connectable element within the owning classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CollaborationUse-every_role-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CollaborationUse-client_elements" name="client_elements">
      <ownedComment xmi:id="CollaborationUse-client_elements-_ownedComment.0">
        <body>All the client elements of a roleBinding are in one classifier and all supplier elements of a roleBinding are in one collaboration and they are compatible.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CollaborationUse-client_elements-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="CollaborationUse-_generalization.0"/>
    <ownedAttribute xmi:id="CollaborationUse-roleBinding" name="roleBinding" visibility="public" aggregation="composite">
      <ownedComment xmi:id="CollaborationUse-roleBinding-_ownedComment.0">
        <body>A mapping between features of the collaboration type and features of the owning classifier. This mapping indicates which connectable element of the classifier plays which role(s) in the collaboration. A connectable element may be bound to multiple roles in the same collaboration use (that is, it may play multiple roles).</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="CollaborationUse-roleBinding-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="CollaborationUse-roleBinding-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="CollaborationUse-type" name="type" visibility="public">
      <ownedComment xmi:id="CollaborationUse-type-_ownedComment.0">
        <body>The collaboration which is used in this occurrence. The collaboration defines the cooperation between its roles which are mapped to properties of the classifier owning the collaboration use.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="CombinedFragment" name="CombinedFragment">
    <ownedComment xmi:id="CombinedFragment-_ownedComment.0">
      <body>A combined fragment defines an expression of interaction fragments. A combined fragment is defined by an interaction operator and corresponding interaction operands. Through the use of combined fragments the user will be able to describe a number of traces in a compact and concise manner.</body>
    </ownedComment>
    <ownedRule xmi:id="CombinedFragment-break" name="break">
      <ownedComment xmi:id="CombinedFragment-break-_ownedComment.0">
        <body>If the interactionOperator is break, the corresponding InteractionOperand must cover all Lifelines within the enclosing InteractionFragment.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CombinedFragment-break-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CombinedFragment-opt_loop_break_neg" name="opt_loop_break_neg">
      <ownedComment xmi:id="CombinedFragment-opt_loop_break_neg-_ownedComment.0">
        <body>If the interactionOperator is opt, loop, break, assert or neg, there must be exactly one operand.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CombinedFragment-opt_loop_break_neg-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CombinedFragment-consider_and_ignore" name="consider_and_ignore">
      <ownedComment xmi:id="CombinedFragment-consider_and_ignore-_ownedComment.0">
        <body>The interaction operators 'consider' and 'ignore' can only be used for the CombineIgnoreFragment subtype of CombinedFragment</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CombinedFragment-consider_and_ignore-_specification">
        <language>OCL</language>
        <body>((interactionOperator = #consider) or (interactionOperator = #ignore)) implies oclsisTypeOf(CombineIgnoreFragment)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CombinedFragment-minint_and_maxint" name="minint_and_maxint">
      <ownedComment xmi:id="CombinedFragment-minint_and_maxint-_ownedComment.0">
        <body>The InteractionConstraint with minint and maxint only apply when attached to an InteractionOperand where the interactionOperator is loop.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CombinedFragment-minint_and_maxint-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="CombinedFragment-_generalization.0"/>
    <ownedAttribute xmi:id="CombinedFragment-cfragmentGate" name="cfragmentGate" visibility="public" aggregation="composite">
      <ownedComment xmi:id="CombinedFragment-cfragmentGate-_ownedComment.0">
        <body>Specifies the gates that form the interface between this CombinedFragment and its surroundings</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="CombinedFragment-cfragmentGate-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="CombinedFragment-cfragmentGate-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="CombinedFragment-interactionOperator" name="interactionOperator" visibility="public">
      <ownedComment xmi:id="CombinedFragment-interactionOperator-_ownedComment.0">
        <body>Specifies the operation which defines the semantics of this combination of InteractionFragments.</body>
      </ownedComment>
      <defaultValue xmi:type="uml:InstanceValue" xmi:id="CombinedFragment-interactionOperator-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="CombinedFragment-operand" name="operand" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="CombinedFragment-operand-_ownedComment.0">
        <body>The set of operands of the combined fragment.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="CombinedFragment-operand-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Comment" name="Comment">
    <ownedComment xmi:id="Comment-_ownedComment.0">
      <body>A comment is a textual annotation that can be attached to a set of elements.</body>
    </ownedComment>
    <generalization xmi:id="Comment-_generalization.0"/>
    <ownedAttribute xmi:id="Comment-annotatedElement" name="annotatedElement" visibility="public">
      <ownedComment xmi:id="Comment-annotatedElement-_ownedComment.0">
        <body>References the Element(s) being commented.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Comment-annotatedElement-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Comment-annotatedElement-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Comment-body" name="body" visibility="public">
      <ownedComment xmi:id="Comment-body-_ownedComment.0">
        <body>Specifies a string that is the comment.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Comment-body-_lowerValue"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="CommunicationPath" name="CommunicationPath">
    <ownedComment xmi:id="CommunicationPath-_ownedComment.0">
      <body>A communication path is an association between two deployment targets, through which they are able to exchange signals and messages.</body>
    </ownedComment>
    <ownedRule xmi:id="CommunicationPath-association_ends" name="association_ends">
      <ownedComment xmi:id="CommunicationPath-association_ends-_ownedComment.0">
        <body>The association ends of a CommunicationPath are typed by DeploymentTargets.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CommunicationPath-association_ends-_specification">
        <language>OCL</language>
        <body>self.endType->forAll (t | t.oclIsKindOf(DeploymentTarget))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="CommunicationPath-_generalization.0"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Component" name="Component">
    <ownedComment xmi:id="Component-_ownedComment.0">
      <body>In the namespace of a component, all model elements that are involved in or related to its definition are either owned or imported explicitly. This may include, for example, use cases and dependencies (e.g. mappings), packages, components, and artifacts.</body>
    </ownedComment>
    <ownedComment xmi:id="Component-_ownedComment.1">
      <body>A component represents a modular part of a system that encapsulates its contents and whose manifestation is replaceable within its environment.</body>
    </ownedComment>
    <ownedRule xmi:id="Component-no_packaged_elements" name="no_packaged_elements">
      <ownedComment xmi:id="Component-no_packaged_elements-_ownedComment.0">
        <body>component nested in a Class cannot have any packaged elements.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Component-no_packaged_elements-_specification">
        <language>OCL</language>
        <body>(not self.class->isEmpty()) implies self.packagedElement->isEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Component-no_nested_classifiers" name="no_nested_classifiers">
      <ownedComment xmi:id="Component-no_nested_classifiers-_ownedComment.0">
        <body>A component cannot nest classifiers.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Component-no_nested_classifiers-_specification">
        <language>OCL</language>
        <body>self.nestedClassifier->isEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="Component-_generalization.0"/>
    <ownedAttribute xmi:id="Component-isIndirectlyInstantiated" name="isIndirectlyInstantiated" visibility="public">
      <ownedComment xmi:id="Component-isIndirectlyInstantiated-_ownedComment.0">
        <body>isIndirectlyInstantiated : Boolean {default = true} The kind of instantiation that applies to a Component. If false, the component is instantiated as an addressable object. If true, the Component is defined at design-time, but at run-time (or execution-time) an object specified by the Component does not exist, that is, the component is instantiated indirectly, through the instantiation of its realizing classifiers or parts. Several standard stereotypes use this meta attribute (e.g., «specification», «focus», «subsystem»).</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="Component-isIndirectlyInstantiated-_defaultValue" value="true"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Component-packagedElement" name="packagedElement" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Component-packagedElement-_ownedComment.0">
        <body>The set of PackageableElements that a Component owns. In the namespace of a component, all model elements that are involved in or related to its definition may be owned or imported explicitly. These may include e.g. Classes, Interfaces, Components, Packages, Use cases, Dependencies (e.g. mappings), and Artifacts.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Component-packagedElement-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Component-packagedElement-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Component-provided" name="provided" visibility="public" isReadOnly="true" isDerived="true">
      <ownedComment xmi:id="Component-provided-_ownedComment.0">
        <body>The interfaces that the component exposes to its environment. These interfaces may be Realized by the Component or any of its realizingClassifiers, or they may be the Interfaces that are provided by its public Ports.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Component-provided-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Component-provided-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Component-realization" name="realization" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Component-realization-_ownedComment.0">
        <body>The set of Realizations owned by the Component. Realizations reference the Classifiers of which the Component is an abstraction; i.e., that realize its behavior.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Component-realization-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Component-realization-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Component-required" name="required" visibility="public" isReadOnly="true" isDerived="true">
      <ownedComment xmi:id="Component-required-_ownedComment.0">
        <body>The interfaces that the component requires from other components in its environment in order to be able to offer its full set of provided functionality. These interfaces may be used by the Component or any of its realizingClassifiers, or they may be the Interfaces that are required by its public Ports.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Component-required-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Component-required-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedOperation xmi:id="Component-provided.1" name="provided" visibility="public" isQuery="true">
      <ownedComment xmi:id="Component-provided.1-_ownedComment.0">
        <body>Missing derivation for Component::/provided : Interface</body>
      </ownedComment>
      <ownedRule xmi:id="Component-provided.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Component-provided.1-spec-_specification">
          <language>OCL</language>
          <body>result =
let 	realizedInterfaces : Set(Interface) = RealizedInterfaces(self) ,
		realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),
		allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()) ,
		realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))) ,
		ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,
		providedByPorts : Set(Interface) = ports.provided 
in 	realizedInterfaces->union(realizingClassifierInterfaces) ->union(providedByPorts)->asSet()
</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Component-provided.1-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Component-provided.1-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Component-provided.1-result-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="Component-realizedInterfaces" name="realizedInterfaces" visibility="public" isQuery="true">
      <ownedComment xmi:id="Component-realizedInterfaces-_ownedComment.0">
        <body>Utility returning the set of realized interfaces of a component.</body>
      </ownedComment>
      <ownedRule xmi:id="Component-realizedInterfaces-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Component-realizedInterfaces-spec-_specification">
          <language>OCL</language>
          <body>result = (classifier.clientDependency->
select(dependency|dependency.oclIsKindOf(Realization) and dependency.supplier.oclIsKindOf(Interface)))->
collect(dependency|dependency.client)</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Component-realizedInterfaces-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Component-realizedInterfaces-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Component-realizedInterfaces-result-_upperValue" value="*"/>
      </ownedParameter>
      <ownedParameter xmi:id="Component-realizedInterfaces-classifier" name="classifier" visibility="public"/>
    </ownedOperation>
    <ownedOperation xmi:id="Component-required.1" name="required" visibility="public" isQuery="true">
      <ownedComment xmi:id="Component-required.1-_ownedComment.0">
        <body>Missing derivation for Component::/required : Interface</body>
      </ownedComment>
      <ownedRule xmi:id="Component-required.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Component-required.1-spec-_specification">
          <language>OCL</language>
          <body>result = 
let 	usedInterfaces : Set(Interface) = UsedInterfaces(self),
		realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),
		allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),
		realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),
		ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),
		usedByPorts : Set(Interface) = ports.required
in		usedInterfaces->union(realizingClassifierInterfaces) ->union(usedByPorts)->asSet()
</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Component-required.1-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Component-required.1-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Component-required.1-result-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="Component-usedInterfaces" name="usedInterfaces" visibility="public" isQuery="true">
      <ownedComment xmi:id="Component-usedInterfaces-_ownedComment.0">
        <body>Utility returning the set of used interfaces of a component.</body>
      </ownedComment>
      <ownedRule xmi:id="Component-usedInterfaces-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Component-usedInterfaces-spec-_specification">
          <language>OCL</language>
          <body>result = (classifier.supplierDependency->
select(dependency|dependency.oclIsKindOf(Usage) and dependency.supplier.oclIsKindOf(interface)))->
collect(dependency|dependency.supplier)</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Component-usedInterfaces-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Component-usedInterfaces-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Component-usedInterfaces-result-_upperValue" value="*"/>
      </ownedParameter>
      <ownedParameter xmi:id="Component-usedInterfaces-classifier" name="classifier" visibility="public"/>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ComponentRealization" name="ComponentRealization">
    <ownedComment xmi:id="ComponentRealization-_ownedComment.0">
      <body>The realization concept is specialized to (optionally) define the classifiers that realize the contract offered by a component in terms of its provided and required interfaces. The component forms an abstraction from these various classifiers.</body>
    </ownedComment>
    <generalization xmi:id="ComponentRealization-_generalization.0"/>
    <ownedAttribute xmi:id="ComponentRealization-abstraction" name="abstraction" visibility="public">
      <ownedComment xmi:id="ComponentRealization-abstraction-_ownedComment.0">
        <body>The Component that owns this ComponentRealization and which is implemented by its realizing classifiers.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ComponentRealization-abstraction-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ComponentRealization-realizingClassifier" name="realizingClassifier" visibility="public">
      <ownedComment xmi:id="ComponentRealization-realizingClassifier-_ownedComment.0">
        <body>The classifiers that are involved in the implementation of the Component that owns this Realization.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ComponentRealization-realizingClassifier-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ConditionalNode" name="ConditionalNode">
    <ownedComment xmi:id="ConditionalNode-_ownedComment.0">
      <body>A conditional node is a structured activity node that represents an exclusive choice among some number of alternatives.</body>
    </ownedComment>
    <ownedRule xmi:id="ConditionalNode-executable_nodes" name="executable_nodes">
      <ownedComment xmi:id="ConditionalNode-executable_nodes-_ownedComment.0">
        <body>The union of the ExecutabledNodes in the test and body parts of all clauses must be the same as the subset of nodes contained in the ConditionalNode (considered as a StructuredActivityNode) that are ExecutableNodes.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ConditionalNode-executable_nodes-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ConditionalNode-clause_no_predecessor" name="clause_no_predecessor">
      <ownedComment xmi:id="ConditionalNode-clause_no_predecessor-_ownedComment.0">
        <body>No two clauses within a ConditionalNode maybe predecessor clauses of each other, either directly or indirectly.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ConditionalNode-clause_no_predecessor-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ConditionalNode-matching_output_pins" name="matching_output_pins">
      <ownedComment xmi:id="ConditionalNode-matching_output_pins-_ownedComment.0">
        <body>Each clause of a conditional node must have the same number of bodyOutput pins as the conditional node has result output pins, and each clause bodyOutput pin must be compatible with the corresponding result pin (by positional order) in type, multiplicity, ordering and uniqueness.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ConditionalNode-matching_output_pins-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ConditionalNode-one_clause_with_executable_node" name="one_clause_with_executable_node">
      <ownedComment xmi:id="ConditionalNode-one_clause_with_executable_node-_ownedComment.0">
        <body>No ExecutableNode may appear in the test or body part of more than one clause of a conditional node.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ConditionalNode-one_clause_with_executable_node-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ConditionalNode-result_no_incoming" name="result_no_incoming">
      <ownedComment xmi:id="ConditionalNode-result_no_incoming-_ownedComment.0">
        <body>The result output pins have no incoming edges.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ConditionalNode-result_no_incoming-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ConditionalNode-no_input_pins" name="no_input_pins">
      <ownedComment xmi:id="ConditionalNode-no_input_pins-_ownedComment.0">
        <body>A conditional node has no input pins.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ConditionalNode-no_input_pins-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ConditionalNode-_generalization.0"/>
    <ownedAttribute xmi:id="ConditionalNode-clause" name="clause" visibility="public" aggregation="composite">
      <ownedComment xmi:id="ConditionalNode-clause-_ownedComment.0">
        <body>Set of clauses composing the conditional.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ConditionalNode-clause-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ConditionalNode-isAssured" name="isAssured" visibility="public">
      <ownedComment xmi:id="ConditionalNode-isAssured-_ownedComment.0">
        <body>If true, the modeler asserts that at least one test will succeed.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="ConditionalNode-isAssured-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ConditionalNode-isDeterminate" name="isDeterminate" visibility="public">
      <ownedComment xmi:id="ConditionalNode-isDeterminate-_ownedComment.0">
        <body>If true, the modeler asserts that at most one test will succeed.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="ConditionalNode-isDeterminate-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ConditionalNode-result" name="result" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="ConditionalNode-result-_ownedComment.0">
        <body>A list of output pins that constitute the data flow outputs of the conditional.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ConditionalNode-result-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ConditionalNode-result-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ConnectableElement" name="ConnectableElement" isAbstract="true">
    <ownedComment xmi:id="ConnectableElement-_ownedComment.0">
      <body>ConnectableElement is an abstract metaclass representing a set of instances that play roles of a classifier. Connectable elements may be joined by attached connectors and specify configurations of linked instances to be created within an instance of the containing classifier.</body>
    </ownedComment>
    <ownedComment xmi:id="ConnectableElement-_ownedComment.1">
      <body>A connectable element may be exposed as a connectable element template parameter.</body>
    </ownedComment>
    <generalization xmi:id="ConnectableElement-_generalization.0"/>
    <generalization xmi:id="ConnectableElement-_generalization.1"/>
    <ownedAttribute xmi:id="ConnectableElement-end" name="end" visibility="public" isOrdered="true" isReadOnly="true" isDerived="true">
      <ownedComment xmi:id="ConnectableElement-end-_ownedComment.0">
        <body>Denotes a set of connector ends that attaches to this connectable element.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ConnectableElement-end-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ConnectableElement-end-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ConnectableElement-templateParameter" name="templateParameter" visibility="public">
      <ownedComment xmi:id="ConnectableElement-templateParameter-_ownedComment.0">
        <body>The ConnectableElementTemplateParameter for this ConnectableElement parameter.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ConnectableElement-templateParameter-_lowerValue"/>
    </ownedAttribute>
    <ownedOperation xmi:id="ConnectableElement-end.1" name="end" visibility="public" isQuery="true">
      <ownedComment xmi:id="ConnectableElement-end.1-_ownedComment.0">
        <body>Missing derivation for ConnectableElement::/end : ConnectorEnd</body>
      </ownedComment>
      <ownedRule xmi:id="ConnectableElement-end.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="ConnectableElement-end.1-spec-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="ConnectableElement-end.1-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ConnectableElement-end.1-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ConnectableElement-end.1-result-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ConnectableElementTemplateParameter" name="ConnectableElementTemplateParameter">
    <ownedComment xmi:id="ConnectableElementTemplateParameter-_ownedComment.0">
      <body>A connectable element template parameter exposes a connectable element as a formal parameter for a template.</body>
    </ownedComment>
    <generalization xmi:id="ConnectableElementTemplateParameter-_generalization.0"/>
    <ownedAttribute xmi:id="ConnectableElementTemplateParameter-parameteredElement" name="parameteredElement" visibility="public">
      <ownedComment xmi:id="ConnectableElementTemplateParameter-parameteredElement-_ownedComment.0">
        <body>The ConnectableElement for this template parameter.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ConnectionPointReference" name="ConnectionPointReference">
    <ownedComment xmi:id="ConnectionPointReference-_ownedComment.0">
      <body>A connection point reference represents a usage (as part of a submachine state) of an entry/exit point defined in the statemachine reference by the submachine state.</body>
    </ownedComment>
    <ownedRule xmi:id="ConnectionPointReference-entry_pseudostates" name="entry_pseudostates">
      <ownedComment xmi:id="ConnectionPointReference-entry_pseudostates-_ownedComment.0">
        <body>The entry Pseudostates must be Pseudostates with kind entryPoint.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ConnectionPointReference-entry_pseudostates-_specification">
        <language>OCL</language>
        <body>entry->notEmpty() implies entry->forAll(e | e.kind = #entryPoint)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ConnectionPointReference-exit_pseudostates" name="exit_pseudostates">
      <ownedComment xmi:id="ConnectionPointReference-exit_pseudostates-_ownedComment.0">
        <body>The exit Pseudostates must be Pseudostates with kind exitPoint.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ConnectionPointReference-exit_pseudostates-_specification">
        <language>OCL</language>
        <body>exit->notEmpty() implies exit->forAll(e | e.kind = #exitPoint)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ConnectionPointReference-_generalization.0"/>
    <ownedAttribute xmi:id="ConnectionPointReference-entry" name="entry" visibility="public">
      <ownedComment xmi:id="ConnectionPointReference-entry-_ownedComment.0">
        <body>The entryPoint kind pseudo states corresponding to this connection point.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ConnectionPointReference-entry-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ConnectionPointReference-entry-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ConnectionPointReference-exit" name="exit" visibility="public">
      <ownedComment xmi:id="ConnectionPointReference-exit-_ownedComment.0">
        <body>The exitPoints kind pseudo states corresponding to this connection point.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ConnectionPointReference-exit-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ConnectionPointReference-exit-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ConnectionPointReference-state" name="state" visibility="public">
      <ownedComment xmi:id="ConnectionPointReference-state-_ownedComment.0">
        <body>The State in which the connection point refreshens are defined.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ConnectionPointReference-state-_lowerValue"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Connector" name="Connector">
    <ownedComment xmi:id="Connector-_ownedComment.0">
      <body>A delegation connector is a connector that links the external contract of a component (as specified by its ports) to the realization of that behavior. It represents the forwarding of events (operation requests and events): a signal that arrives at a port that has a delegation connector to one or more parts or ports on parts will be passed on to those targets for handling. An assembly connector is a connector between two or more parts or ports on parts that defines that one or more parts provide the services that other parts use.</body>
    </ownedComment>
    <ownedComment xmi:id="Connector-_ownedComment.1">
      <body>Specifies a link that enables communication between two or more instances. This link may be an instance of an association, or it may represent the possibility of the instances being able to communicate because their identities are known by virtue of being passed in as parameters, held in variables or slots, or because the communicating instances are the same instance. The link may be realized by something as simple as a pointer or by something as complex as a network connection. In contrast to associations, which specify links between any instance of the associated classifiers, connectors specify links between instances playing the connected parts only.</body>
    </ownedComment>
    <ownedRule xmi:id="Connector-compatible" name="compatible">
      <ownedComment xmi:id="Connector-compatible-_ownedComment.0">
        <body>The connectable elements attached to the ends of a connector must be compatible.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Connector-compatible-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Connector-roles" name="roles">
      <ownedComment xmi:id="Connector-roles-_ownedComment.0">
        <body>The ConnectableElements attached as roles to each ConnectorEnd owned by a Connector must be roles of the Classifier that owned the Connector, or they must be ports of such roles.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Connector-roles-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Connector-between_interfaces_ports" name="between_interfaces_ports">
      <ownedComment xmi:id="Connector-between_interfaces_ports-_ownedComment.0">
        <body>Each feature of each of the required interfaces of each Port or Part at the end of a connector must have at least one compatible feature among the features of the provided interfaces of Ports or Parts at the other ends, where the required set of (interface) features of a delegating port from the context of the delegating connector is the set of features that exist in the port's provided interfaces, and the provided set of (interface) features of a delegating port from the context of the delegating connector is the set of features that exist in the port's required interfaces.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Connector-between_interfaces_ports-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Connector-types" name="types">
      <ownedComment xmi:id="Connector-types-_ownedComment.0">
        <body>The types of the connectable elements that the ends of a connector are attached to must conform to the types of the association ends of the association that types the connector, if any.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Connector-types-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="Connector-_generalization.0"/>
    <ownedAttribute xmi:id="Connector-contract" name="contract" visibility="public">
      <ownedComment xmi:id="Connector-contract-_ownedComment.0">
        <body>The set of Behaviors that specify the valid interaction patterns across the connector.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Connector-contract-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Connector-contract-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Connector-end" name="end" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="Connector-end-_ownedComment.0">
        <body>A connector consists of at least two connector ends, each representing the participation of instances of the classifiers typing the connectable elements attached to this end. The set of connector ends is ordered.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Connector-end-_lowerValue" value="2"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Connector-end-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Connector-kind" name="kind" visibility="public" isReadOnly="true" isDerived="true">
      <ownedComment xmi:id="Connector-kind-_ownedComment.0">
        <body>Indicates the kind of connector. This is derived: a connector with one or more ends connected to a Port which is not on a Part and which is not a behavior port is a delegation; otherwise it is an assembly.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="Connector-redefinedConnector" name="redefinedConnector" visibility="public">
      <ownedComment xmi:id="Connector-redefinedConnector-_ownedComment.0">
        <body>A connector may be redefined when its containing classifier is specialized. The redefining connector may have a type that specializes the type of the redefined connector. The types of the connector ends of the redefining connector may specialize the types of the connector ends of the redefined connector. The properties of the connector ends of the redefining connector may be replaced.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Connector-redefinedConnector-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Connector-redefinedConnector-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Connector-type" name="type" visibility="public">
      <ownedComment xmi:id="Connector-type-_ownedComment.0">
        <body>An optional association that specifies the link corresponding to this connector.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Connector-type-_lowerValue"/>
    </ownedAttribute>
    <ownedOperation xmi:id="Connector-kind.1" name="kind" visibility="public" isQuery="true">
      <ownedComment xmi:id="Connector-kind.1-_ownedComment.0">
        <body>Missing derivation for Connector::/kind : ConnectorKind</body>
      </ownedComment>
      <ownedRule xmi:id="Connector-kind.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Connector-kind.1-spec-_specification">
          <language>OCL</language>
          <body>result =
if end->exists(
		role.oclIsKindOf(Port) 
		and partWithPort->isEmpty()
		and not role.oclAsType(Port).isBehavior)
then ConnectorKind::delegation 
else ConnectorKind::assembly 
endif</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Connector-kind.1-result" name="result" visibility="public" direction="return"/>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ConnectorEnd" name="ConnectorEnd">
    <ownedComment xmi:id="ConnectorEnd-_ownedComment.0">
      <body>A connector end is an endpoint of a connector, which attaches the connector to a connectable element. Each connector end is part of one connector.</body>
    </ownedComment>
    <ownedRule xmi:id="ConnectorEnd-role_and_part_with_port" name="role_and_part_with_port">
      <ownedComment xmi:id="ConnectorEnd-role_and_part_with_port-_ownedComment.0">
        <body>If a connector end references a partWithPort, then the role must be a port that is defined by the type of the partWithPort.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ConnectorEnd-role_and_part_with_port-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ConnectorEnd-self_part_with_port" name="self_part_with_port">
      <ownedComment xmi:id="ConnectorEnd-self_part_with_port-_ownedComment.0">
        <body>The property held in self.partWithPort must not be a Port.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ConnectorEnd-self_part_with_port-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ConnectorEnd-multiplicity" name="multiplicity">
      <ownedComment xmi:id="ConnectorEnd-multiplicity-_ownedComment.0">
        <body>The multiplicity of the connector end may not be more general than the multiplicity of the association typing the owning connector.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ConnectorEnd-multiplicity-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ConnectorEnd-part_with_port_empty" name="part_with_port_empty">
      <ownedComment xmi:id="ConnectorEnd-part_with_port_empty-_ownedComment.0">
        <body>If a connector end is attached to a port of the containing classifier, partWithPort will be empty.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ConnectorEnd-part_with_port_empty-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ConnectorEnd-_generalization.0"/>
    <ownedAttribute xmi:id="ConnectorEnd-definingEnd" name="definingEnd" visibility="public" isReadOnly="true" isDerived="true">
      <ownedComment xmi:id="ConnectorEnd-definingEnd-_ownedComment.0">
        <body>A derived association referencing the corresponding association end on the association which types the connector owing this connector end. This association is derived by selecting the association end at the same place in the ordering of association ends as this connector end.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ConnectorEnd-definingEnd-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ConnectorEnd-partWithPort" name="partWithPort" visibility="public">
      <ownedComment xmi:id="ConnectorEnd-partWithPort-_ownedComment.0">
        <body>Indicates the role of the internal structure of a classifier with the port to which the connector end is attached.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ConnectorEnd-partWithPort-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ConnectorEnd-role" name="role" visibility="public">
      <ownedComment xmi:id="ConnectorEnd-role-_ownedComment.0">
        <body>The connectable element attached at this connector end. When an instance of the containing classifier is created, a link may (depending on the multiplicities) be created to an instance of the classifier that types this connectable element.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedOperation xmi:id="ConnectorEnd-definingEnd.1" name="definingEnd" visibility="public" isQuery="true">
      <ownedComment xmi:id="ConnectorEnd-definingEnd.1-_ownedComment.0">
        <body>Missing derivation for ConnectorEnd::/definingEnd : Property</body>
      </ownedComment>
      <ownedRule xmi:id="ConnectorEnd-definingEnd.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="ConnectorEnd-definingEnd.1-spec-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="ConnectorEnd-definingEnd.1-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ConnectorEnd-definingEnd.1-result-_lowerValue"/>
      </ownedParameter>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ConsiderIgnoreFragment" name="ConsiderIgnoreFragment">
    <ownedComment xmi:id="ConsiderIgnoreFragment-_ownedComment.0">
      <body>A consider ignore fragment is a kind of combined fragment that is used for the consider and ignore cases, which require lists of pertinent messages to be specified.</body>
    </ownedComment>
    <ownedRule xmi:id="ConsiderIgnoreFragment-type" name="type">
      <ownedComment xmi:id="ConsiderIgnoreFragment-type-_ownedComment.0">
        <body>The NamedElements must be of a type of element that identifies a message (e.g., an Operation, Reception, or a Signal).</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ConsiderIgnoreFragment-type-_specification">
        <language>OCL</language>
        <body>message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Reception) or m.oclIsKindOf(Signal))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ConsiderIgnoreFragment-consider_or_ignore" name="consider_or_ignore">
      <ownedComment xmi:id="ConsiderIgnoreFragment-consider_or_ignore-_ownedComment.0">
        <body>The interaction operator of a ConsiderIgnoreFragment must be either 'consider' or 'ignore'.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ConsiderIgnoreFragment-consider_or_ignore-_specification">
        <language>OCL</language>
        <body>(interactionOperator = #consider) or (interactionOperator = #ignore)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ConsiderIgnoreFragment-_generalization.0"/>
    <ownedAttribute xmi:id="ConsiderIgnoreFragment-message" name="message" visibility="public">
      <ownedComment xmi:id="ConsiderIgnoreFragment-message-_ownedComment.0">
        <body>The set of messages that apply to this fragment</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ConsiderIgnoreFragment-message-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ConsiderIgnoreFragment-message-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Constraint" name="Constraint">
    <ownedComment xmi:id="Constraint-_ownedComment.0">
      <body>A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element.</body>
    </ownedComment>
    <ownedRule xmi:id="Constraint-not_apply_to_self" name="not_apply_to_self">
      <ownedComment xmi:id="Constraint-not_apply_to_self-_ownedComment.0">
        <body>A constraint cannot be applied to itself.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Constraint-not_apply_to_self-_specification">
        <language>OCL</language>
        <body>not constrainedElement->includes(self)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Constraint-no_side_effects" name="no_side_effects">
      <ownedComment xmi:id="Constraint-no_side_effects-_ownedComment.0">
        <body>Evaluating the value specification for a constraint must not have side effects.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Constraint-no_side_effects-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Constraint-boolean_value" name="boolean_value">
      <ownedComment xmi:id="Constraint-boolean_value-_ownedComment.0">
        <body>The value specification for a constraint must evaluate to a Boolean value.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Constraint-boolean_value-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Constraint-value_specification_boolean" name="value_specification_boolean">
      <ownedComment xmi:id="Constraint-value_specification_boolean-_ownedComment.0">
        <body>The value specification for a constraint must evaluate to a Boolean value.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Constraint-value_specification_boolean-_specification">
        <language>OCL</language>
        <body>self.specification().booleanValue().isOclKindOf(Boolean)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="Constraint-_generalization.0"/>
    <ownedAttribute xmi:id="Constraint-constrainedElement" name="constrainedElement" visibility="public" isOrdered="true">
      <ownedComment xmi:id="Constraint-constrainedElement-_ownedComment.0">
        <body>The ordered set of Elements referenced by this Constraint.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Constraint-constrainedElement-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Constraint-constrainedElement-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Constraint-context" name="context" visibility="public">
      <ownedComment xmi:id="Constraint-context-_ownedComment.0">
        <body>Specifies the namespace that owns the NamedElement.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Constraint-context-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Constraint-specification" name="specification" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Constraint-specification-_ownedComment.0">
        <body>A condition that must be true when evaluated in order for the constraint to be satisfied.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Continuation" name="Continuation">
    <ownedComment xmi:id="Continuation-_ownedComment.0">
      <body>A continuation is a syntactic way to define continuations of different branches of an alternative combined fragment. Continuations is intuitively similar to labels representing intermediate points in a flow of control.</body>
    </ownedComment>
    <ownedRule xmi:id="Continuation-same_name" name="same_name">
      <ownedComment xmi:id="Continuation-same_name-_ownedComment.0">
        <body>Continuations with the same name may only cover the same set of Lifelines (within one Classifier).</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Continuation-same_name-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Continuation-first_or_last_interaction_fragment" name="first_or_last_interaction_fragment">
      <ownedComment xmi:id="Continuation-first_or_last_interaction_fragment-_ownedComment.0">
        <body>Continuations always occur as the very first InteractionFragment or the very last InteractionFragment of the enclosing InteractionFragment.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Continuation-first_or_last_interaction_fragment-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Continuation-global" name="global">
      <ownedComment xmi:id="Continuation-global-_ownedComment.0">
        <body>Continuations are always global in the enclosing InteractionFragment e.g. it always covers all Lifelines covered by the enclosing InteractionFragment.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Continuation-global-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="Continuation-_generalization.0"/>
    <ownedAttribute xmi:id="Continuation-setting" name="setting" visibility="public">
      <ownedComment xmi:id="Continuation-setting-_ownedComment.0">
        <body>True: when the Continuation is at the end of the enclosing InteractionFragment and False when it is in the beginning.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="Continuation-setting-_defaultValue" value="true"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ControlFlow" name="ControlFlow">
    <ownedComment xmi:id="ControlFlow-_ownedComment.0">
      <body>A control flow is an edge that starts an activity node after the previous one is finished.</body>
    </ownedComment>
    <ownedRule xmi:id="ControlFlow-object_nodes" name="object_nodes">
      <ownedComment xmi:id="ControlFlow-object_nodes-_ownedComment.0">
        <body>Control flows may not have object nodes at either end, except for object nodes with control type.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ControlFlow-object_nodes-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ControlFlow-_generalization.0"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ControlNode" name="ControlNode" isAbstract="true">
    <ownedComment xmi:id="ControlNode-_ownedComment.0">
      <body>A control node is an abstract activity node that coordinates flows in an activity.</body>
    </ownedComment>
    <generalization xmi:id="ControlNode-_generalization.0"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="CreateLinkAction" name="CreateLinkAction">
    <ownedComment xmi:id="CreateLinkAction-_ownedComment.0">
      <body>A create link action is a write link action for creating links.</body>
    </ownedComment>
    <ownedRule xmi:id="CreateLinkAction-association_not_abstract" name="association_not_abstract">
      <ownedComment xmi:id="CreateLinkAction-association_not_abstract-_ownedComment.0">
        <body>The association cannot be an abstract classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CreateLinkAction-association_not_abstract-_specification">
        <language>OCL</language>
        <body>self.association().isAbstract = #false</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="CreateLinkAction-_generalization.0"/>
    <ownedAttribute xmi:id="CreateLinkAction-endData" name="endData" visibility="public" aggregation="composite">
      <ownedComment xmi:id="CreateLinkAction-endData-_ownedComment.0">
        <body>Specifies ends of association and inputs.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="CreateLinkAction-endData-_lowerValue" value="2"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="CreateLinkAction-endData-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="CreateLinkObjectAction" name="CreateLinkObjectAction">
    <ownedComment xmi:id="CreateLinkObjectAction-_ownedComment.0">
      <body>A create link object action creates a link object.</body>
    </ownedComment>
    <ownedRule xmi:id="CreateLinkObjectAction-association_class" name="association_class">
      <ownedComment xmi:id="CreateLinkObjectAction-association_class-_ownedComment.0">
        <body>The association must be an association class.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CreateLinkObjectAction-association_class-_specification">
        <language>OCL</language>
        <body>self.association().oclIsKindOf(Class)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CreateLinkObjectAction-type_of_result" name="type_of_result">
      <ownedComment xmi:id="CreateLinkObjectAction-type_of_result-_ownedComment.0">
        <body>The type of the result pin must be the same as the association of the action.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CreateLinkObjectAction-type_of_result-_specification">
        <language>OCL</language>
        <body>self.result.type = self.association()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CreateLinkObjectAction-multiplicity" name="multiplicity">
      <ownedComment xmi:id="CreateLinkObjectAction-multiplicity-_ownedComment.0">
        <body>The multiplicity of the output pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CreateLinkObjectAction-multiplicity-_specification">
        <language>OCL</language>
        <body>self.result.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="CreateLinkObjectAction-_generalization.0"/>
    <ownedAttribute xmi:id="CreateLinkObjectAction-result" name="result" visibility="public" aggregation="composite">
      <ownedComment xmi:id="CreateLinkObjectAction-result-_ownedComment.0">
        <body>Gives the output pin on which the result is put.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="CreateObjectAction" name="CreateObjectAction">
    <ownedComment xmi:id="CreateObjectAction-_ownedComment.0">
      <body>A create object action is an action that creates an object that conforms to a statically specified classifier and puts it on an output pin at runtime.</body>
    </ownedComment>
    <ownedRule xmi:id="CreateObjectAction-classifier_not_association_class" name="classifier_not_association_class">
      <ownedComment xmi:id="CreateObjectAction-classifier_not_association_class-_ownedComment.0">
        <body>The classifier cannot be an association class</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CreateObjectAction-classifier_not_association_class-_specification">
        <language>OCL</language>
        <body>not self.classifier.oclIsKindOf(AssociationClass)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CreateObjectAction-classifier_not_abstract" name="classifier_not_abstract">
      <ownedComment xmi:id="CreateObjectAction-classifier_not_abstract-_ownedComment.0">
        <body>The classifier cannot be abstract.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CreateObjectAction-classifier_not_abstract-_specification">
        <language>OCL</language>
        <body>not (self.classifier.isAbstract = #true)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CreateObjectAction-same_type" name="same_type">
      <ownedComment xmi:id="CreateObjectAction-same_type-_ownedComment.0">
        <body>The type of the result pin must be the same as the classifier of the action.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CreateObjectAction-same_type-_specification">
        <language>OCL</language>
        <body>self.result.type = self.classifier</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="CreateObjectAction-multiplicity" name="multiplicity">
      <ownedComment xmi:id="CreateObjectAction-multiplicity-_ownedComment.0">
        <body>The multiplicity of the output pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="CreateObjectAction-multiplicity-_specification">
        <language>OCL</language>
        <body>self.result.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="CreateObjectAction-_generalization.0"/>
    <ownedAttribute xmi:id="CreateObjectAction-classifier" name="classifier" visibility="public">
      <ownedComment xmi:id="CreateObjectAction-classifier-_ownedComment.0">
        <body>Classifier to be instantiated.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="CreateObjectAction-result" name="result" visibility="public" aggregation="composite">
      <ownedComment xmi:id="CreateObjectAction-result-_ownedComment.0">
        <body>Gives the output pin on which the result is put.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="DataStoreNode" name="DataStoreNode">
    <ownedComment xmi:id="DataStoreNode-_ownedComment.0">
      <body>A data store node is a central buffer node for non-transient information.</body>
    </ownedComment>
    <generalization xmi:id="DataStoreNode-_generalization.0"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="DataType" name="DataType">
    <ownedComment xmi:id="DataType-_ownedComment.0">
      <body>A data type is a type whose instances are identified only by their value. A data type may contain attributes to support the modeling of structured data types.</body>
    </ownedComment>
    <generalization xmi:id="DataType-_generalization.0"/>
    <ownedAttribute xmi:id="DataType-ownedAttribute" name="ownedAttribute" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="DataType-ownedAttribute-_ownedComment.0">
        <body>The Attributes owned by the DataType.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DataType-ownedAttribute-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DataType-ownedAttribute-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="DataType-ownedOperation" name="ownedOperation" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="DataType-ownedOperation-_ownedComment.0">
        <body>The Operations owned by the DataType.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DataType-ownedOperation-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DataType-ownedOperation-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedOperation xmi:id="DataType-inherit" name="inherit" visibility="public" isQuery="true">
      <ownedComment xmi:id="DataType-inherit-_ownedComment.0">
        <body>The inherit operation is overridden to exclude redefined properties.</body>
      </ownedComment>
      <ownedRule xmi:id="DataType-inherit-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="DataType-inherit-spec-_specification">
          <language>OCL</language>
          <body>result = inhs->excluding(inh | ownedMember->select(oclIsKindOf(RedefinableElement))->select(redefinedElement->includes(inh)))</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="DataType-inherit-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DataType-inherit-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DataType-inherit-result-_upperValue" value="*"/>
      </ownedParameter>
      <ownedParameter xmi:id="DataType-inherit-inhs" name="inhs" visibility="public">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DataType-inherit-inhs-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DataType-inherit-inhs-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="DecisionNode" name="DecisionNode">
    <ownedComment xmi:id="DecisionNode-_ownedComment.0">
      <body>A decision node is a control node that chooses between outgoing flows.</body>
    </ownedComment>
    <ownedRule xmi:id="DecisionNode-parameters" name="parameters">
      <ownedComment xmi:id="DecisionNode-parameters-_ownedComment.0">
        <body>A decision input behavior has no output parameters, no in-out parameters and one return parameter.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DecisionNode-parameters-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="DecisionNode-incoming_object_one_input_parameter" name="incoming_object_one_input_parameter">
      <ownedComment xmi:id="DecisionNode-incoming_object_one_input_parameter-_ownedComment.0">
        <body>If the decision node has no decision input flow and an incoming object flow, then a decision input behavior has one input parameter whose type is the same as or a supertype of the type of object tokens offered on the incoming edge.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DecisionNode-incoming_object_one_input_parameter-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="DecisionNode-incoming_outgoing_edges" name="incoming_outgoing_edges">
      <ownedComment xmi:id="DecisionNode-incoming_outgoing_edges-_ownedComment.0">
        <body>A decision node has one or two incoming edges and at least one outgoing edge.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DecisionNode-incoming_outgoing_edges-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="DecisionNode-incoming_control_one_input_parameter" name="incoming_control_one_input_parameter">
      <ownedComment xmi:id="DecisionNode-incoming_control_one_input_parameter-_ownedComment.0">
        <body>If the decision node has a decision input flow and an incoming control flow, then a decision input behavior has one input parameter whose type is the same as or a supertype of the type of object tokens offered on the decision input flow.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DecisionNode-incoming_control_one_input_parameter-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="DecisionNode-two_input_parameters" name="two_input_parameters">
      <ownedComment xmi:id="DecisionNode-two_input_parameters-_ownedComment.0">
        <body>If the decision node has a decision input flow and an second incoming object flow, then a decision input behavior has two input parameters, the first of which has a type that is the same as or a supertype of the type of the type of object tokens offered on the nondecision input flow and the second of which has a type that is the same as or a supertype of the type of object tokens offered on the decision input flow.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DecisionNode-two_input_parameters-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="DecisionNode-decision_input_flow_incoming" name="decision_input_flow_incoming">
      <ownedComment xmi:id="DecisionNode-decision_input_flow_incoming-_ownedComment.0">
        <body>The decisionInputFlow of a decision node must be an incoming edge of the decision node.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DecisionNode-decision_input_flow_incoming-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="DecisionNode-zero_input_parameters" name="zero_input_parameters">
      <ownedComment xmi:id="DecisionNode-zero_input_parameters-_ownedComment.0">
        <body>If the decision node has no decision input flow and an incoming control flow, then a decision input behavior has zero input parameters.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DecisionNode-zero_input_parameters-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="DecisionNode-edges" name="edges">
      <ownedComment xmi:id="DecisionNode-edges-_ownedComment.0">
        <body>The edges coming into and out of a decision node, other than the decision input flow (if any), must be either all object flows or all control flows.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DecisionNode-edges-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="DecisionNode-_generalization.0"/>
    <ownedAttribute xmi:id="DecisionNode-decisionInput" name="decisionInput" visibility="public">
      <ownedComment xmi:id="DecisionNode-decisionInput-_ownedComment.0">
        <body>Provides input to guard specifications on edges outgoing from the decision node.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DecisionNode-decisionInput-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="DecisionNode-decisionInputFlow" name="decisionInputFlow" visibility="public">
      <ownedComment xmi:id="DecisionNode-decisionInputFlow-_ownedComment.0">
        <body>An additional edge incoming to the decision node that provides a decision input value.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DecisionNode-decisionInputFlow-_lowerValue"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Dependency" name="Dependency">
    <ownedComment xmi:id="Dependency-_ownedComment.0">
      <body>A dependency is a relationship that signifies that a single or a set of model elements requires other model elements for their specification or implementation. This means that the complete semantics of the depending elements is either semantically or structurally dependent on the definition of the supplier element(s).</body>
    </ownedComment>
    <generalization xmi:id="Dependency-_generalization.0"/>
    <generalization xmi:id="Dependency-_generalization.1"/>
    <ownedAttribute xmi:id="Dependency-client" name="client" visibility="public">
      <ownedComment xmi:id="Dependency-client-_ownedComment.0">
        <body>The element(s) dependent on the supplier element(s). In some cases (such as a Trace Abstraction) the assignment of direction (that is, the designation of the client element) is at the discretion of the modeler, and is a stipulation.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Dependency-client-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Dependency-supplier" name="supplier" visibility="public">
      <ownedComment xmi:id="Dependency-supplier-_ownedComment.0">
        <body>The element(s) independent of the client element(s), in the same respect and the same dependency relationship. In some directed dependency relationships (such as Refinement Abstractions), a common convention in the domain of class-based OO software is to put the more abstract element in this role. Despite this convention, users of UML may stipulate a sense of dependency suitable for their domain, which makes a more abstract element dependent on that which is more specific.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Dependency-supplier-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="DeployedArtifact" name="DeployedArtifact" isAbstract="true">
    <ownedComment xmi:id="DeployedArtifact-_ownedComment.0">
      <body>A deployed artifact is an artifact or artifact instance that has been deployed to a deployment target.</body>
    </ownedComment>
    <generalization xmi:id="DeployedArtifact-_generalization.0"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Deployment" name="Deployment">
    <ownedComment xmi:id="Deployment-_ownedComment.0">
      <body>A deployment is the allocation of an artifact or artifact instance to a deployment target.</body>
    </ownedComment>
    <ownedComment xmi:id="Deployment-_ownedComment.1">
      <body>A component deployment is the deployment of one or more artifacts or artifact instances to a deployment target, optionally parameterized by a deployment specification. Examples are executables and configuration files.</body>
    </ownedComment>
    <generalization xmi:id="Deployment-_generalization.0"/>
    <ownedAttribute xmi:id="Deployment-configuration" name="configuration" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Deployment-configuration-_ownedComment.0">
        <body>The specification of properties that parameterize the deployment and execution of one or more Artifacts.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Deployment-configuration-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Deployment-configuration-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Deployment-deployedArtifact" name="deployedArtifact" visibility="public">
      <ownedComment xmi:id="Deployment-deployedArtifact-_ownedComment.0">
        <body>The Artifacts that are deployed onto a Node. This association specializes the supplier association.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Deployment-deployedArtifact-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Deployment-deployedArtifact-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Deployment-location" name="location" visibility="public">
      <ownedComment xmi:id="Deployment-location-_ownedComment.0">
        <body>The DeployedTarget which is the target of a Deployment.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="DeploymentSpecification" name="DeploymentSpecification">
    <ownedComment xmi:id="DeploymentSpecification-_ownedComment.0">
      <body>A deployment specification specifies a set of properties that determine execution parameters of a component artifact that is deployed on a node. A deployment specification can be aimed at a specific type of container. An artifact that reifies or implements deployment specification properties is a deployment descriptor.</body>
    </ownedComment>
    <ownedRule xmi:id="DeploymentSpecification-deployed_elements" name="deployed_elements">
      <ownedComment xmi:id="DeploymentSpecification-deployed_elements-_ownedComment.0">
        <body>The deployedElements of a DeploymentTarget that are involved in a Deployment that has an associated Deployment-Specification is a kind of Component (i.e. the configured components).</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DeploymentSpecification-deployed_elements-_specification">
        <language>OCL</language>
        <body>self.deployment->forAll (d | d.location.deployedElements->forAll (de |
  de.oclIsKindOf(Component)))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="DeploymentSpecification-deployment_target" name="deployment_target">
      <ownedComment xmi:id="DeploymentSpecification-deployment_target-_ownedComment.0">
        <body>The DeploymentTarget of a DeploymentSpecification is a kind of ExecutionEnvironment.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DeploymentSpecification-deployment_target-_specification">
        <language>OCL</language>
        <body>self.deployment->forAll (d | d.location.oclIsKindOf(ExecutionEnvironment))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="DeploymentSpecification-_generalization.0"/>
    <ownedAttribute xmi:id="DeploymentSpecification-deployment" name="deployment" visibility="public">
      <ownedComment xmi:id="DeploymentSpecification-deployment-_ownedComment.0">
        <body>The deployment with which the DeploymentSpecification is associated.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DeploymentSpecification-deployment-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="DeploymentSpecification-deploymentLocation" name="deploymentLocation" visibility="public">
      <ownedComment xmi:id="DeploymentSpecification-deploymentLocation-_ownedComment.0">
        <body>The location where an Artifact is deployed onto a Node. This is typically a 'directory' or 'memory address'.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DeploymentSpecification-deploymentLocation-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="DeploymentSpecification-executionLocation" name="executionLocation" visibility="public">
      <ownedComment xmi:id="DeploymentSpecification-executionLocation-_ownedComment.0">
        <body>The location where a component Artifact executes. This may be a local or remote location.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DeploymentSpecification-executionLocation-_lowerValue"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="DeploymentTarget" name="DeploymentTarget" isAbstract="true">
    <ownedComment xmi:id="DeploymentTarget-_ownedComment.0">
      <body>A deployment target is the location for a deployed artifact.</body>
    </ownedComment>
    <generalization xmi:id="DeploymentTarget-_generalization.0"/>
    <ownedAttribute xmi:id="DeploymentTarget-deployedElement" name="deployedElement" visibility="public" isReadOnly="true" isDerived="true">
      <ownedComment xmi:id="DeploymentTarget-deployedElement-_ownedComment.0">
        <body>The set of elements that are manifested in an Artifact that is involved in Deployment to a DeploymentTarget.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DeploymentTarget-deployedElement-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DeploymentTarget-deployedElement-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="DeploymentTarget-deployment" name="deployment" visibility="public" aggregation="composite">
      <ownedComment xmi:id="DeploymentTarget-deployment-_ownedComment.0">
        <body>The set of Deployments for a DeploymentTarget.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DeploymentTarget-deployment-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DeploymentTarget-deployment-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedOperation xmi:id="DeploymentTarget-deployedElement.1" name="deployedElement" visibility="public" isQuery="true">
      <ownedComment xmi:id="DeploymentTarget-deployedElement.1-_ownedComment.0">
        <body>Missing derivation for DeploymentTarget::/deployedElement : PackageableElement</body>
      </ownedComment>
      <ownedRule xmi:id="DeploymentTarget-deployedElement.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="DeploymentTarget-deployedElement.1-spec-_specification">
          <language>OCL</language>
          <body>result = ((self.deployment->collect(deployedArtifact))->collect(manifestation))->collect(utilizedElement)</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="DeploymentTarget-deployedElement.1-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DeploymentTarget-deployedElement.1-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DeploymentTarget-deployedElement.1-result-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="DestroyLinkAction" name="DestroyLinkAction">
    <ownedComment xmi:id="DestroyLinkAction-_ownedComment.0">
      <body>A destroy link action is a write link action that destroys links and link objects.</body>
    </ownedComment>
    <generalization xmi:id="DestroyLinkAction-_generalization.0"/>
    <ownedAttribute xmi:id="DestroyLinkAction-endData" name="endData" visibility="public" aggregation="composite">
      <ownedComment xmi:id="DestroyLinkAction-endData-_ownedComment.0">
        <body>Specifies ends of association and inputs.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DestroyLinkAction-endData-_lowerValue" value="2"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DestroyLinkAction-endData-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="DestroyObjectAction" name="DestroyObjectAction">
    <ownedComment xmi:id="DestroyObjectAction-_ownedComment.0">
      <body>A destroy object action is an action that destroys objects.</body>
    </ownedComment>
    <ownedRule xmi:id="DestroyObjectAction-multiplicity" name="multiplicity">
      <ownedComment xmi:id="DestroyObjectAction-multiplicity-_ownedComment.0">
        <body>The multiplicity of the input pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DestroyObjectAction-multiplicity-_specification">
        <language>OCL</language>
        <body>self.target.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="DestroyObjectAction-no_type" name="no_type">
      <ownedComment xmi:id="DestroyObjectAction-no_type-_ownedComment.0">
        <body>The input pin has no type.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DestroyObjectAction-no_type-_specification">
        <language>OCL</language>
        <body>self.target.type->size() = 0</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="DestroyObjectAction-_generalization.0"/>
    <ownedAttribute xmi:id="DestroyObjectAction-isDestroyLinks" name="isDestroyLinks" visibility="public">
      <ownedComment xmi:id="DestroyObjectAction-isDestroyLinks-_ownedComment.0">
        <body>Specifies whether links in which the object participates are destroyed along with the object.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="DestroyObjectAction-isDestroyLinks-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="DestroyObjectAction-isDestroyOwnedObjects" name="isDestroyOwnedObjects" visibility="public">
      <ownedComment xmi:id="DestroyObjectAction-isDestroyOwnedObjects-_ownedComment.0">
        <body>Specifies whether objects owned by the object are destroyed along with the object.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="DestroyObjectAction-isDestroyOwnedObjects-_defaultValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="DestroyObjectAction-target" name="target" visibility="public" aggregation="composite">
      <ownedComment xmi:id="DestroyObjectAction-target-_ownedComment.0">
        <body>The input pin providing the object to be destroyed.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="DestructionOccurrenceSpecification" name="DestructionOccurrenceSpecification">
    <ownedComment xmi:id="DestructionOccurrenceSpecification-_ownedComment.0">
      <body>A destruction event models the destruction of an object.</body>
    </ownedComment>
    <ownedRule xmi:id="DestructionOccurrenceSpecification-no_occurrence_specifications_below" name="no_occurrence_specifications_below">
      <ownedComment xmi:id="DestructionOccurrenceSpecification-no_occurrence_specifications_below-_ownedComment.0">
        <body>No other OccurrenceSpecifications on a given Lifeline in an InteractionOperand may appear below a DestructionOccurrenceSpecification.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DestructionOccurrenceSpecification-no_occurrence_specifications_below-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="DestructionOccurrenceSpecification-_generalization.0"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Device" name="Device">
    <ownedComment xmi:id="Device-_ownedComment.0">
      <body>A device is a physical computational resource with processing capability upon which artifacts may be deployed for execution. Devices may be complex (i.e., they may consist of other devices).</body>
    </ownedComment>
    <generalization xmi:id="Device-_generalization.0"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="DirectedRelationship" name="DirectedRelationship" isAbstract="true">
    <ownedComment xmi:id="DirectedRelationship-_ownedComment.0">
      <body>A directed relationship represents a relationship between a collection of source model elements and a collection of target model elements.</body>
    </ownedComment>
    <generalization xmi:id="DirectedRelationship-_generalization.0"/>
    <ownedAttribute xmi:id="DirectedRelationship-source" name="source" visibility="public" isReadOnly="true" isDerived="true" isDerivedUnion="true">
      <ownedComment xmi:id="DirectedRelationship-source-_ownedComment.0">
        <body>Specifies the sources of the DirectedRelationship.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DirectedRelationship-source-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="DirectedRelationship-target" name="target" visibility="public" isReadOnly="true" isDerived="true" isDerivedUnion="true">
      <ownedComment xmi:id="DirectedRelationship-target-_ownedComment.0">
        <body>Specifies the targets of the DirectedRelationship.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DirectedRelationship-target-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Duration" name="Duration">
    <ownedComment xmi:id="Duration-_ownedComment.0">
      <body>Duration defines a value specification that specifies the temporal distance between two time instants.</body>
    </ownedComment>
    <generalization xmi:id="Duration-_generalization.0"/>
    <ownedAttribute xmi:id="Duration-expr" name="expr" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Duration-expr-_ownedComment.0">
        <body>The value of the Duration.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Duration-expr-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Duration-observation" name="observation" visibility="public">
      <ownedComment xmi:id="Duration-observation-_ownedComment.0">
        <body>Refers to the time and duration observations that are involved in expr.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Duration-observation-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Duration-observation-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="DurationConstraint" name="DurationConstraint">
    <ownedComment xmi:id="DurationConstraint-_ownedComment.0">
      <body>A duration constraint is a constraint that refers to a duration interval.</body>
    </ownedComment>
    <ownedRule xmi:id="DurationConstraint-first_event_multiplicity" name="first_event_multiplicity">
      <ownedComment xmi:id="DurationConstraint-first_event_multiplicity-_ownedComment.0">
        <body>The multiplicity of firstEvent must be 2 if the multiplicity of constrainedElement is 2. Otherwise the multiplicity of firstEvent is 0.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DurationConstraint-first_event_multiplicity-_specification">
        <language>OCL</language>
        <body>if (constrainedElement->size() =2)
  then (firstEvent->size() = 2) else (firstEvent->size() = 0)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="DurationConstraint-_generalization.0"/>
    <ownedAttribute xmi:id="DurationConstraint-firstEvent" name="firstEvent" visibility="public">
      <ownedComment xmi:id="DurationConstraint-firstEvent-_ownedComment.0">
        <body>The value of firstEvent[i] is related to constrainedElement[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters constrainedElement[i]. If firstEvent[i] is false, then the corresponding observation event is the last time instant the execution is within constrainedElement[i]. Default value is true applied when constrainedElement[i] refers an element that represents only one time instant.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DurationConstraint-firstEvent-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DurationConstraint-firstEvent-_upperValue" value="2"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="DurationConstraint-specification" name="specification" visibility="public" aggregation="composite">
      <ownedComment xmi:id="DurationConstraint-specification-_ownedComment.0">
        <body>The interval constraining the duration.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="DurationInterval" name="DurationInterval">
    <ownedComment xmi:id="DurationInterval-_ownedComment.0">
      <body>A duration interval defines the range between two durations.</body>
    </ownedComment>
    <generalization xmi:id="DurationInterval-_generalization.0"/>
    <ownedAttribute xmi:id="DurationInterval-max" name="max" visibility="public">
      <ownedComment xmi:id="DurationInterval-max-_ownedComment.0">
        <body>Refers to the Duration denoting the maximum value of the range.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="DurationInterval-min" name="min" visibility="public">
      <ownedComment xmi:id="DurationInterval-min-_ownedComment.0">
        <body>Refers to the Duration denoting the minimum value of the range.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="DurationObservation" name="DurationObservation">
    <ownedComment xmi:id="DurationObservation-_ownedComment.0">
      <body>A duration observation is a reference to a duration during an execution. It points out the element(s) in the model to observe and whether the observations are when this model element is entered or when it is exited.</body>
    </ownedComment>
    <ownedRule xmi:id="DurationObservation-first_event_multiplicity" name="first_event_multiplicity">
      <ownedComment xmi:id="DurationObservation-first_event_multiplicity-_ownedComment.0">
        <body>The multiplicity of firstEvent must be 2 if the multiplicity of event is 2. Otherwise the multiplicity of firstEvent is 0.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="DurationObservation-first_event_multiplicity-_specification">
        <language>OCL</language>
        <body>if (event->size() = 2)
  then (firstEvent->size() = 2) else (firstEvent->size() = 0)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="DurationObservation-_generalization.0"/>
    <ownedAttribute xmi:id="DurationObservation-event" name="event" visibility="public">
      <ownedComment xmi:id="DurationObservation-event-_ownedComment.0">
        <body>The observation is determined by the entering or exiting of the event element during execution.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DurationObservation-event-_upperValue" value="2"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="DurationObservation-firstEvent" name="firstEvent" visibility="public">
      <ownedComment xmi:id="DurationObservation-firstEvent-_ownedComment.0">
        <body>The value of firstEvent[i] is related to event[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters event[i]. If firstEvent[i] is false, then the corresponding observation event is the time instant the execution exits event[i]. Default value is true applied when event[i] refers an element that represents only one time instant.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DurationObservation-firstEvent-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DurationObservation-firstEvent-_upperValue" value="2"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Element" name="Element" isAbstract="true">
    <ownedComment xmi:id="Element-_ownedComment.0">
      <body>An element is a constituent of a model. As such, it has the capability of owning other elements.</body>
    </ownedComment>
    <ownedRule xmi:id="Element-has_owner" name="has_owner">
      <ownedComment xmi:id="Element-has_owner-_ownedComment.0">
        <body>Elements that must be owned must have an owner.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Element-has_owner-_specification">
        <language>OCL</language>
        <body>self.mustBeOwned() implies owner->notEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="Element-not_own_self" name="not_own_self">
      <ownedComment xmi:id="Element-not_own_self-_ownedComment.0">
        <body>An element may not directly or indirectly own itself.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="Element-not_own_self-_specification">
        <language>OCL</language>
        <body>not self.allOwnedElements()->includes(self)</body>
      </specification>
    </ownedRule>
    <ownedAttribute xmi:id="Element-ownedComment" name="ownedComment" visibility="public" aggregation="composite">
      <ownedComment xmi:id="Element-ownedComment-_ownedComment.0">
        <body>The Comments owned by this element.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Element-ownedComment-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Element-ownedComment-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Element-ownedElement" name="ownedElement" visibility="public" isReadOnly="true" aggregation="composite" isDerived="true" isDerivedUnion="true">
      <ownedComment xmi:id="Element-ownedElement-_ownedComment.0">
        <body>The Elements owned by this element.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Element-ownedElement-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Element-ownedElement-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="Element-owner" name="owner" visibility="public" isReadOnly="true" isDerived="true" isDerivedUnion="true">
      <ownedComment xmi:id="Element-owner-_ownedComment.0">
        <body>The Element that owns this element.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Element-owner-_lowerValue"/>
    </ownedAttribute>
    <ownedOperation xmi:id="Element-allOwnedElements" name="allOwnedElements" visibility="public" isQuery="true">
      <ownedComment xmi:id="Element-allOwnedElements-_ownedComment.0">
        <body>The query allOwnedElements() gives all of the direct and indirect owned elements of an element.</body>
      </ownedComment>
      <ownedRule xmi:id="Element-allOwnedElements-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Element-allOwnedElements-spec-_specification">
          <language>OCL</language>
          <body>result = ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Element-allOwnedElements-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Element-allOwnedElements-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Element-allOwnedElements-result-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="Element-mustBeOwned" name="mustBeOwned" visibility="public" isQuery="true">
      <ownedComment xmi:id="Element-mustBeOwned-_ownedComment.0">
        <body>The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.</body>
      </ownedComment>
      <ownedRule xmi:id="Element-mustBeOwned-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Element-mustBeOwned-spec-_specification">
          <language>OCL</language>
          <body>result = true</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="Element-mustBeOwned-result" name="result" visibility="public" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedParameter>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ElementImport" name="ElementImport">
    <ownedComment xmi:id="ElementImport-_ownedComment.0">
      <body>An element import identifies an element in another package, and allows the element to be referenced using its name without a qualifier.</body>
    </ownedComment>
    <ownedRule xmi:id="ElementImport-visibility_public_or_private" name="visibility_public_or_private">
      <ownedComment xmi:id="ElementImport-visibility_public_or_private-_ownedComment.0">
        <body>The visibility of an ElementImport is either public or private.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ElementImport-visibility_public_or_private-_specification">
        <language>OCL</language>
        <body>self.visibility = #public or self.visibility = #private</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ElementImport-imported_element_is_public" name="imported_element_is_public">
      <ownedComment xmi:id="ElementImport-imported_element_is_public-_ownedComment.0">
        <body>An importedElement has either public visibility or no visibility at all.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ElementImport-imported_element_is_public-_specification">
        <language>OCL</language>
        <body>self.importedElement.visibility.notEmpty() implies self.importedElement.visibility = #public</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ElementImport-_generalization.0"/>
    <ownedAttribute xmi:id="ElementImport-alias" name="alias" visibility="public">
      <ownedComment xmi:id="ElementImport-alias-_ownedComment.0">
        <body>Specifies the name that should be added to the namespace of the importing package in lieu of the name of the imported packagable element. The aliased name must not clash with any other member name in the importing package. By default, no alias is used.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ElementImport-alias-_lowerValue"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ElementImport-importedElement" name="importedElement" visibility="public">
      <ownedComment xmi:id="ElementImport-importedElement-_ownedComment.0">
        <body>Specifies the PackageableElement whose name is to be added to a Namespace.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="ElementImport-importingNamespace" name="importingNamespace" visibility="public">
      <ownedComment xmi:id="ElementImport-importingNamespace-_ownedComment.0">
        <body>Specifies the Namespace that imports a PackageableElement from another Package.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="ElementImport-visibility" name="visibility" visibility="public">
      <ownedComment xmi:id="ElementImport-visibility-_ownedComment.0">
        <body>Specifies the visibility of the imported PackageableElement within the importing Package. The default visibility is the same as that of the imported element. If the imported element does not have a visibility, it is possible to add visibility to the element import.</body>
      </ownedComment>
      <defaultValue xmi:type="uml:InstanceValue" xmi:id="ElementImport-visibility-_defaultValue"/>
    </ownedAttribute>
    <ownedOperation xmi:id="ElementImport-getName" name="getName" visibility="public" isQuery="true">
      <ownedComment xmi:id="ElementImport-getName-_ownedComment.0">
        <body>The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.</body>
      </ownedComment>
      <ownedRule xmi:id="ElementImport-getName-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="ElementImport-getName-spec-_specification">
          <language>OCL</language>
          <body>result = if self.alias->notEmpty() then
  self.alias
else
  self.importedElement.name
endif</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="ElementImport-getName-result" name="result" visibility="public" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedParameter>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="EncapsulatedClassifier" name="EncapsulatedClassifier" isAbstract="true">
    <ownedComment xmi:id="EncapsulatedClassifier-_ownedComment.0">
      <body>A classifier has the ability to own ports as specific and type checked interaction points.</body>
    </ownedComment>
    <generalization xmi:id="EncapsulatedClassifier-_generalization.0"/>
    <ownedAttribute xmi:id="EncapsulatedClassifier-ownedPort" name="ownedPort" visibility="public" isReadOnly="true" aggregation="composite" isDerived="true">
      <ownedComment xmi:id="EncapsulatedClassifier-ownedPort-_ownedComment.0">
        <body>References a set of ports that an encapsulated classifier owns.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="EncapsulatedClassifier-ownedPort-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="EncapsulatedClassifier-ownedPort-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedOperation xmi:id="EncapsulatedClassifier-ownedPort.1" name="ownedPort" visibility="public" isQuery="true">
      <ownedComment xmi:id="EncapsulatedClassifier-ownedPort.1-_ownedComment.0">
        <body>Missing derivation for EncapsulatedClassifier::/ownedPort : Port</body>
      </ownedComment>
      <ownedRule xmi:id="EncapsulatedClassifier-ownedPort.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="EncapsulatedClassifier-ownedPort.1-spec-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="EncapsulatedClassifier-ownedPort.1-result" name="result" visibility="public" direction="return">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="EncapsulatedClassifier-ownedPort.1-result-_lowerValue"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="EncapsulatedClassifier-ownedPort.1-result-_upperValue" value="*"/>
      </ownedParameter>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Enumeration" name="Enumeration">
    <ownedComment xmi:id="Enumeration-_ownedComment.0">
      <body>An enumeration is a data type whose values are enumerated in the model as enumeration literals.</body>
    </ownedComment>
    <generalization xmi:id="Enumeration-_generalization.0"/>
    <ownedAttribute xmi:id="Enumeration-ownedLiteral" name="ownedLiteral" visibility="public" isOrdered="true" aggregation="composite">
      <ownedComment xmi:id="Enumeration-ownedLiteral-_ownedComment.0">
        <body>The ordered set of literals for this Enumeration.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Enumeration-ownedLiteral-_lowerValue"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Enumeration-ownedLiteral-_upperValue" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="EnumerationLiteral" name="EnumerationLiteral">
    <ownedComment xmi:id="EnumerationLiteral-_ownedComment.0">
      <body>An enumeration literal is a user-defined data value for an enumeration.</body>
    </ownedComment>
    <ownedRule xmi:id="EnumerationLiteral-classifier_equals_owning_enumeration" name="classifier_equals_owning_enumeration">
      <specification xmi:type="uml:OpaqueExpression" xmi:id="EnumerationLiteral-classifier_equals_owning_enumeration-_specification">
        <language>OCL</language>
        <body>classifier = enumeration</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="EnumerationLiteral-_generalization.0"/>
    <ownedAttribute xmi:id="EnumerationLiteral-classifier" name="classifier" visibility="public" isReadOnly="true" isDerived="true">
      <ownedComment xmi:id="EnumerationLiteral-classifier-_ownedComment.0">
        <body>The classifier of this EnumerationLiteral derived to be equal to its enumeration.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="EnumerationLiteral-enumeration" name="enumeration" visibility="public">
      <ownedComment xmi:id="EnumerationLiteral-enumeration-_ownedComment.0">
        <body>The Enumeration that this EnumerationLiteral is a member of.</body>
      </ownedComment>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="EnumerationLiteral-enumeration-_lowerValue"/>
    </ownedAttribute>
    <ownedOperation xmi:id="EnumerationLiteral-classifier.1" name="classifier" visibility="public" isQuery="true">
      <ownedComment xmi:id="EnumerationLiteral-classifier.1-_ownedComment.0">
        <body>Missing derivation for EnumerationLiteral::/classifier : Enumeration</body>
      </ownedComment>
      <ownedRule xmi:id="EnumerationLiteral-classifier.1-spec" name="spec">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="EnumerationLiteral-classifier.1-spec-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedParameter xmi:id="EnumerationLiteral-classifier.1-result" name="result" visibility="public" direction="return"/>
    </ownedOperation>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="Event" name="Event" isAbstract="true">
    <ownedComment xmi:id="Event-_ownedComment.0">
      <body>An event is the specification of some occurrence that may potentially trigger effects by an object.</body>
    </ownedComment>
    <generalization xmi:id="Event-_generalization.0"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ExceptionHandler" name="ExceptionHandler">
    <ownedComment xmi:id="ExceptionHandler-_ownedComment.0">
      <body>An exception handler is an element that specifies a body to execute in case the specified exception occurs during the execution of the protected node.</body>
    </ownedComment>
    <ownedRule xmi:id="ExceptionHandler-one_input" name="one_input">
      <ownedComment xmi:id="ExceptionHandler-one_input-_ownedComment.0">
        <body>The handler body has one input, and that input is the same as the exception input.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ExceptionHandler-one_input-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ExceptionHandler-edge_source_target" name="edge_source_target">
      <ownedComment xmi:id="ExceptionHandler-edge_source_target-_ownedComment.0">
        <body>An edge that has a source in an exception handler structured node must have its target in the handler also, and vice versa.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ExceptionHandler-edge_source_target-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ExceptionHandler-result_pins" name="result_pins">
      <ownedComment xmi:id="ExceptionHandler-result_pins-_ownedComment.0">
        <body>If the protected node is a StructuredActivityNode with output pins, then the exception handler body must also be a StructuredActivityNode with output pins that correspond in number and types to those of the protected node.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ExceptionHandler-result_pins-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="ExceptionHandler-exception_body" name="exception_body">
      <ownedComment xmi:id="ExceptionHandler-exception_body-_ownedComment.0">
        <body>The exception handler and its input object node are not the source or target of any edge.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="ExceptionHandler-exception_body-_specification">
        <language>OCL</language>
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="ExceptionHandler-_generalization.0"/>
    <ownedAttribute xmi:id="ExceptionHandler-exceptionInput" name="exceptionInput" visibility="public">
      <ownedComment xmi:id="ExceptionHandler-exceptionInput-_ownedComment.0">
        <body>An object node within the handler body. When the handler catches an exception, the exception token is placed in this node, causing the body to execute.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="ExceptionHandler-exceptionType" name="exceptionType" visibility="public">
      <ownedComment xmi:id="ExceptionHandler-exceptionType-_ownedComment.0">
        <body>The kind of instances that the handler catches. If an exception occurs whose type is any of the classifiers in the set, the handler catches the exception and executes its body.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ExceptionHandler-exceptionType-_upperValue" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="ExceptionHandler-handlerBody" name="handlerBody" visibility="public">
      <ownedComment xmi:id="ExceptionHandler-handlerBody-_ownedComment.0">
        <body>A node that is executed if the handler satisfies an uncaught exception.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="ExceptionHandler-protectedNode" name="protectedNode" visibility="public">
      <ownedComment xmi:id="ExceptionHandler-protectedNode-_ownedComment.0">
        <body>The node protected by the handler. The handler is examined if an exception propagates to the outside of the node.</body>
      </ownedComment>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="ExecutableNode" name="ExecutableNode" isAbstract="true">
    <ownedComment xmi:id="ExecutableNode-_ownedComment.0"/>
  </packagedElement>
</uml:Package>
